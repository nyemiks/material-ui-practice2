["^ ","~:output",["^ ","~:js","goog.provide('re_frame.std_interceptors');\r\nre_frame.std_interceptors.debug = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"debug\",\"debug\",-1608172596),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$debug_before(context){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Handling re-frame event:\",re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442))], 0));\r\n\r\nreturn context;\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$debug_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar orig_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new_db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes in:\",event], 0));\r\n} else {\r\nvar vec__21165_21188 = clojure.data.diff(orig_db,new_db);\r\nvar only_before_21189 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21165_21188,(0),null);\r\nvar only_after_21190 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21165_21188,(1),null);\r\nvar db_changed_QMARK__21191 = (((!((only_before_21189 == null)))) || ((!((only_after_21190 == null)))));\r\nif(db_changed_QMARK__21191){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"group\",\"group\",582596132),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"db clojure.data/diff for:\",event], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only before:\",only_before_21189], 0));\r\n\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"only after :\",only_after_21190], 0));\r\n\r\nre_frame.loggers.console(new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382));\r\n} else {\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"No app-db changes resulted from:\",event], 0));\r\n}\r\n}\r\n\r\nreturn context;\r\n})], 0));\r\nre_frame.std_interceptors.unwrap = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"unwrap\",\"unwrap\",-1399175462),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$unwrap_before(context){\r\nvar vec__21168 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21168,(0),null);\r\nvar payload = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21168,(1),null);\r\nvar event = vec__21168;\r\nif((!(((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((2),cljs.core.count(event))) && (cljs.core.map_QMARK_(payload)))))){\r\nthrow cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(\"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\",event);\r\n} else {\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),payload);\r\n}\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$unwrap_after(context){\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\r\n})], 0));\r\nre_frame.std_interceptors.trim_v = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"trim-v\",\"trim-v\",-1274938640),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$trim_v_before(context){\r\nif((!(cljs.core.vector_QMARK_(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))))){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \",cljs.core.type(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442)))], 0));\r\n\r\nreturn context;\r\n} else {\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),cljs.core.subvec,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(1)], 0));\r\n}\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$trim_v_after(context){\r\nreturn re_frame.interceptor.assoc_coeffect(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403)));\r\n})], 0));\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\r\n * \r\n *   These handlers take two arguments;  `db` and `event`, and they return `db`.\r\n * \r\n *    (fn [db event]\r\n *       ....)\r\n * \r\n *   So, the interceptor wraps the given handler:\r\n *   1. extracts two `:coeffects` keys: db and event\r\n *   2. calls handler-fn\r\n *   3. stores the db result back into context's `:effects`\r\n */\r\nre_frame.std_interceptors.db_handler__GT_interceptor = (function re_frame$std_interceptors$db_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$db_handler__GT_interceptor_$_db_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__21171 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__21172 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21172);\r\n\r\ntry{try{var map__21173 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__21173__$1 = cljs.core.__destructure_map(map__21173);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21173__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21173__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__20661__auto___21192 = re_frame.interop.now();\r\nvar duration__20662__auto___21193 = (end__20661__auto___21192 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__20662__auto___21193,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__20661__auto___21192);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21171);\r\n}})():(function (){var map__21174 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__21174__$1 = cljs.core.__destructure_map(map__21174);\r\nvar db = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21174__$1,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21174__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(db,event) : handler_fn.call(null, db,event)));\r\n})());\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__20663__auto___21194 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__20663__auto___21194);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\r\n * \r\n *   These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\r\n * \r\n *    (fn [coeffects event]\r\n *       {:db ...\r\n *        :fx ...})\r\n * \r\n * Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\r\n *   1. extracts `:coeffects`\r\n *   2. call handler-fn giving coeffects\r\n *   3. stores the result back into the `:effects`\r\n */\r\nre_frame.std_interceptors.fx_handler__GT_interceptor = (function re_frame$std_interceptors$fx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$fx_handler__GT_interceptor_$_fx_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__21175 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__21176 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21176);\r\n\r\ntry{try{var map__21177 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__21177__$1 = cljs.core.__destructure_map(map__21177);\r\nvar coeffects = map__21177__$1;\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21177__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__20661__auto___21195 = re_frame.interop.now();\r\nvar duration__20662__auto___21196 = (end__20661__auto___21195 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__20662__auto___21196,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__20661__auto___21195);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21175);\r\n}})():(function (){var map__21178 = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context);\r\nvar map__21178__$1 = cljs.core.__destructure_map(map__21178);\r\nvar coeffects = map__21178__$1;\r\nvar event = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__21178__$1,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(coeffects,event) : handler_fn.call(null, coeffects,event)));\r\n})());\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__20663__auto___21197 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__20663__auto___21197);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\n/**\r\n * Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\r\n *   These advanced handlers take one argument: `context` and they return a modified `context`.\r\n *   Example:\r\n * \r\n *    (fn [context]\r\n *       (enqueue context [more interceptors]))\r\n */\r\nre_frame.std_interceptors.ctx_handler__GT_interceptor = (function re_frame$std_interceptors$ctx_handler__GT_interceptor(handler_fn){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$ctx_handler__GT_interceptor_$_ctx_handler_before(context){\r\nvar new_context = ((re_frame.trace.is_trace_enabled_QMARK_())?(function (){var _STAR_current_trace_STAR__orig_val__21179 = re_frame.trace._STAR_current_trace_STAR_;\r\nvar _STAR_current_trace_STAR__temp_val__21180 = re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"event\",\"handler\",\"event/handler\",-295903150),new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403))], null));\r\n(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21180);\r\n\r\ntry{try{return (handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context));\r\n}finally {if(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar end__20661__auto___21198 = re_frame.interop.now();\r\nvar duration__20662__auto___21199 = (end__20661__auto___21198 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(re_frame.trace._STAR_current_trace_STAR_));\r\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__20662__auto___21199,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),re_frame.interop.now()], 0)));\r\n\r\nre_frame.trace.run_tracing_callbacks_BANG_(end__20661__auto___21198);\r\n} else {\r\n}\r\n}}finally {(re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21179);\r\n}})():(handler_fn.cljs$core$IFn$_invoke$arity$1 ? handler_fn.cljs$core$IFn$_invoke$arity$1(context) : handler_fn.call(null, context)));\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__20663__auto___21200 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(new_context),new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1(context)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__20663__auto___21200);\r\n\r\n} else {\r\n}\r\n\r\nreturn new_context;\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.path = (function re_frame$std_interceptors$path(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___21201 = arguments.length;\r\nvar i__5727__auto___21202 = (0);\r\nwhile(true){\r\nif((i__5727__auto___21202 < len__5726__auto___21201)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___21202]));\r\n\r\nvar G__21203 = (i__5727__auto___21202 + (1));\r\ni__5727__auto___21202 = G__21203;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.std_interceptors.path.cljs$core$IFn$_invoke$arity$variadic = (function (args){\r\nvar path = cljs.core.flatten(args);\r\nvar history_key = new cljs.core.Keyword(\"re-frame.db\",\"path-history\",\"re-frame.db/path-history\",-1466258079);\r\nif(cljs.core.empty_QMARK_(path)){\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: \\\"path\\\" interceptor given no params\"], 0));\r\n} else {\r\n}\r\n\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"path\",\"path\",-188191168),new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(\"re-frame.db\",\"path\",\"re-frame.db/path\",-1845708459),path], null),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function (context){\r\nvar original_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nreturn re_frame.interceptor.assoc_coeffect(cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,history_key,cljs.core.conj,original_db),new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(original_db,path));\r\n}),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function (context){\r\nvar db_store = history_key.cljs$core$IFn$_invoke$arity$1(context);\r\nvar original_db = cljs.core.peek(db_store);\r\nvar new_db_store = cljs.core.pop(db_store);\r\nvar context_SINGLEQUOTE_ = re_frame.interceptor.assoc_coeffect(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(context,history_key,new_db_store),new cljs.core.Keyword(null,\"db\",\"db\",993250759),original_db);\r\nvar db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865));\r\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.Keyword(\"re-frame.std-interceptors\",\"not-found\",\"re-frame.std-interceptors/not-found\",-1614827865))){\r\nreturn context_SINGLEQUOTE_;\r\n} else {\r\nreturn re_frame.interceptor.assoc_effect(context_SINGLEQUOTE_,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(original_db,path,db));\r\n}\r\n})], 0));\r\n}));\r\n\r\n(re_frame.std_interceptors.path.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.std_interceptors.path.cljs$lang$applyTo = (function (seq21181){\r\nvar self__5712__auto__ = this;\r\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq21181));\r\n}));\r\n\r\nre_frame.std_interceptors.enrich = (function re_frame$std_interceptors$enrich(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"enrich\",\"enrich\",-2108921925),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$enrich_$_enrich_after(context){\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\nvar prev_db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\r\nvar new_db = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(prev_db,event) : f.call(null, prev_db,event));\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),(function (){var or__5002__auto__ = new_db;\r\nif(cljs.core.truth_(or__5002__auto__)){\r\nreturn or__5002__auto__;\r\n} else {\r\nreturn prev_db;\r\n}\r\n})());\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.after = (function re_frame$std_interceptors$after(f){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"after\",\"after\",594996914),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$after_$_after_after(context){\r\nvar db = ((cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759)))?re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)):re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759)));\r\nvar event = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"event\",\"event\",301435442));\r\n(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(db,event) : f.call(null, db,event));\r\n\r\nreturn context;\r\n})], 0));\r\n});\r\nre_frame.std_interceptors.on_changes = (function re_frame$std_interceptors$on_changes(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___21204 = arguments.length;\r\nvar i__5727__auto___21205 = (0);\r\nwhile(true){\r\nif((i__5727__auto___21205 < len__5726__auto___21204)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___21205]));\r\n\r\nvar G__21206 = (i__5727__auto___21205 + (1));\r\ni__5727__auto___21205 = G__21206;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((2) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((2)),(0),null)):null);\r\nreturn re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.std_interceptors.on_changes.cljs$core$IFn$_invoke$arity$variadic = (function (f,out_path,in_paths){\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"on-changes\",\"on-changes\",1345912602),new cljs.core.Keyword(null,\"after\",\"after\",594996914),(function re_frame$std_interceptors$on_change_after(context){\r\nvar new_db = re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar old_db = re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nvar new_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__21182_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(new_db,p1__21182_SHARP_);\r\n}),in_paths);\r\nvar old_ins = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__21183_SHARP_){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(old_db,p1__21183_SHARP_);\r\n}),in_paths);\r\nvar changed_ins_QMARK_ = (function (){var and__5000__auto__ = cljs.core.contains_QMARK_(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1(context),new cljs.core.Keyword(null,\"db\",\"db\",993250759));\r\nif(and__5000__auto__){\r\nreturn cljs.core.some(cljs.core.false_QMARK_,cljs.core.map.cljs$core$IFn$_invoke$arity$3(cljs.core.identical_QMARK_,new_ins,old_ins));\r\n} else {\r\nreturn and__5000__auto__;\r\n}\r\n})();\r\nif(cljs.core.truth_(changed_ins_QMARK_)){\r\nreturn re_frame.interceptor.assoc_effect(context,new cljs.core.Keyword(null,\"db\",\"db\",993250759),cljs.core.assoc_in(new_db,out_path,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,new_ins)));\r\n} else {\r\nreturn context;\r\n}\r\n})], 0));\r\n}));\r\n\r\n(re_frame.std_interceptors.on_changes.cljs$lang$maxFixedArity = (2));\r\n\r\n/** @this {Function} */\r\n(re_frame.std_interceptors.on_changes.cljs$lang$applyTo = (function (seq21184){\r\nvar G__21185 = cljs.core.first(seq21184);\r\nvar seq21184__$1 = cljs.core.next(seq21184);\r\nvar G__21186 = cljs.core.first(seq21184__$1);\r\nvar seq21184__$2 = cljs.core.next(seq21184__$1);\r\nvar self__5711__auto__ = this;\r\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__21185,G__21186,seq21184__$2);\r\n}));\r\n\r\n/**\r\n * An interceptor which adds registered global interceptors to the context's queue.\r\n * \r\n * NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\r\n */\r\nre_frame.std_interceptors.inject_global_interceptors = re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),new cljs.core.Keyword(null,\"inject-global-interceptors\",\"inject-global-interceptors\",-2144129737),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),(function re_frame$std_interceptors$inject_global_interceptors_before(context){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),(function (p1__21187_SHARP_){\r\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$2(re_frame.settings.get_global_interceptors(),p1__21187_SHARP_);\r\n}));\r\n})], 0));\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","contains re-frame supplied, standard interceptors","~:file","re_frame/std_interceptors.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",30],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index","~$searchappbar","~$module$node_modules$searchappbar$dist$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.std-interceptors","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cofx","~$re-frame.cofx","~$re-frame.interceptor","^U","~$data","~$clojure.data","~$re-frame.trace","^X","~$re-frame.settings","^Y","~$cljs.core","^Z","~$interceptor","^U","~$goog","^10","~$trace","^X","~$re-frame.utils","^12","~$settings","^Y","~$re-frame.loggers","^14","~$utils","^12","^T","^T","^W","^W","~$re-frame.db","^16"],"~:seen",["^K",["~:require"]],"~:uses",["^ ","~$->interceptor","^U","~$get-effect","^U","~$get-coeffect","^U","~$assoc-coeffect","^U","~$assoc-effect","^U","~$update-coeffect","^U","~$console","^14","~$app-db","^16"],"~:require-macros",["^ ","^X","^X","^11","^X","^Z","^Z"],"~:form",["~#list",["~$ns","^M","contains re-frame supplied, standard interceptors",["^1D",["^18",["^U","~:refer",["^1:","^1;","^1<","^1=","^1>","^1?"]],["^14","^1F",["^1@"]],["^Y","~:as","^13"],["^16","^1F",["^1A"]],["^W","^1G","^V"],["^T","^1G","^S"],["^12","^1G","^15"],["^X","^1G","^11","~:include-macros",true],["^U","^1G","^["]]]]],"~:flags",["^ ","^18",["^K",[]]],"~:js-deps",["^ "],"~:deps",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]],"^P","^M","~:resource-id",["~:shadow.build.classpath/resource","re_frame/std_interceptors.cljc"],"~:compiled-at",1712868675014,"^N",["^ ","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^U","^10","^10","^11","^X","^12","^12","^13","^Y","^14","^14","^15","^12","^T","^T","^W","^W","^16","^16"],"~:resource-name","re_frame/std_interceptors.cljc","~:warnings",[],"~:source","(ns re-frame.std-interceptors\n  \"contains re-frame supplied, standard interceptors\"\n  (:require\n   [re-frame.interceptor :refer [->interceptor get-effect get-coeffect assoc-coeffect assoc-effect update-coeffect]]\n   [re-frame.loggers :refer [console]]\n   [re-frame.settings :as settings]\n   [re-frame.db :refer [app-db]]\n   [clojure.data :as data]\n   [re-frame.cofx :as cofx]\n   [re-frame.utils :as utils]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.interceptor :as interceptor]))\n\n(def debug\n  (->interceptor\n   :id     :debug\n   :before (fn debug-before\n             [context]\n             (console :log \"Handling re-frame event:\" (get-coeffect context :event))\n             context)\n   :after  (fn debug-after\n             [context]\n             (let [event   (get-coeffect context :event)\n                   orig-db (get-coeffect context :db)\n                   new-db  (get-effect   context :db ::not-found)]\n               (if (= new-db ::not-found)\n                 (console :log \"No app-db changes in:\" event)\n                 (let [[only-before only-after] (data/diff orig-db new-db)\n                       db-changed?    (or (some? only-before) (some? only-after))]\n                   (if db-changed?\n                     (do (console :group \"db clojure.data/diff for:\" event)\n                         (console :log \"only before:\" only-before)\n                         (console :log \"only after :\" only-after)\n                         (console :groupEnd))\n                     (console :log \"No app-db changes resulted from:\" event))))\n               context))))\n\n(def unwrap\n  (->interceptor\n   :id      :unwrap\n   :before  (fn unwrap-before\n              [context]\n              (let [[_ payload :as event] (get-coeffect context :event)]\n                (if-not (and (= 2 (count event))\n                             (map? payload))\n                  (throw (ex-info\n                          \"re-frame: \\\"unwrap\\\" interceptor must be a vector of two elements \\\"[event-id payload-map]\\\"\"\n                          event))\n                  (assoc-coeffect context :event payload))))\n   :after   (fn unwrap-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n(def trim-v\n  (->interceptor\n   :id      :trim-v\n   :before  (fn trim-v-before\n              [context]\n              (if-not (vector? (get-coeffect context :event))\n                (do\n                  (console :warn \"re-frame: \\\"trim-v\\\" interceptor expected event to be a vector. Got a \" (type (get-coeffect context :event)))\n                  context)\n                (update-coeffect context :event subvec 1)))\n   :after   (fn trim-v-after\n              [context]\n              (assoc-coeffect context :event (get-coeffect context :original-event)))))\n\n;; -- Interceptor Factories - PART 1 ---------------------------------------------------------------\n;;\n;; These 3 factories wrap the 3 kinds of event handlers.\n;;\n\n(defn db-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :db-handler\n   :before (fn db-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [db event]} (get-coeffect context)]\n                       (->> (handler-fn db event)\n                            (assoc-effect context :db))))]\n                ;; We merge these tags outside of the :event/handler trace because we want them to be assigned to the parent\n                ;; wrapping trace.\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn fx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`\"\n  [handler-fn]\n  (->interceptor\n   :id     :fx-handler\n   :before (fn fx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (let [{:keys [event] :as coeffects} (get-coeffect context)]\n                       (->> (handler-fn coeffects event)\n                            (assoc context :effects))))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n(defn ctx-handler->interceptor\n  \"Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))\"\n  [handler-fn]\n  (->interceptor\n   :id     :ctx-handler\n   :before (fn ctx-handler-before\n             [context]\n             (let [new-context\n                   (trace/with-trace\n                     {:op-type   :event/handler\n                      :operation (get-coeffect context :original-event)}\n                     (handler-fn context))]\n               (trace/merge-trace!\n                {:tags {:effects   (get-effect new-context)\n                        :coeffects (get-coeffect context)}})\n               new-context))))\n\n;; -- Interceptors Factories -  PART 2 ------------------------------------------------------------\n\n(defn path\n  [& args]\n  (let [path (flatten args)\n        history-key :re-frame.db/path-history]    ;; this is where, within `context`, we store the original dbs\n    (when (empty? path)\n      (console :error \"re-frame: \\\"path\\\" interceptor given no params\"))\n    (->interceptor\n     :id      :path\n     :comment {:re-frame.db/path path}\n     :before  (fn\n                [context]\n                (let [original-db (get-coeffect context :db)]\n                  (-> context\n                      (update history-key conj original-db)\n                      (assoc-coeffect :db (get-in original-db path)))))\n     :after   (fn [context]\n                (let [db-store     (history-key context)\n                      original-db  (peek db-store)\n                      new-db-store (pop db-store)\n                      context'     (-> (assoc context history-key new-db-store)\n                                       (assoc-coeffect :db original-db))     ;; put the original db back so that things like debug work later on\n                      db           (get-effect context :db ::not-found)]\n                  (if (= db ::not-found)\n                    context'\n                    (->> (assoc-in original-db path db)\n                         (assoc-effect context' :db))))))))\n\n(defn enrich\n  [f]\n  (->interceptor\n   :id :enrich\n   :after (fn enrich-after\n            [context]\n            (let [event   (get-coeffect context :event)\n                  prev-db (if (contains? (get-effect context) :db)\n                            (get-effect context :db) ;; If no db effect is returned, we provide the original coeffect.\n                            (get-coeffect context :db))\n                  new-db  (f prev-db event)]\n              (assoc-effect context :db (or new-db prev-db)))))) ;; If the enriched db is nil, use the last known good db\n\n(defn after\n  [f]\n  (->interceptor\n   :id :after\n   :after (fn after-after\n            [context]\n            (let [db    (if (contains? (get-effect context) :db)\n                          (get-effect context :db)\n                          (get-coeffect context :db))\n                  event (get-coeffect context :event)]\n              (f db event) ;; call f for side effects\n              context)))) ;; context is unchanged\n\n(defn  on-changes\n  [f out-path & in-paths]\n  (->interceptor\n   :id    :on-changes\n   :after (fn on-change-after\n            [context]\n            (let [new-db   (get-effect context :db)\n                  old-db   (get-coeffect context :db)\n\n                   ;; work out if any \"inputs\" have changed\n                  new-ins      (map #(get-in new-db %) in-paths)\n                  old-ins      (map #(get-in old-db %) in-paths)\n                   ;; make sure the db is actually set in the effect\n                  changed-ins? (and (contains? (get-effect context) :db)\n                                    (some false? (map identical? new-ins old-ins)))]\n\n               ;; if one of the inputs has changed, then run 'f'\n              (if changed-ins?\n                (->> (apply f new-ins)\n                     (assoc-in new-db out-path)\n                     (assoc-effect context :db))\n                context)))))\n\n(def inject-global-interceptors\n  \"An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.\"\n  (->interceptor\n   :id     :inject-global-interceptors\n   :before (fn inject-global-interceptors-before\n             [context]\n             (update context :queue #(into (settings/get-global-interceptors) %)))))\n","~:reader-features",["^K",["~:cljs"]],"~:used-var-namespaces",["^K",["~$re-frame.interop","^U","^X","^Y","^Z","^M","^14","^W"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.std-interceptors/debug","re_frame.interceptor.__GT_interceptor","context","re_frame.loggers.console","re_frame.interceptor.get_coeffect","event","orig-db","new-db","re_frame.interceptor.get_effect","cljs.core._EQ_","vec__21165","cljs.core.nth","only-before","only-after","clojure.data/diff","db-changed?","re-frame.loggers/console","re-frame.std-interceptors/unwrap","vec__21168","_","payload","cljs.core/count","cljs.core/map?","cljs.core.ex_info","re-frame.interceptor/assoc-coeffect","re-frame.std-interceptors/trim-v","cljs.core/vector?","cljs.core/type","re_frame.interceptor.update_coeffect","cljs.core/subvec","re-frame.std-interceptors/db-handler->interceptor","handler-fn","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__21171","re-frame.trace/*current-trace*","*current-trace*-temp-val__21172","re-frame.trace/start-trace","end__20661__auto__","re-frame.interop/now","duration__20662__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","map__21173","cljs.core/--destructure-map","cljs.core.get","map__21174","db","re-frame.interceptor/assoc-effect","new-trace__20663__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.std-interceptors/fx-handler->interceptor","*current-trace*-orig-val__21175","*current-trace*-temp-val__21176","map__21177","map__21178","coeffects","re-frame.std-interceptors/ctx-handler->interceptor","*current-trace*-orig-val__21179","*current-trace*-temp-val__21180","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.std-interceptors/path","seq21181","self__5712__auto__","cljs.core/seq","args","path","cljs.core/flatten","history-key","cljs.core/empty?","original-db","cljs.core.get_in","db-store","cljs.core/peek","new-db-store","cljs.core/pop","context'","cljs.core/assoc-in","re-frame.std-interceptors/enrich","f","prev-db","cljs.core/contains?","or__5002__auto__","re-frame.std-interceptors/after","re-frame.std-interceptors/on-changes","seq21184","G__21185","cljs.core/first","cljs.core/next","G__21186","self__5711__auto__","out-path","in-paths","old-db","new-ins","p1__21182#","cljs.core.map","old-ins","p1__21183#","changed-ins?","and__5000__auto__","cljs.core/some","cljs.core/false?","cljs.core/identical?","cljs.core.apply","re-frame.std-interceptors/inject-global-interceptors","p1__21187#","cljs.core.into","re-frame.settings/get-global-interceptors"]],"~:used-vars",["^K",["~$cljs.core/--destructure-map","~$re-frame.interceptor/get-effect","~$cljs.core/vector?","~$cljs.core/=","~$re-frame.trace/traces","~$re-frame.std-interceptors/debug","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/count","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.trace/start-trace","~$re-frame.loggers/console","~$re-frame.std-interceptors/inject-global-interceptors","~$cljs.core/dissoc","~$re-frame.std-interceptors/trim-v","~$re-frame.interop/now","~$cljs.core/pop","~$cljs.core/empty?","~$cljs.core/contains?","~$re-frame.std-interceptors/db-handler->interceptor","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/identical?","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$cljs.core/get-in","~$cljs.core/swap!","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.std-interceptors/enrich","~$clojure.data/diff","~$re-frame.std-interceptors/ctx-handler->interceptor","~$cljs.core/flatten","~$re-frame.interceptor/assoc-coeffect","~$re-frame.std-interceptors/fx-handler->interceptor","~$cljs.core/subvec","~$cljs.core/nth","~$cljs.core/ex-info","~$cljs.core/false?","~$re-frame.trace/*current-trace*","~$re-frame.std-interceptors/after","~$re-frame.settings/get-global-interceptors","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$cljs.core/assoc","~$cljs.core/assoc-in","~$re-frame.std-interceptors/path","~$cljs.core/first","~$re-frame.trace/run-tracing-callbacks!","~$cljs.core/merge","~$re-frame.std-interceptors/unwrap","~$re-frame.std-interceptors/on-changes","~$cljs.core/type","~$cljs.core/some"]]],"~:cache-keys",["~#cmap",[["^1M","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^K",[]],"~:deps-syms",["^10","^Z","~$reagent.debug","~$reagent.impl.util"]]],["^1M","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.dom.HtmlElement"]]],["^1M","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1M","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.asserts"]]],["^1M","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1M","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3I","^3J","^3M","^3H","^3K","^3L"]]],["^1M","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3H"]]],["^1M","re_frame/loggers.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","~$clojure.set"]]],["^1M","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M"]]],["^1M","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","~$clojure.string","~$clojure.walk","~$goog.object","^3E"]]],["^1M","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3I","~$goog.reflect","^3H"]]],["^1M","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1M","re_frame/registrar.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^1U","^14","^Y"]]],["^1M","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3I","^3H"]]],["^1M","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^3F","^3E","~$reagent.impl.batching","^3T","^3W"]]],["^1M","re_frame/interop.cljs"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1M","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1M","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1M","shadow/js.js"],["56681e253acd83be730dce6df8d306c985c4c5da","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^F","^3U","^3F","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^49","^3E","^3W"]]],["^1M","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M"]]],"~:SHADOW-TIMESTAMP",[1712152237000,1712152237000,1707229049000],["^4=","node_modules/react/cjs/react.development.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","754b7a48941975257c8955f6d5e511cb3a878737","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^4>","~$module$node_modules$object_assign$index"]]],["^1M","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","^3["]]],["^1M","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.events.ListenableKey"]]],["^1M","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","~$goog.fs.blob","^3P","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3R","^3S"]]],["^1M","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.array","~$goog.events.Listener","^3W"]]],["^1M","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3R","~$goog.html.SafeUrl","^3S","^3M","^3H"]]],["^1M","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4H","~$goog.html.SafeStyle","^4L","^3Q","~$goog.html.uncheckedconversions","^3R","^3H"]]],["^1M","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.dom.TagName","^3M","~$goog.dom.element"]]],["^1M","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^3W","^F","^3F","^45","^4C","^49","^3E"]]],["^1M","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z"]]],["^1M","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3R","^4H","^4Q","~$goog.html.SafeStyleSheet","^4L","^4S","^3Q","^3S","^3M","^3X","^4J","^3W","^3H","~$goog.dom.tags","^4I"]]],["^1M","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3W"]]],["^1M","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4J","^3H","^3I"]]],["^1M","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","re_frame/settings.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^1U","^14"]]],["^1M","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4J","^3M","^4M","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4S","~$goog.dom.safe","^4P","^4R","~$goog.math.Coordinate","~$goog.math.Size","^3W","~$goog.string","^3R","~$goog.string.Unicode","^3O"]]],["^1M","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.debug.Error","^4X"]]],["^1M","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z"]]],["^1M","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4J","^3M","~$goog.collections.maps","^50","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1M","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3J"]]],["^1M","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^4=","node_modules/object-assign/index.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","519ffd5a4c91b67302cc9947b794966d629860cd","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^4>"]]],["^1M","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^42","^3O"]]],["^1M","re_frame/db.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^1U"]]],["^1M","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",[]]],["^1M","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4J","^3W"]]],["^1M","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^50","~$goog.string.StringBuffer"]]],["^1M","re_frame/cofx.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^16","^U","~$re-frame.registrar","^14"]]],["^4=","node_modules/react/cjs/react.production.min.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","0a81b45abe33f0ad39b726512604018f94261db9","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^4>","^4E"]]],["^1M","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M"]]],["^1M","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4Y","^4R","^3R","^3H"]]],["^1M","re_frame/interceptor.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^14","^1U","^X","^59","^12","^3T"]]],["^1M","clojure/data.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^3T"]]],["^1M","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3H","^3L"]]],["^1M","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^F","~$reagent.impl.template","^4A","^3F","^45","^4C","^49","^3E"]]],["^1M","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4J","~$goog.debug.errorcontext"]]],["^1M","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.math"]]],["^1M","re_frame/std_interceptors.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]]],["^1M","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.flags"]]],["^1M","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^40","~$goog.dom","^4S","^4O","^3X","^3Y"]]],["^1M","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4X","^4S"]]],["^1M","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","^4P","^4H","^4Q","^4U","^4L","^3Q","^3R","^3H"]]],["^1M","re_frame/utils.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^14","^1U"]]],["^1M","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^4A","^45","^4C"]]],["^1M","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.Disposable","~$goog.events.EventId"]]],["^1M","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.math.Long","~$goog.math.Integer","^50","^3W","^4J","~$goog.Uri","^58"]]],["^1M","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3R","^3S","^4I","^3M"]]],["^1M","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z"]]],["^1M","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3R","^4Q","^3S","^3W","^3M","^3H"]]],["^1M","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3[","^3O"]]],["^1M","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3["]]],["^1M","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3O"]]],["^1M","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z"]]],["^1M","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","^50"]]],["^1M","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^3M","^3S"]]],["^1M","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^4;"]]],["^1M","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10"]]],["^1M","re_frame/trace.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^3A",["^ ","^3B",null,"^3C",["^K",[]],"^3D",["^10","^Z","^1U","^14","^4O"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/re-frame/re-frame/1.4.2/re-frame-1.4.2.jar!/re_frame/interop.clj",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/re-frame/re-frame/1.4.2/re-frame-1.4.2.jar!/re_frame/trace.cljc",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1711469606000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","contains re-frame supplied, standard interceptors","^7","re_frame/std_interceptors.cljc","^8",1,"^9",5,"^:",1,"^;",30],"^<",["^ ","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G","^H"],"^I",null,"^J",["^K",[]],"^L","^M","^N",["^ "],"^Q",null,"^R",["^ ","^S","^T","^U","^U","^V","^W","^X","^X","^Y","^Y","^Z","^Z","^[","^U","^10","^10","^11","^X","^12","^12","^13","^Y","^14","^14","^15","^12","^T","^T","^W","^W","^16","^16"],"^17",["^K",["^18"]],"^19",["^ ","^1:","^U","^1;","^U","^1<","^U","^1=","^U","^1>","^U","^1?","^U","^1@","^14","^1A","^16"],"~:defs",["^ ","~$unwrap",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",38,"^9",6,"^:",38,"^;",12],"^L","^3;","^7","re_frame/std_interceptors.cljc","^;",12,"^9",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^1D",["~$def","^6B",["^1D",["^1:","~:id","~:unwrap","~:before",["^1D",["~$fn","~$unwrap-before",["~$context"],["^1D",["~$let",[["~$_","~$payload","^1G","~$event"],["^1D",["^1<","^6M","~:event"]]],["^1D",["~$if-not",["^1D",["~$and",["^1D",["~$=",2,["^1D",["~$count","^6P"]]]],["^1D",["~$map?","^6O"]]]],["^1D",["~$throw",["^1D",["~$ex-info","re-frame: \"unwrap\" interceptor must be a vector of two elements \"[event-id payload-map]\"","^6P"]]]],["^1D",["^1=","^6M","^6Q","^6O"]]]]]]]],"~:after",["^1D",["^6K","~$unwrap-after",["^6M"],["^1D",["^1=","^6M","^6Q",["^1D",["^1<","^6M","~:original-event"]]]]]]]]]]],"^8",38,"^:",38,"~:tag",["^K",["~$clj","~$any","~$cljs.core/IMap"]]],"~$on-changes",["^ ","~:protocol-inline",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",211,"^9",8,"^:",211,"^;",18,"~:arglists",["^1D",["~$quote",["^1D",[["~$f","~$out-path","~$&","~$in-paths"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^1D",["~$f","^77","^78"]]],"^75",["^1D",[["~$f","^77","~$&","^78"]]],"~:arglists-meta",["^1D",[null]]]],"^L","^3<","^7","re_frame/std_interceptors.cljc","^;",18,"^79",["^ ","^7:",true,"^7;",2,"^7<",2,"^7=",[["^1D",["~$f","^77","^78"]]],"^75",["^1D",[["~$f","^77","~$&","^78"]]],"^7>",["^1D",[null]]],"^7=",[["^1D",["~$f","^77","^78"]]],"~:protocol-impl",null,"^7;",2,"^7>",["^1D",[null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["~$defn","^73",["~$f","^77","~$&","^78"],["^1D",["^1:","^6H","~:on-changes","^6X",["^1D",["^6K","~$on-change-after",["^6M"],["^1D",["^6N",["~$new-db",["^1D",["^1;","^6M","~:db"]],"~$old-db",["^1D",["^1<","^6M","^7D"]],"~$new-ins",["^1D",["~$map",["^1D",["~$fn*",["~$p1__21182#"],["^1D",["~$get-in","^7C","^7I"]]]],"^78"]],"~$old-ins",["^1D",["^7G",["^1D",["^7H",["~$p1__21183#"],["^1D",["^7J","^7E","^7L"]]]],"^78"]],"~$changed-ins?",["^1D",["^6S",["^1D",["~$contains?",["^1D",["^1;","^6M"]],"^7D"]],["^1D",["~$some","~$false?",["^1D",["^7G","~$identical?","^7F","^7K"]]]]]]],["^1D",["~$if","^7M",["^1D",["~$->>",["^1D",["~$apply","~$f","^7F"]],["^1D",["~$assoc-in","^7C","^77"]],["^1D",["^1>","^6M","^7D"]]]],"^6M"]]]]]]]]]]],"^7:",true,"~:methods",[["^ ","^7;",2,"^7:",true,"^6[",["^K",["^70","^71","^72"]]]],"^8",211,"~:ret-tag","^71","^:",211,"^7<",2,"~:fn-var",true,"^75",["^1D",[["~$f","^77","~$&","^78"]]]],"~$enrich",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",185,"^9",7,"^:",185,"^;",13,"^75",["^1D",["^76",["^1D",[["~$f"]]]]]],"^L","^2P","^7","re_frame/std_interceptors.cljc","^;",13,"^7=",["^1D",[["~$f"]]],"^7?",null,"^7>",["^1D",[null,null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^7Y",["~$f"],["^1D",["^1:","^6H","~:enrich","^6X",["^1D",["^6K","~$enrich-after",["^6M"],["^1D",["^6N",["^6P",["^1D",["^1<","^6M","^6Q"]],"~$prev-db",["^1D",["^7R",["^1D",["^7N",["^1D",["^1;","^6M"]],"^7D"]],["^1D",["^1;","^6M","^7D"]],["^1D",["^1<","^6M","^7D"]]]],"^7C",["^1D",["~$f","^80","^6P"]]],["^1D",["^1>","^6M","^7D",["^1D",["~$or","^7C","^80"]]]]]]]]]]]]],"^7:",false,"^8",185,"^7W",["^K",["^70","^71","^72"]],"^:",185,"^7<",1,"^7X",true,"^75",["^1D",["^76",["^1D",[["~$f"]]]]]],"~$path",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",158,"^9",7,"^:",158,"^;",11,"^75",["^1D",["^76",["^1D",[["~$&","~$args"]]]]],"^79",["^ ","^7:",true,"^7;",0,"^7<",0,"^7=",[["^1D",["^83"]]],"^75",["^1D",[["~$&","^83"]]],"^7>",["^1D",[null]]]],"^L","^37","^7","re_frame/std_interceptors.cljc","^;",11,"^79",["^ ","^7:",true,"^7;",0,"^7<",0,"^7=",[["^1D",["^83"]]],"^75",["^1D",[["~$&","^83"]]],"^7>",["^1D",[null]]],"^7=",[["^1D",["^83"]]],"^7?",null,"^7;",0,"^7>",["^1D",[null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^82",["~$&","^83"],["^1D",["^6N",["^82",["^1D",["~$flatten","^83"]],"~$history-key","~:re-frame.db/path-history"],["^1D",["~$when",["^1D",["~$empty?","^82"]],["^1D",["^1@","~:error","re-frame: \"path\" interceptor given no params"]]]],["^1D",["^1:","^6H","~:path","~:comment",["^ ","~:re-frame.db/path","^82"],"^6J",["^1D",["^6K",["^6M"],["^1D",["^6N",["~$original-db",["^1D",["^1<","^6M","^7D"]]],["^1D",["~$->","^6M",["^1D",["~$update","^85","~$conj","^8="]],["^1D",["^1=","^7D",["^1D",["^7J","^8=","^82"]]]]]]]]]],"^6X",["^1D",["^6K",["^6M"],["^1D",["^6N",["~$db-store",["^1D",["^85","^6M"]],"^8=",["^1D",["~$peek","^8A"]],"~$new-db-store",["^1D",["~$pop","^8A"]],"~$context'",["^1D",["^8>",["^1D",["~$assoc","^6M","^85","^8C"]],["^1D",["^1=","^7D","^8="]]]],"~$db",["^1D",["^1;","^6M","^7D","~:re-frame.std-interceptors/not-found"]]],["^1D",["^7R",["^1D",["~$=","^8G","^8H"]],"^8E",["^1D",["^7S",["^1D",["^7U","^8=","^82","^8G"]],["^1D",["^1>","^8E","^7D"]]]]]]]]]]]]]]]]],"^7:",true,"^7V",[["^ ","^7;",0,"^7:",true,"^6[",["^K",["^70","^71","^72"]]]],"^8",158,"^7W","^71","^:",158,"^7<",0,"^7X",true,"^75",["^1D",[["~$&","^83"]]]],"~$ctx-handler->interceptor",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",134,"^9",7,"^:",134,"^;",31,"^75",["^1D",["^76",["^1D",[["~$handler-fn"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"^L","^2R","^7","re_frame/std_interceptors.cljc","^;",31,"^7=",["^1D",[["^8J"]]],"^7?",null,"^7>",["^1D",[null,null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^8I","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))",["^8J"],["^1D",["^1:","^6H","~:ctx-handler","^6J",["^1D",["^6K","~$ctx-handler-before",["^6M"],["^1D",["^6N",["~$new-context",["^1D",["~$trace/with-trace",["^ ","~:op-type","~:event/handler","~:operation",["^1D",["^1<","^6M","^6Z"]]],["^1D",["^8J","^6M"]]]]],["^1D",["~$trace/merge-trace!",["^ ","~:tags",["^ ","~:effects",["^1D",["^1;","^8M"]],"~:coeffects",["^1D",["^1<","^6M"]]]]]],"^8M"]]]]]]]]],"^7:",false,"^8",134,"^7W",["^K",["^70","^71","^72"]],"^:",134,"^7<",1,"^7X",true,"^75",["^1D",["^76",["^1D",[["^8J"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-ctx`.\n  These advanced handlers take one argument: `context` and they return a modified `context`.\n  Example:\n\n      (fn [context]\n         (enqueue context [more interceptors]))"],"~$debug",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",14,"^9",6,"^:",14,"^;",11],"^L","^24","^7","re_frame/std_interceptors.cljc","^;",11,"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^6G","^8V",["^1D",["^1:","^6H","~:debug","^6J",["^1D",["^6K","~$debug-before",["^6M"],["^1D",["^1@","~:log","Handling re-frame event:",["^1D",["^1<","^6M","^6Q"]]]],"^6M"]],"^6X",["^1D",["^6K","~$debug-after",["^6M"],["^1D",["^6N",["^6P",["^1D",["^1<","^6M","^6Q"]],"~$orig-db",["^1D",["^1<","^6M","^7D"]],"^7C",["^1D",["^1;","^6M","^7D","^8H"]]],["^1D",["^7R",["^1D",["~$=","^7C","^8H"]],["^1D",["^1@","^8Y","No app-db changes in:","^6P"]],["^1D",["^6N",[["~$only-before","~$only-after"],["^1D",["~$data/diff","^8[","^7C"]],"~$db-changed?",["^1D",["^81",["^1D",["~$some?","^90"]],["^1D",["^94","^91"]]]]],["^1D",["^7R","^93",["^1D",["~$do",["^1D",["^1@","~:group","db clojure.data/diff for:","^6P"]],["^1D",["^1@","^8Y","only before:","^90"]],["^1D",["^1@","^8Y","only after :","^91"]],["^1D",["^1@","~:groupEnd"]]]],["^1D",["^1@","^8Y","No app-db changes resulted from:","^6P"]]]]]]]],"^6M"]]]]]]]]],"^8",14,"^:",14,"^6[",["^K",["^70","^71","^72"]]],"~$trim-v",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",54,"^9",6,"^:",54,"^;",12],"^L","^2>","^7","re_frame/std_interceptors.cljc","^;",12,"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^6G","^98",["^1D",["^1:","^6H","~:trim-v","^6J",["^1D",["^6K","~$trim-v-before",["^6M"],["^1D",["^6R",["^1D",["~$vector?",["^1D",["^1<","^6M","^6Q"]]]],["^1D",["^95",["^1D",["^1@","~:warn","re-frame: \"trim-v\" interceptor expected event to be a vector. Got a ",["^1D",["~$type",["^1D",["^1<","^6M","^6Q"]]]]]],"^6M"]],["^1D",["^1?","^6M","^6Q","~$subvec",1]]]]]],"^6X",["^1D",["^6K","~$trim-v-after",["^6M"],["^1D",["^1=","^6M","^6Q",["^1D",["^1<","^6M","^6Z"]]]]]]]]]]],"^8",54,"^:",54,"^6[",["^K",["^70","^71","^72"]]],"~$after",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",198,"^9",7,"^:",198,"^;",12,"^75",["^1D",["^76",["^1D",[["~$f"]]]]]],"^L","^2[","^7","re_frame/std_interceptors.cljc","^;",12,"^7=",["^1D",[["~$f"]]],"^7?",null,"^7>",["^1D",[null,null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^9@",["~$f"],["^1D",["^1:","^6H","^6X","^6X",["^1D",["^6K","~$after-after",["^6M"],["^1D",["^6N",["^8G",["^1D",["^7R",["^1D",["^7N",["^1D",["^1;","^6M"]],"^7D"]],["^1D",["^1;","^6M","^7D"]],["^1D",["^1<","^6M","^7D"]]]],"^6P",["^1D",["^1<","^6M","^6Q"]]],["^1D",["~$f","^8G","^6P"]],"^6M"]]]]]]]]],"^7:",false,"^8",198,"^7W",["^K",["^70","^71","^72"]],"^:",198,"^7<",1,"^7X",true,"^75",["^1D",["^76",["^1D",[["~$f"]]]]]],"~$fx-handler->interceptor",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",104,"^9",7,"^:",104,"^;",30,"^75",["^1D",["^76",["^1D",[["^8J"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"^L","^2U","^7","re_frame/std_interceptors.cljc","^;",30,"^7=",["^1D",[["^8J"]]],"^7?",null,"^7>",["^1D",[null,null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^9B","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`",["^8J"],["^1D",["^1:","^6H","~:fx-handler","^6J",["^1D",["^6K","~$fx-handler-before",["^6M"],["^1D",["^6N",["^8M",["^1D",["^8N",["^ ","^8O","^8P","^8Q",["^1D",["^1<","^6M","^6Z"]]],["^1D",["^6N",[["^ ","~:keys",["^6P"],"^1G","~$coeffects"],["^1D",["^1<","^6M"]]],["^1D",["^7S",["^1D",["^8J","^9F","^6P"]],["^1D",["^8F","^6M","^8T"]]]]]]]]],["^1D",["^8R",["^ ","^8S",["^ ","^8T",["^1D",["^1;","^8M"]],"^8U",["^1D",["^1<","^6M"]]]]]],"^8M"]]]]]]]]],"^7:",false,"^8",104,"^7W",["^K",["^70","^71","^72"]],"^:",104,"^7<",1,"^7X",true,"^75",["^1D",["^76",["^1D",[["^8J"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-fx`.\n\n  These handlers take two arguments;  `coeffects` and `event`, and they return `effects`.\n\n      (fn [coeffects event]\n         {:db ...\n          :fx ...})\n\n   Wrap handler in an interceptor so it can be added to (the RHS) of a chain:\n     1. extracts `:coeffects`\n     2. call handler-fn giving coeffects\n     3. stores the result back into the `:effects`"],"~$db-handler->interceptor",["^ ","^74",null,"^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",73,"^9",7,"^:",73,"^;",30,"^75",["^1D",["^76",["^1D",[["^8J"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"^L","^2C","^7","re_frame/std_interceptors.cljc","^;",30,"^7=",["^1D",[["^8J"]]],"^7?",null,"^7>",["^1D",[null,null]],"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^7@","^9G","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`",["^8J"],["^1D",["^1:","^6H","~:db-handler","^6J",["^1D",["^6K","~$db-handler-before",["^6M"],["^1D",["^6N",["^8M",["^1D",["^8N",["^ ","^8O","^8P","^8Q",["^1D",["^1<","^6M","^6Z"]]],["^1D",["^6N",[["^ ","^9E",["^8G","^6P"]],["^1D",["^1<","^6M"]]],["^1D",["^7S",["^1D",["^8J","^8G","^6P"]],["^1D",["^1>","^6M","^7D"]]]]]]]]],["^1D",["^8R",["^ ","^8S",["^ ","^8T",["^1D",["^1;","^8M"]],"^8U",["^1D",["^1<","^6M"]]]]]],"^8M"]]]]]]]]],"^7:",false,"^8",73,"^7W",["^K",["^70","^71","^72"]],"^:",73,"^7<",1,"^7X",true,"^75",["^1D",["^76",["^1D",[["^8J"]]]]],"^6","Returns an interceptor which wraps the kind of event handler given to `reg-event-db`.\n\n  These handlers take two arguments;  `db` and `event`, and they return `db`.\n\n      (fn [db event]\n         ....)\n\n  So, the interceptor wraps the given handler:\n     1. extracts two `:coeffects` keys: db and event\n     2. calls handler-fn\n     3. stores the db result back into context's `:effects`"],"~$inject-global-interceptors",["^ ","^5",["^ ","^7","re_frame/std_interceptors.cljc","^8",234,"^9",6,"^:",234,"^;",32],"^L","^2<","^7","re_frame/std_interceptors.cljc","^;",32,"^9",1,"^6C",["^ ","^6D","^6E","^6F",["^1D",["^6G","^9J","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector.",["^1D",["^1:","^6H","~:inject-global-interceptors","^6J",["^1D",["^6K","~$inject-global-interceptors-before",["^6M"],["^1D",["^8?","^6M","~:queue",["^1D",["^7H",["~$p1__21187#"],["^1D",["~$into",["^1D",["~$settings/get-global-interceptors"]],"^9N"]]]]]]]]]]]]],"^8",234,"^:",234,"^6[",["^K",["^70","^71","^72"]],"^6","An interceptor which adds registered global interceptors to the context's queue.\n\n   NOTE: :queue is a Clojure.lang.PersistentQueue and not a vector."]],"^1B",["^ ","^X","^X","^11","^X","^Z","^Z"],"~:cljs.analyzer/constants",["^ ","^17",["^K",["^8:","^86","^8S","^6Z","^96","^7D","^9C","^8H","^9M","^9<","^8Q","~:start","~:duration","^8W","^99","^8P","^9H","^6Q","^6X","^6H","^8T","^8<","^8;","^9K","^89","^8U","~:end","^6I","^7A","^97","^8K","^7Z","^6J","^8O","^8Y"]],"~:order",["^6H","^8W","^6J","^8Y","^6Q","^6X","^7D","^8H","^96","^97","^6I","^6Z","^99","^9<","^9H","^8O","^8Q","^8P","^9R","^9S","^9T","^8S","^8T","^8U","^9C","^8K","^86","^89","^8:","^8;","^8<","^7Z","^7A","^9K","^9M"]],"^1I",["^ ","^18",["^K",[]]],"^1J",["^ "],"^1K",["^10","^Z","^U","^14","^Y","^16","^W","^T","^12","^X"]],"^P","^M","~:ns-specs",["^ "],"~:ns-spec-vars",["^K",[]],"~:compiler-options",["^3@",[["^9X","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^9X","~:shadow-tweaks"],null,["^9X","~:source-map-inline"],null,["^9X","~:shadow-optimize-constants"],null,["^9X","~:elide-asserts"],false,["^9X","~:optimize-constants"],null,["^9X","^1P"],null,["^9X","~:external-config"],null,["^9X","~:tooling-config"],null,["^9X","~:emit-constants"],null,["^9X","~:load-tests"],null,["^9X","~:form-size-threshold"],null,["^9X","~:global-goog-object&array"],null,["^9X","~:data-readers"],null,["^9X","~:infer-externs"],"~:auto",["^9X","^1R"],null,["^9Z","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9X","~:fn-invoke-direct"],null,["^9X","~:source-map"],"/dev/null"]]]