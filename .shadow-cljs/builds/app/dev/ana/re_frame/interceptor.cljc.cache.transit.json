["^ ","~:output",["^ ","~:js","goog.provide('re_frame.interceptor');\r\nre_frame.interceptor.mandatory_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"after\",\"after\",594996914),null,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),null,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),null], null), null);\r\nre_frame.interceptor.optional_interceptor_keys = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),null], null), null);\r\nre_frame.interceptor.interceptor_QMARK_ = (function re_frame$interceptor$interceptor_QMARK_(m){\r\nreturn ((cljs.core.map_QMARK_(m)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(re_frame.interceptor.mandatory_interceptor_keys,clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.optional_interceptor_keys))));\r\n});\r\nre_frame.interceptor.__GT_interceptor = (function re_frame$interceptor$__GT_interceptor(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___20773 = arguments.length;\r\nvar i__5727__auto___20774 = (0);\r\nwhile(true){\r\nif((i__5727__auto___20774 < len__5726__auto___20773)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___20774]));\r\n\r\nvar G__20775 = (i__5727__auto___20774 + (1));\r\ni__5727__auto___20774 = G__20775;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((0) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((0)),(0),null)):null);\r\nreturn re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic(argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$core$IFn$_invoke$arity$variadic = (function (p__20746){\r\nvar map__20747 = p__20746;\r\nvar map__20747__$1 = cljs.core.__destructure_map(map__20747);\r\nvar m = map__20747__$1;\r\nvar id = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20747__$1,new cljs.core.Keyword(null,\"id\",\"id\",-1388402092));\r\nvar comment = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20747__$1,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069));\r\nvar before = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20747__$1,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388));\r\nvar after = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20747__$1,new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\nif(re_frame.interop.debug_enabled_QMARK_){\r\nvar temp__5802__auto___20776 = cljs.core.seq(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic(cljs.core.set(cljs.core.keys(m)),re_frame.interceptor.mandatory_interceptor_keys,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([re_frame.interceptor.optional_interceptor_keys], 0)));\r\nif(temp__5802__auto___20776){\r\nvar unknown_keys_20777 = temp__5802__auto___20776;\r\nre_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: ->interceptor\",m,\"has unknown keys:\",unknown_keys_20777], 0));\r\n} else {\r\n}\r\n} else {\r\n}\r\n\r\nvar G__20748 = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),(function (){var or__5002__auto__ = id;\r\nif(cljs.core.truth_(or__5002__auto__)){\r\nreturn or__5002__auto__;\r\n} else {\r\nreturn new cljs.core.Keyword(null,\"unnamed\",\"unnamed\",-26044928);\r\n}\r\n})(),new cljs.core.Keyword(null,\"before\",\"before\",-1633692388),before,new cljs.core.Keyword(null,\"after\",\"after\",594996914),after], null);\r\nif(cljs.core.truth_(comment)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(G__20748,new cljs.core.Keyword(null,\"comment\",\"comment\",532206069),comment);\r\n} else {\r\nreturn G__20748;\r\n}\r\n}));\r\n\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$maxFixedArity = (0));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.__GT_interceptor.cljs$lang$applyTo = (function (seq20745){\r\nvar self__5712__auto__ = this;\r\nreturn self__5712__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq20745));\r\n}));\r\n\r\nre_frame.interceptor.get_effect = (function re_frame$interceptor$get_effect(var_args){\r\nvar G__20750 = arguments.length;\r\nswitch (G__20750) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_effect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_effect = (function re_frame$interceptor$assoc_effect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),value);\r\n});\r\nre_frame.interceptor.update_effect = (function re_frame$interceptor$update_effect(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___20779 = arguments.length;\r\nvar i__5727__auto___20780 = (0);\r\nwhile(true){\r\nif((i__5727__auto___20780 < len__5726__auto___20779)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___20780]));\r\n\r\nvar G__20781 = (i__5727__auto___20780 + (1));\r\ni__5727__auto___20780 = G__20781;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_effect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"effects\",\"effects\",-282369292),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_effect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_effect.cljs$lang$applyTo = (function (seq20751){\r\nvar G__20752 = cljs.core.first(seq20751);\r\nvar seq20751__$1 = cljs.core.next(seq20751);\r\nvar G__20753 = cljs.core.first(seq20751__$1);\r\nvar seq20751__$2 = cljs.core.next(seq20751__$1);\r\nvar G__20754 = cljs.core.first(seq20751__$2);\r\nvar seq20751__$3 = cljs.core.next(seq20751__$2);\r\nvar self__5711__auto__ = this;\r\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__20752,G__20753,G__20754,seq20751__$3);\r\n}));\r\n\r\nre_frame.interceptor.get_coeffect = (function re_frame$interceptor$get_coeffect(var_args){\r\nvar G__20756 = arguments.length;\r\nswitch (G__20756) {\r\ncase 1:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$1 = (function (context){\r\nreturn new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985).cljs$core$IFn$_invoke$arity$1(context);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$2 = (function (context,key){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null));\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$core$IFn$_invoke$arity$3 = (function (context,key,not_found){\r\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),not_found);\r\n}));\r\n\r\n(re_frame.interceptor.get_coeffect.cljs$lang$maxFixedArity = 3);\r\n\r\nre_frame.interceptor.assoc_coeffect = (function re_frame$interceptor$assoc_coeffect(context,key,value){\r\nreturn cljs.core.assoc_in(context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),value);\r\n});\r\nre_frame.interceptor.update_coeffect = (function re_frame$interceptor$update_coeffect(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___20783 = arguments.length;\r\nvar i__5727__auto___20784 = (0);\r\nwhile(true){\r\nif((i__5727__auto___20784 < len__5726__auto___20783)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___20784]));\r\n\r\nvar G__20785 = (i__5727__auto___20784 + (1));\r\ni__5727__auto___20784 = G__20785;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((3) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((3)),(0),null)):null);\r\nreturn re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$core$IFn$_invoke$arity$variadic = (function (context,key,f,args){\r\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$5(cljs.core.update_in,context,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"coeffects\",\"coeffects\",497912985),key], null),f,args);\r\n}));\r\n\r\n(re_frame.interceptor.update_coeffect.cljs$lang$maxFixedArity = (3));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.update_coeffect.cljs$lang$applyTo = (function (seq20757){\r\nvar G__20758 = cljs.core.first(seq20757);\r\nvar seq20757__$1 = cljs.core.next(seq20757);\r\nvar G__20759 = cljs.core.first(seq20757__$1);\r\nvar seq20757__$2 = cljs.core.next(seq20757__$1);\r\nvar G__20760 = cljs.core.first(seq20757__$2);\r\nvar seq20757__$3 = cljs.core.next(seq20757__$2);\r\nvar self__5711__auto__ = this;\r\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__20758,G__20759,G__20760,seq20757__$3);\r\n}));\r\n\r\nre_frame.interceptor.exception__GT_ex_info = (function re_frame$interceptor$exception__GT_ex_info(e,interceptor,direction){\r\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3([\"Interceptor Exception: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.ex_message(e))].join(''),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395),direction,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076),new cljs.core.Keyword(null,\"id\",\"id\",-1388402092).cljs$core$IFn$_invoke$arity$1(interceptor)], null),e);\r\n});\r\nre_frame.interceptor.invoke_interceptor_fn = (function re_frame$interceptor$invoke_interceptor_fn(p__20761,interceptor,direction){\r\nvar map__20762 = p__20761;\r\nvar map__20762__$1 = cljs.core.__destructure_map(map__20762);\r\nvar context = map__20762__$1;\r\nvar original_exception_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20762__$1,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945));\r\nvar f = cljs.core.get.cljs$core$IFn$_invoke$arity$2(interceptor,direction);\r\nif(cljs.core.not(f)){\r\nreturn context;\r\n} else {\r\nif(cljs.core.truth_(original_exception_QMARK_)){\r\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null, context));\r\n} else {\r\ntry{return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(context) : f.call(null, context));\r\n}catch (e20763){var e = e20763;\r\nthrow re_frame.interceptor.exception__GT_ex_info(e,interceptor,direction);\r\n}\r\n}\r\n}\r\n});\r\n/**\r\n * Loop over all interceptors, calling `direction` function on each,\r\n *   threading the value of `context` through every call.\r\n * \r\n *   `direction` is one of `:before` or `:after`.\r\n * \r\n *   Each iteration, the next interceptor to process is obtained from\r\n *   context's `:queue`. After they are processed, interceptors are popped\r\n *   from `:queue` and added to `:stack`.\r\n * \r\n *   After sufficient iteration, `:queue` will be empty, and `:stack` will\r\n *   contain all interceptors processed.\r\n * \r\n *   Returns updated `context`. Ie. the `context` which has been threaded\r\n *   through all interceptor functions.\r\n * \r\n *   Generally speaking, an interceptor's `:before` function will (if present)\r\n *   add to a `context's` `:coeffects`, while its `:after` function\r\n *   will modify the `context`'s `:effects`.  Very approximately.\r\n * \r\n *   But because all interceptor functions are given `context`, and can\r\n *   return a modified version of it, the way is clear for an interceptor\r\n *   to introspect the stack or queue, or even modify the queue\r\n *   (add new interceptors via `enqueue`?). This is a very fluid arrangement.\r\n */\r\nre_frame.interceptor.invoke_interceptors = (function re_frame$interceptor$invoke_interceptors(context,direction){\r\nvar context__$1 = context;\r\nwhile(true){\r\nvar queue = new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nif(cljs.core.empty_QMARK_(queue)){\r\nreturn context__$1;\r\n} else {\r\nvar interceptor = cljs.core.peek(queue);\r\nvar stack = new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context__$1);\r\nvar G__20786 = re_frame.interceptor.invoke_interceptor_fn(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(context__$1,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.pop(queue),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,interceptor)], 0)),interceptor,direction);\r\ncontext__$1 = G__20786;\r\ncontinue;\r\n}\r\nbreak;\r\n}\r\n});\r\nre_frame.interceptor.enqueue = (function re_frame$interceptor$enqueue(context,interceptors){\r\nreturn cljs.core.update.cljs$core$IFn$_invoke$arity$4(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879),cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(cljs.core.into,re_frame.interop.empty_queue),interceptors);\r\n});\r\n/**\r\n * Create a fresh context\r\n */\r\nre_frame.interceptor.context = (function re_frame$interceptor$context(var_args){\r\nvar G__20765 = arguments.length;\r\nswitch (G__20765) {\r\ncase 2:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2 = (function (event,interceptors){\r\nreturn re_frame.interceptor.enqueue(re_frame.interceptor.assoc_coeffect(re_frame.interceptor.assoc_coeffect(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"event\",\"event\",301435442),event),new cljs.core.Keyword(null,\"original-event\",\"original-event\",2121330403),event),interceptors);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$3 = (function (event,interceptors,db){\r\nreturn re_frame.interceptor.assoc_coeffect(re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event,interceptors),new cljs.core.Keyword(null,\"db\",\"db\",993250759),db);\r\n}));\r\n\r\n(re_frame.interceptor.context.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Called on completion of `:before` processing, this function prepares/modifies\r\n * `context` for the backwards sweep of processing in which an interceptor\r\n * chain's `:after` fns are called.\r\n * \r\n *   At this point in processing, the `:queue` is empty and `:stack` holds all\r\n *   the previously run interceptors. So this function enables the backwards walk\r\n *   by priming `:queue` with what's currently in `:stack`\r\n */\r\nre_frame.interceptor.change_direction = (function re_frame$interceptor$change_direction(context){\r\nreturn re_frame.interceptor.enqueue(cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(context,new cljs.core.Keyword(null,\"queue\",\"queue\",1455835879)),new cljs.core.Keyword(null,\"stack\",\"stack\",-793405930).cljs$core$IFn$_invoke$arity$1(context));\r\n});\r\nre_frame.interceptor.execute_STAR_ = (function re_frame$interceptor$execute_STAR_(ctx){\r\nreturn re_frame.interceptor.invoke_interceptors(re_frame.interceptor.change_direction(re_frame.interceptor.invoke_interceptors(ctx,new cljs.core.Keyword(null,\"before\",\"before\",-1633692388))),new cljs.core.Keyword(null,\"after\",\"after\",594996914));\r\n});\r\nre_frame.interceptor.merge_ex_data = (function re_frame$interceptor$merge_ex_data(var_args){\r\nvar args__5732__auto__ = [];\r\nvar len__5726__auto___20788 = arguments.length;\r\nvar i__5727__auto___20789 = (0);\r\nwhile(true){\r\nif((i__5727__auto___20789 < len__5726__auto___20788)){\r\nargs__5732__auto__.push((arguments[i__5727__auto___20789]));\r\n\r\nvar G__20790 = (i__5727__auto___20789 + (1));\r\ni__5727__auto___20789 = G__20790;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__5733__auto__ = ((((1) < args__5732__auto__.length))?(new cljs.core.IndexedSeq(args__5732__auto__.slice((1)),(0),null)):null);\r\nreturn re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__5733__auto__);\r\n});\r\n\r\n(re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic = (function (e,ms){\r\nreturn cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(cljs.core.ex_message(e),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.merge,cljs.core.ex_data(e),ms),cljs.core.ex_cause(e));\r\n}));\r\n\r\n(re_frame.interceptor.merge_ex_data.cljs$lang$maxFixedArity = (1));\r\n\r\n/** @this {Function} */\r\n(re_frame.interceptor.merge_ex_data.cljs$lang$applyTo = (function (seq20766){\r\nvar G__20767 = cljs.core.first(seq20766);\r\nvar seq20766__$1 = cljs.core.next(seq20766);\r\nvar self__5711__auto__ = this;\r\nreturn self__5711__auto__.cljs$core$IFn$_invoke$arity$variadic(G__20767,seq20766__$1);\r\n}));\r\n\r\nre_frame.interceptor.default_error_handler = (function re_frame$interceptor$default_error_handler(original_error,re_frame_error){\r\nvar map__20768 = cljs.core.ex_data(re_frame_error);\r\nvar map__20768__$1 = cljs.core.__destructure_map(map__20768);\r\nvar event_v = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20768__$1,new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365));\r\nvar direction = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20768__$1,new cljs.core.Keyword(null,\"direction\",\"direction\",-633359395));\r\nvar interceptor = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__20768__$1,new cljs.core.Keyword(null,\"interceptor\",\"interceptor\",1127739076));\r\nvar event_handler_QMARK_ = (function (){var fexpr__20769 = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"fx-handler\",\"fx-handler\",-549783097),null,new cljs.core.Keyword(null,\"db-handler\",\"db-handler\",579530098),null,new cljs.core.Keyword(null,\"ctx-handler\",\"ctx-handler\",-1777672230),null], null), null);\r\nreturn (fexpr__20769.cljs$core$IFn$_invoke$arity$1 ? fexpr__20769.cljs$core$IFn$_invoke$arity$1(interceptor) : fexpr__20769.call(null, interceptor));\r\n})();\r\ncljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(re_frame.loggers.console,new cljs.core.Keyword(null,\"error\",\"error\",-978969032),\"An error occured while handling the re-frame event:\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(event_v),\"\\n\",cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.str,(cljs.core.truth_(event_handler_QMARK_)?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",cljs.core.first(event_v),\"event handler function.\"], null):new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [\"Within the\",direction,\"phase of the\",cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([interceptor], 0)),\"interceptor.\"], null)))], 0));\r\n\r\nthrow original_error;\r\n});\r\n/**\r\n * Executes the given chain (coll) of interceptors.\r\n * \r\n * Each interceptor has this form:\r\n *     {:before  (fn [context] ...)     ;; returns possibly modified context\r\n *      :after   (fn [context] ...)}    ;; `identity` would be a noop\r\n * \r\n * Walks the queue of interceptors from beginning to end, calling the\r\n * `:before` fn on each, then reverse direction and walk backwards,\r\n * calling the `:after` fn on each.\r\n * \r\n * The last interceptor in the chain presumably wraps an event\r\n * handler fn. So the overall goal of the process is to \"handle\r\n * the given event\".\r\n * \r\n * Thread a `context` through all calls. `context` has this form:\r\n * \r\n *   {:coeffects {:event [:a-query-id :some-param]\r\n *                :db    <original contents of app-db>}\r\n *    :effects   {:db    <new value for app-db>\r\n *                :fx  [:dispatch [:an-event-id :param1]]}\r\n *    :queue     <a collection of further interceptors>\r\n *    :stack     <a collection of interceptors already walked>}\r\n * \r\n * `context` has `:coeffects` and `:effects` which, if this was a web\r\n * server, would be somewhat analogous to `request` and `response`\r\n * respectively.\r\n * \r\n * `coeffects` will contain data like `event` and the initial\r\n * state of `db` -  the inputs required by the event handler\r\n * (sitting presumably on the end of the chain), while handler-returned\r\n * side effects are put into `:effects` including, but not limited to,\r\n * new values for `db`.\r\n * \r\n * The first few interceptors in a chain will likely have `:before`\r\n * functions which \"prime\" the `context` by adding the event, and\r\n * the current state of app-db into `:coeffects`. But interceptors can\r\n * add whatever they want to `:coeffects` - perhaps the event handler needs\r\n * some information from localstore, or a random number, or access to\r\n * a DataScript connection.\r\n * \r\n * Equally, some interceptors in the chain will have `:after` fn\r\n * which can process the side effects accumulated into `:effects`\r\n * including but, not limited to, updates to app-db.\r\n * \r\n * Through both stages (before and after), `context` contains a `:queue`\r\n * of interceptors yet to be processed, and a `:stack` of interceptors\r\n * already done.  In advanced cases, these values can be modified by the\r\n * functions through which the context is threaded.\r\n */\r\nre_frame.interceptor.execute = (function re_frame$interceptor$execute(event_v,interceptors){\r\nvar ctx = re_frame.interceptor.context.cljs$core$IFn$_invoke$arity$2(event_v,interceptors);\r\nvar error_handler = re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),new cljs.core.Keyword(null,\"event-handler\",\"event-handler\",-487718843));\r\nif(re_frame.trace.is_trace_enabled_QMARK_()){\r\nvar new_trace__20663__auto___20791 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"interceptors\",\"interceptors\",-1546782951),interceptors], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\r\n(re_frame.trace._STAR_current_trace_STAR_ = new_trace__20663__auto___20791);\r\n\r\n} else {\r\n}\r\n\r\nif(cljs.core.not(error_handler)){\r\nreturn re_frame.interceptor.execute_STAR_(cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ctx,new cljs.core.Keyword(\"re-frame.interceptor\",\"original-exception?\",\"re-frame.interceptor/original-exception?\",-527923945),true));\r\n} else {\r\ntry{return re_frame.interceptor.execute_STAR_(ctx);\r\n}catch (e20770){var e = e20770;\r\nvar G__20771 = cljs.core.ex_cause(e);\r\nvar G__20772 = re_frame.interceptor.merge_ex_data.cljs$core$IFn$_invoke$arity$variadic(e,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"event-v\",\"event-v\",1378681365),event_v], null)], 0));\r\nreturn (error_handler.cljs$core$IFn$_invoke$arity$2 ? error_handler.cljs$core$IFn$_invoke$arity$2(G__20771,G__20772) : error_handler.call(null, G__20771,G__20772));\r\n}}\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","re_frame/interceptor.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",25],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react-dom","~$module$node_modules$react_dom$index","~$react","~$module$node_modules$react$index","~$searchappbar","~$module$node_modules$searchappbar$dist$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$re-frame.interceptor","~:reader-aliases",["^ "],"~:op","~:ns","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^R","~$set","~$clojure.set","~$u","~$re-frame.utils","~$re-frame.trace","^V","~$re-frame.registrar","^W","~$cljs.core","^X","~$goog","^Y","~$registrar","^W","~$trace","^V","^U","^U","^T","^T","~$re-frame.loggers","^10"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$console","^10","~$empty-queue","^R","~$debug-enabled?","^R"],"~:require-macros",["^ ","^V","^V","^[","^V","^X","^X"],"~:form",["~#list",["~$ns","^L",["^19",["^12",["^10","~:refer",["^14"]],["^R","^1;",["^15","^16"]],["^V","~:as","^[","~:include-macros",true],["^W","^1<","^Z"],["^U","^1<","~$u"],["^T","^1<","^S"]]]]],"~:flags",["^ ","^12",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^Y","^X","^10","^R","^V","^W","^U","^T"]],"^O","^L","~:resource-id",["~:shadow.build.classpath/resource","re_frame/interceptor.cljc"],"~:compiled-at",1712868673910,"^M",["^ ","^R","^R","^S","^T","~$u","^U","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^W","^[","^V","^U","^U","^T","^T","^10","^10"],"~:resource-name","re_frame/interceptor.cljc","~:warnings",[],"~:source","(ns re-frame.interceptor\n  (:require\n   [re-frame.loggers :refer [console]]\n   [re-frame.interop :refer [empty-queue debug-enabled?]]\n   [re-frame.trace :as trace :include-macros true]\n   [re-frame.registrar :as registrar]\n   [re-frame.utils :as u]\n   [clojure.set :as set]))\n\n(def mandatory-interceptor-keys #{:id :after :before})\n\n(def optional-interceptor-keys #{:comment})\n\n(defn interceptor?\n  [m]\n  (and (map? m)\n       (= mandatory-interceptor-keys\n          (-> m keys set (set/difference optional-interceptor-keys)))))\n\n(defn ->interceptor\n  [& {:as m :keys [id comment before after]}]\n  (when debug-enabled?\n    (if-let [unknown-keys (seq (set/difference\n                                (-> m keys set)\n                                mandatory-interceptor-keys\n                                optional-interceptor-keys))]\n      (console :error \"re-frame: ->interceptor\" m \"has unknown keys:\" unknown-keys)))\n  (cond-> {:id     (or id :unnamed)\n           :before before\n           :after  after}\n    comment (assoc :comment comment)))\n\n;; -- Effect Helpers  -----------------------------------------------------------------------------\n\n(defn get-effect\n  ([context]\n   (:effects context))\n  ([context key]\n   (get-in context [:effects key]))\n  ([context key not-found]\n   (get-in context [:effects key] not-found)))\n\n(defn assoc-effect\n  [context key value]\n  (assoc-in context [:effects key] value))\n\n(defn update-effect\n  [context key f & args]\n  (apply update-in context [:effects key] f args))\n\n;; -- CoEffect Helpers  ---------------------------------------------------------------------------\n\n(defn get-coeffect\n  ([context]\n   (:coeffects context))\n  ([context key]\n   (get-in context [:coeffects key]))\n  ([context key not-found]\n   (get-in context [:coeffects key] not-found)))\n\n(defn assoc-coeffect\n  [context key value]\n  (assoc-in context [:coeffects key] value))\n\n(defn update-coeffect\n  [context key f & args]\n  (apply update-in context [:coeffects key] f args))\n\n;; -- Execute Interceptor Chain  ------------------------------------------------------------------\n\n(defn- exception->ex-info [e interceptor direction]\n  (ex-info (str \"Interceptor Exception: \" #?(:clj (.getMessage e) :cljs (ex-message e)))\n           {:direction direction\n            :interceptor (:id interceptor)}\n           e))\n\n(defn- invoke-interceptor-fn\n  [{::keys [original-exception?] :as context} interceptor direction]\n  (let [f (get interceptor direction)]\n    (cond\n      (not f) context\n      original-exception? (f context)\n      :else\n      (try\n        (f context)\n        (catch #?(:clj Exception :cljs :default) e\n          (throw (exception->ex-info e interceptor direction)))))))\n\n(defn- invoke-interceptors\n  \"Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.\"\n  ([context direction]\n   (loop [context context]\n     (let [queue (:queue context)]        ;; future interceptors\n       (if (empty? queue)\n         context\n         (let [interceptor (peek queue)   ;; next interceptor to call\n               stack (:stack context)]    ;; already completed interceptors\n           (recur (-> context\n                      (assoc :queue (pop queue)\n                             :stack (conj stack interceptor))\n                      (invoke-interceptor-fn interceptor direction)))))))))\n\n(defn enqueue\n  [context interceptors]\n  (update context :queue\n          (fnil into empty-queue)\n          interceptors))\n\n(defn- context\n  \"Create a fresh context\"\n  ([event interceptors]\n   (-> {}\n       (assoc-coeffect :event event)\n      ;; Some interceptors, like `trim-v` and `unwrap`, alter event so capture\n      ;; the original for use cases such as tracing.\n       (assoc-coeffect :original-event event)\n       (enqueue interceptors)))\n  ([event interceptors db]      ;; only used in tests, probably a hack, remove ?  XXX\n   (-> (context event interceptors)\n       (assoc-coeffect :db db))))\n\n(defn- change-direction\n  \"Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`\"\n  [context]\n  (-> context\n      (dissoc :queue)\n      (enqueue (:stack context))))\n\n(defn execute*\n  [ctx]\n  (-> ctx\n      (invoke-interceptors :before)\n      change-direction\n      (invoke-interceptors :after)))\n\n(defn- merge-ex-data [e & ms]\n  (ex-info #?(:clj (.getMessage e) :cljs (ex-message e))\n           (apply merge (ex-data e) ms)\n           #?(:clj (.getCause e) :cljs (ex-cause e))))\n\n(defn default-error-handler [original-error re-frame-error]\n  (let [{:keys [event-v direction interceptor]} (ex-data re-frame-error)\n        event-handler? (#{:db-handler :fx-handler :ctx-handler} interceptor)]\n    (apply console :error\n           \"An error occured while handling the re-frame event:\"\n           (str event-v)\n           \"\\n\"\n           (map str\n                (if event-handler?\n                  [\"Within the\" (first event-v) \"event handler function.\"]\n                  [\"Within the\" direction \"phase of the\" (pr-str interceptor) \"interceptor.\"])))\n    (throw original-error)))\n\n(defn execute\n  \"Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \\\"handle\n   the given event\\\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \\\"prime\\\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.\"\n  [event-v interceptors]\n  (let [ctx (context event-v interceptors)\n        error-handler (registrar/get-handler :error :event-handler)]\n    (trace/merge-trace!\n     {:tags {:interceptors interceptors}})\n    (if-not error-handler\n      (execute* (assoc ctx ::original-exception? true))\n      (try\n        (execute* ctx)\n        (catch #?(:clj Exception :cljs :default) e\n          (error-handler (ex-cause e)\n                         (merge-ex-data e {:event-v event-v})))))))\n","~:reader-features",["^J",["~:cljs"]],"~:used-var-namespaces",["^J",["^R","^L","^V","^W","^X","~$js","^T","^10"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["re-frame.interceptor/mandatory-interceptor-keys","re-frame.interceptor/optional-interceptor-keys","re-frame.interceptor/interceptor?","m","cljs.core/map?","cljs.core._EQ_","cljs.core/keys","cljs.core/set","clojure.set.difference","var_args","args__5732__auto__","len__5726__auto__","i__5727__auto__","argseq__5733__auto__","cljs.core/IndexedSeq","re-frame.interceptor/->interceptor","p__20746","map__20747","cljs.core/--destructure-map","cljs.core.get","seq20745","self__5712__auto__","cljs.core/seq","id","comment","before","after","re-frame.interop/debug-enabled?","temp__5802__auto__","unknown-keys","re_frame.loggers.console","G__20748","or__5002__auto__","cljs.core.assoc","G__20750","re-frame.interceptor/get-effect","js/Error","context","key","cljs.core.get_in","not-found","re-frame.interceptor/assoc-effect","value","cljs.core/assoc-in","re-frame.interceptor/update-effect","seq20751","G__20752","cljs.core/first","cljs.core/next","G__20753","G__20754","self__5711__auto__","f","args","cljs.core.apply","cljs.core/update-in","G__20756","re-frame.interceptor/get-coeffect","re-frame.interceptor/assoc-coeffect","re-frame.interceptor/update-coeffect","seq20757","G__20758","G__20759","G__20760","re-frame.interceptor/exception->ex-info","e","interceptor","direction","cljs.core.ex_info","cljs.core/ex-message","p__20761","map__20762","re-frame.interceptor/invoke-interceptor-fn","original-exception?","cljs.core/not","e20763","re-frame.interceptor/invoke-interceptors","queue","cljs.core/empty?","cljs.core/peek","stack","cljs.core/pop","cljs.core.conj","re-frame.interceptor/enqueue","interceptors","cljs.core.update","cljs.core.fnil","cljs.core/into","re-frame.interop/empty-queue","G__20765","re-frame.interceptor/context","event","db","re_frame.interceptor.context","re-frame.interceptor/change-direction","cljs.core.dissoc","re-frame.interceptor/execute*","ctx","re-frame.interceptor/merge-ex-data","seq20766","G__20767","ms","cljs.core/merge","cljs.core/ex-data","cljs.core/ex-cause","re-frame.interceptor/default-error-handler","original-error","re-frame-error","map__20768","event-v","event-handler?","fexpr__20769","re-frame.loggers/console","cljs.core.map","cljs.core/str","cljs.core.pr_str","re-frame.interceptor/execute","error-handler","re_frame.registrar.get_handler","re-frame.trace/is-trace-enabled?","new-trace__20663__auto__","cljs.core.merge","re-frame.trace/*current-trace*","e20770","G__20771","G__20772","re_frame.interceptor.merge_ex_data"]],"~:used-vars",["^J",["~$cljs.core/--destructure-map","~$re-frame.interceptor/context","~$re-frame.interceptor/get-effect","~$cljs.core/str","~$cljs.core/ex-message","~$re-frame.registrar/get-handler","~$cljs.core/=","~$cljs.core/keys","~$re-frame.interceptor/execute","~$cljs.core/IndexedSeq","~$re-frame.interceptor/->interceptor","~$cljs.core/seq","~$cljs.core/apply","~$re-frame.loggers/console","~$cljs.core/dissoc","~$re-frame.interceptor/exception->ex-info","~$re-frame.interceptor/update-effect","~$cljs.core/pop","~$cljs.core/pr-str","~$re-frame.interceptor/invoke-interceptors","~$cljs.core/set","~$cljs.core/empty?","~$re-frame.interceptor/enqueue","~$cljs.core/fnil","~$cljs.core/into","~$cljs.core/map?","~$cljs.core/conj","~$cljs.core/update","~$cljs.core/peek","~$cljs.core/map","~$re-frame.interceptor/default-error-handler","~$cljs.core/get-in","~$re-frame.interceptor/update-coeffect","~$re-frame.trace/is-trace-enabled?","~$cljs.core/get","~$re-frame.interceptor/assoc-coeffect","~$clojure.set/difference","~$re-frame.interceptor/optional-interceptor-keys","~$re-frame.interceptor/change-direction","~$cljs.core/ex-cause","~$cljs.core/ex-info","~$re-frame.trace/*current-trace*","~$re-frame.interceptor/merge-ex-data","~$cljs.core/next","~$re-frame.interceptor/get-coeffect","~$re-frame.interop/empty-queue","~$cljs.core/not","~$re-frame.interceptor/assoc-effect","~$re-frame.interceptor/interceptor?","~$re-frame.interceptor/execute*","~$cljs.core/assoc","~$cljs.core/assoc-in","~$cljs.core/ex-data","~$cljs.core/first","~$re-frame.interop/debug-enabled?","~$cljs.core/merge","~$cljs.core/update-in","~$re-frame.interceptor/invoke-interceptor-fn","~$js/Error","~$re-frame.interceptor/mandatory-interceptor-keys"]]],"~:cache-keys",["~#cmap",[["^1B","reagent/impl/batching.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^Y","^X","~$reagent.debug","~$reagent.impl.util"]]],["^1B","goog/dom/tagname.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.dom.HtmlElement"]]],["^1B","goog/labs/useragent/platform.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.string.internal","~$goog.labs.userAgent.util","~$goog.labs.userAgent.highEntropy.highEntropyValue","~$goog.labs.userAgent.highEntropy.highEntropyData","~$goog.labs.userAgent"]]],["^1B","goog/math/math.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.asserts"]]],["^1B","goog/html/trustedtypes.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/events/eventtype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.events.eventTypeHelpers","~$goog.userAgent"]]],["^1B","goog/labs/useragent/browser.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3>","^3?","^3B","^3=","^3@","^3A"]]],["^1B","goog/html/safeurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.string.Const","~$goog.string.TypedString","^3="]]],["^1B","re_frame/loggers.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^T"]]],["^1B","goog/array/array.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B"]]],["^1B","reagent/impl/util.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","~$clojure.string","~$clojure.walk","~$goog.object","^3:"]]],["^1B","goog/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^3>","~$goog.reflect","^3="]]],["^1B","goog/debug/error.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/flags/flags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/events/events.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","~$goog.events.BrowserFeature","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1B","re_frame/registrar.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^R","^10","~$re-frame.settings"]]],["^1B","goog/events/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/dom/nodetype.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/labs/useragent/highentropy/highentropyvalue.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3>","^3="]]],["^1B","reagent/ratom.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^3;","^3:","~$reagent.impl.batching","^T","^3K"]]],["^1B","re_frame/interop.cljs"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1B","goog/disposable/disposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.disposable.IDisposable","~$goog.dispose","~$goog.disposeAll"]]],["^1B","goog/string/typedstring.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["~:shadow.build.npm/resource","node_modules/react/index.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["~$shadow.js","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1B","shadow/js.js"],["56681e253acd83be730dce6df8d306c985c4c5da","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/object/object.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","reagent/impl/template.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^E","^3I","^3;","~$reagent.impl.component","~$reagent.impl.input","~$reagent.impl.protocols","^3Z","^3:","^3K"]]],["^1B","goog/dom/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B"]]],"~:SHADOW-TIMESTAMP",[1712152237000,1712152237000,1707229049000],["^42","node_modules/react/cjs/react.development.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","754b7a48941975257c8955f6d5e511cb3a878737","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^43","~$module$node_modules$object_assign$index"]]],["^1B","goog/math/long.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","^3O"]]],["^1B","goog/events/listener.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.events.ListenableKey"]]],["^1B","goog/html/trustedresourceurl.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","~$goog.fs.blob","^3E","~$goog.html.SafeScript","~$goog.html.trustedtypes","^3G","^3H"]]],["^1B","goog/events/listenermap.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.array","~$goog.events.Listener","^3K"]]],["^1B","goog/events/eventid.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/string/internal.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/functions/functions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/html/safestyle.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3G","~$goog.html.SafeUrl","^3H","^3B","^3="]]],["^1B","goog/dom/safe.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","~$goog.asserts.dom","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","^4=","~$goog.html.SafeStyle","^4A","^3F","~$goog.html.uncheckedconversions","^3G","^3="]]],["^1B","goog/asserts/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.dom.TagName","^3B","~$goog.dom.element"]]],["^1B","reagent/impl/component.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^3K","^E","^3;","^3V","^48","^3Z","^3:"]]],["^1B","clojure/walk.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X"]]],["^1B","goog/html/safehtml.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3G","^4=","^4F","~$goog.html.SafeStyleSheet","^4A","^4H","^3F","^3H","^3B","^3L","^4?","^3K","^3=","~$goog.dom.tags","^4>"]]],["^1B","goog/dom/tags.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3K"]]],["^1B","goog/math/size.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/labs/useragent/engine.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4?","^3=","^3>"]]],["^1B","goog/fs/blob.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","re_frame/settings.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^R","^10"]]],["^1B","goog/dom/dom.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4?","^3B","^4B","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4H","~$goog.dom.safe","^4E","^4G","~$goog.math.Coordinate","~$goog.math.Size","^3K","~$goog.string","^3G","~$goog.string.Unicode","^3D"]]],["^1B","goog/asserts/asserts.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.debug.Error","^4M"]]],["^1B","reagent/impl/protocols.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X"]]],["^1B","goog/uri/uri.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4?","^3B","~$goog.collections.maps","^4Q","~$goog.structs","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1B","goog/labs/useragent/highentropy/highentropydata.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3?"]]],["^1B","goog/collections/maps.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^42","node_modules/object-assign/index.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","519ffd5a4c91b67302cc9947b794966d629860cd","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^43"]]],["^1B","goog/events/eventtypehelpers.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3R","^3D"]]],["^1B","goog/disposable/idisposable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/fs/url.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/base.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",[]]],["^1B","goog/structs/structs.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4?","^3K"]]],["^1B","goog/disposable/dispose.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","clojure/string.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^4Q","~$goog.string.StringBuffer"]]],["^42","node_modules/react/cjs/react.production.min.js"],["0a9a79a56aa9c1e53cc49fff63dff00b4f41486c","93a021dca5c9b562f1e0577e488e9413c111cf9f","0a81b45abe33f0ad39b726512604018f94261db9","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^43","^4:"]]],["^1B","goog/debug/entrypointregistry.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B"]]],["^1B","goog/string/string.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4N","^4G","^3G","^3="]]],["^1B","re_frame/interceptor.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^10","^R","^V","^W","^U","^T"]]],["^1B","goog/reflect/reflect.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/labs/useragent/util.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3=","^3A"]]],["^1B","reagent/core.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^E","~$reagent.impl.template","^46","^3;","^3V","^48","^3Z","^3:"]]],["^1B","goog/debug/debug.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4?","~$goog.debug.errorcontext"]]],["^1B","goog/string/stringbuffer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/math/coordinate.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.math"]]],["^1B","goog/debug/errorcontext.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/labs/useragent/useragent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.flags"]]],["^1B","goog/async/nexttick.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3P","~$goog.dom","^4H","^4D","^3L","^3M"]]],["^1B","goog/dom/element.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^4M","^4H"]]],["^1B","goog/html/uncheckedconversions.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","^4E","^4=","^4F","^4J","^4A","^3F","^3G","^3="]]],["^1B","re_frame/utils.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^10","^R"]]],["^1B","reagent/impl/input.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^46","^3V","^48"]]],["^1B","goog/events/event.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.Disposable","~$goog.events.EventId"]]],["^1B","goog/dom/htmlelement.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","cljs/core.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.math.Long","~$goog.math.Integer","^4Q","^3K","^4?","~$goog.Uri","^4Y"]]],["^1B","goog/html/safescript.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3G","^3H","^4>","^3B"]]],["^1B","reagent/debug.cljs"],["1b9a181b5c7ed3557768d2ea0c66f5616aef5e97","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X"]]],["^1B","goog/html/safestylesheet.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3G","^4F","^3H","^3K","^3B","^3="]]],["^1B","goog/events/browserevent.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","~$goog.debug","~$goog.events.Event","~$goog.events.EventType","^3O","^3D"]]],["^1B","goog/math/integer.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3O"]]],["^1B","goog/dom/browserfeature.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3D"]]],["^1B","clojure/set.cljs"],["b89362aeac5c1cafea76c798929ee5d385c461d8","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X"]]],["^1B","goog/uri/utils.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","^4Q"]]],["^1B","goog/string/const.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^3B","^3H"]]],["^1B","goog/disposable/disposeall.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^40"]]],["^1B","goog/events/listenable.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","goog/events/listenablekey.js"],["533ce2bdbb7925db781449abb6527af1e6c5e782","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y"]]],["^1B","re_frame/trace.cljc"],["d2379fa1fcaa1a5c33f1dcc4ab5ca5bf0e561243","^36",["^ ","^37",null,"^38",["^J",[]],"^39",["^Y","^X","^R","^10","^4D"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/core.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/instant.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/core.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64_vlq.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/core.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/pprint.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/tagged_literals.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/data/json.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/instant.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/js_deps.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/errors.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/re-frame/re-frame/1.4.2/re-frame-1.4.2.jar!/re_frame/interop.clj",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/reader_types.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes/and_or.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/source_map/base64.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/edn.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/interop.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/java/io.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/impl/inspect.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/string.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojure/1.11.1/clojure-1.11.1.jar!/clojure/set.clj",1670877325000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/ratom.clj",1711469606000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/env.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/util.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/vendor/clojure/tools/reader/default_data_readers.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/compiler.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/passes.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/analyzer/impl/namespaces.cljc",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/re-frame/re-frame/1.4.2/re-frame-1.4.2.jar!/re_frame/trace.cljc",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/org/clojure/clojurescript/1.11.132/clojurescript-1.11.132.jar!/cljs/externs.clj",1707229049000,"jar:file:/C:/Users/nyemi/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1707229056000,"jar:file:/C:/Users/nyemi/.m2/repository/reagent/reagent/1.2.0/reagent-1.2.0.jar!/reagent/debug.clj",1711469606000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","re_frame/interceptor.cljc","^7",1,"^8",5,"^9",1,"^:",25],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"^K","^L","^M",["^ "],"^P",null,"^Q",["^ ","^R","^R","^S","^T","~$u","^U","^V","^V","^W","^W","^X","^X","^Y","^Y","^Z","^W","^[","^V","^U","^U","^T","^T","^10","^10"],"^11",["^J",["^12"]],"~:shadow/js-access-global",["^J",["Error"]],"^13",["^ ","^14","^10","^15","^R","^16","^R"],"~:defs",["^ ","~$update-effect",["^ ","~:protocol-inline",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",47,"^8",7,"^9",47,"^:",20,"~:arglists",["^19",["~$quote",["^19",[["~$context","~$key","~$f","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",3,"~:max-fixed-arity",3,"~:method-params",[["^19",["^6;","^6<","~$f","^6="]]],"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]],"~:arglists-meta",["^19",[null]]]],"^K","^24","^6","re_frame/interceptor.cljc","^:",20,"^6>",["^ ","^6?",true,"^6@",3,"^6A",3,"^6B",[["^19",["^6;","^6<","~$f","^6="]]],"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]],"^6C",["^19",[null]]],"^6B",[["^19",["^6;","^6<","~$f","^6="]]],"~:protocol-impl",null,"^6@",3,"^6C",["^19",[null]],"^8",1,"~:root-source-info",["^ ","~:source-type","~:fragment","~:source-form",["^19",["~$defn","^67",["^6;","^6<","~$f","~$&","^6="],["^19",["~$apply","~$update-in","^6;",["~:effects","^6<"],"~$f","^6="]]]]],"^6?",true,"~:methods",[["^ ","^6@",3,"^6?",true,"~:tag","~$any"]],"^7",47,"~:ret-tag","^6O","^9",47,"^6A",3,"~:fn-var",true,"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]]],"~$invoke-interceptors",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",89,"^8",8,"^9",89,"^:",27,"~:private",true,"^69",["^19",["^6:",["^19",[["^6;","~$direction"]]]]],"~:doc","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"^6S",true,"^K","^27","^6","re_frame/interceptor.cljc","^:",27,"^6B",["^19",[["^6;","^6T"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["~$defn-","^6R","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement.",["^19",[["^6;","^6T"],["^19",["~$loop",["^6;","^6;"],["^19",["~$let",["~$queue",["^19",["~:queue","^6;"]]],["^19",["~$if",["^19",["~$empty?","^6Y"]],"^6;",["^19",["^6X",["~$interceptor",["^19",["~$peek","^6Y"]],"~$stack",["^19",["~:stack","^6;"]]],["^19",["~$recur",["^19",["~$->","^6;",["^19",["~$assoc","^6Z",["^19",["~$pop","^6Y"]],"^74",["^19",["~$conj","^73","^71"]]]],["^19",["~$invoke-interceptor-fn","^71","^6T"]]]]]]]]]]]]]]]]]]],"^6?",false,"^7",89,"^9",89,"^6A",2,"^6Q",true,"^69",["^19",["^6:",["^19",[["^6;","^6T"]]]]],"^6U","Loop over all interceptors, calling `direction` function on each,\n  threading the value of `context` through every call.\n\n  `direction` is one of `:before` or `:after`.\n\n  Each iteration, the next interceptor to process is obtained from\n  context's `:queue`. After they are processed, interceptors are popped\n  from `:queue` and added to `:stack`.\n\n  After sufficient iteration, `:queue` will be empty, and `:stack` will\n  contain all interceptors processed.\n\n  Returns updated `context`. Ie. the `context` which has been threaded\n  through all interceptor functions.\n\n  Generally speaking, an interceptor's `:before` function will (if present)\n  add to a `context's` `:coeffects`, while its `:after` function\n  will modify the `context`'s `:effects`.  Very approximately.\n\n  But because all interceptor functions are given `context`, and can\n  return a modified version of it, the way is clear for an interceptor\n  to introspect the stack or queue, or even modify the queue\n  (add new interceptors via `enqueue`?). This is a very fluid arrangement."],"~$assoc-coeffect",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",61,"^8",7,"^9",61,"^:",21,"^69",["^19",["^6:",["^19",[["^6;","^6<","~$value"]]]]]],"^K","^2G","^6","re_frame/interceptor.cljc","^:",21,"^6B",["^19",[["^6;","^6<","^7<"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^7;",["^6;","^6<","^7<"],["^19",["~$assoc-in","^6;",["~:coeffects","^6<"],"^7<"]]]]],"^6?",false,"^7",61,"^6P",["^J",["~$clj","^6O"]],"^9",61,"^6A",3,"^6Q",true,"^69",["^19",["^6:",["^19",[["^6;","^6<","^7<"]]]]]],"~$exception->ex-info",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",71,"^8",8,"^9",71,"^:",26,"^6S",true,"^69",["^19",["^6:",["^19",[["~$e","^71","^6T"]]]]]],"^6S",true,"^K","^23","^6","re_frame/interceptor.cljc","^:",26,"^6B",["^19",[["~$e","^71","^6T"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6V","^7@",["~$e","^71","^6T"],["^19",["~$ex-info",["^19",["~$str","Interceptor Exception: ",["^19",["~$ex-message","~$e"]]]],["^ ","~:direction","^6T","~:interceptor",["^19",["~:id","^71"]]],"~$e"]]]]],"^6?",false,"^7",71,"^6P","~$cljs.core/ExceptionInfo","^9",71,"^6A",3,"^6Q",true,"^69",["^19",["^6:",["^19",[["~$e","^71","^6T"]]]]]],"~$update-coeffect",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",65,"^8",7,"^9",65,"^:",22,"^69",["^19",["^6:",["^19",[["^6;","^6<","~$f","~$&","^6="]]]]],"^6>",["^ ","^6?",true,"^6@",3,"^6A",3,"^6B",[["^19",["^6;","^6<","~$f","^6="]]],"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]],"^6C",["^19",[null]]]],"^K","^2D","^6","re_frame/interceptor.cljc","^:",22,"^6>",["^ ","^6?",true,"^6@",3,"^6A",3,"^6B",[["^19",["^6;","^6<","~$f","^6="]]],"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]],"^6C",["^19",[null]]],"^6B",[["^19",["^6;","^6<","~$f","^6="]]],"^6D",null,"^6@",3,"^6C",["^19",[null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^7H",["^6;","^6<","~$f","~$&","^6="],["^19",["^6J","^6K","^6;",["^7>","^6<"],"~$f","^6="]]]]],"^6?",true,"^6M",[["^ ","^6@",3,"^6?",true,"^6N","^6O"]],"^7",65,"^6P","^6O","^9",65,"^6A",3,"^6Q",true,"^69",["^19",[["^6;","^6<","~$f","~$&","^6="]]]],"^7:",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",77,"^8",8,"^9",77,"^:",29,"^6S",true,"^69",["^19",["^6:",["^19",[[["^ ","~:re-frame.interceptor/keys",["~$original-exception?"],"^1<","^6;"],"^71","^6T"]]]]]],"^6S",true,"^K","^31","^6","re_frame/interceptor.cljc","^:",29,"^6B",["^19",[["~$p__20761","^71","^6T"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6V","^7:",[["^ ","^7I",["^7J"],"^1<","^6;"],"^71","^6T"],["^19",["^6X",["~$f",["^19",["~$get","^71","^6T"]]],["^19",["~$cond",["^19",["~$not","~$f"]],"^6;","^7J",["^19",["~$f","^6;"]],"~:else",["^19",["~$try",["^19",["~$f","^6;"]],["^19",["~$catch","~:default","~$e",["^19",["~$throw",["^19",["^7@","~$e","^71","^6T"]]]]]]]]]]]]]]],"^6?",false,"^7",77,"^6P",["^J",[null,"^6O","~$clj-nil"]],"^9",77,"^6A",3,"^6Q",true,"^69",["^19",["^6:",["^19",[[["^ ","^7I",["^7J"],"^1<","^6;"],"^71","^6T"]]]]]],"~$get-effect",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",35,"^8",7,"^9",35,"^:",17,"^69",["^19",["^6:",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","~$not-found"]]]]],"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]],"^6C",["^19",[null,null,null]]]],"^K","^1R","^6","re_frame/interceptor.cljc","^:",17,"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]],"^6C",["^19",[null,null,null]]],"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^6D",null,"^6@",3,"^6C",["^19",[null,null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^7U",["^19",[["^6;"],["^19",["^6L","^6;"]]]],["^19",[["^6;","^6<"],["^19",["~$get-in","^6;",["^6L","^6<"]]]]],["^19",[["^6;","^6<","^7V"],["^19",["^7W","^6;",["^6L","^6<"],"^7V"]]]]]]],"^6?",false,"^6M",[["^ ","^6@",1,"^6?",false,"^6N","^6O"],["^ ","^6@",2,"^6?",false,"^6N","^6O"],["^ ","^6@",3,"^6?",false,"^6N",["^J",[null,"^6O"]]]],"^7",35,"^9",35,"^6A",3,"^6Q",true,"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]]],"~$->interceptor",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",20,"^8",7,"^9",20,"^:",20,"^69",["^19",["^6:",["^19",[["~$&",["^ ","^1<","~$m","~:keys",["~$id","~$comment","~$before","~$after"]]]]]]],"^6>",["^ ","^6?",true,"^6@",0,"^6A",0,"^6B",[["^19",[["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]],"^69",["^19",[["~$&",["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]],"^6C",["^19",[null]]]],"^K","^1Z","^6","re_frame/interceptor.cljc","^:",20,"^6>",["^ ","^6?",true,"^6@",0,"^6A",0,"^6B",[["^19",[["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]],"^69",["^19",[["~$&",["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]],"^6C",["^19",[null]]],"^6B",[["^19",[["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]],"^6D",null,"^6@",0,"^6C",["^19",[null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^7X",["~$&",["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]],["^19",["~$when","^16",["^19",["~$if-let",["~$unknown-keys",["^19",["~$seq",["^19",["~$set/difference",["^19",["^76","~$m","~$keys","^S"]],"~$mandatory-interceptor-keys","~$optional-interceptor-keys"]]]]],["^19",["^14","~:error","re-frame: ->interceptor","~$m","has unknown keys:","^84"]]]]]],["^19",["~$cond->",["^ ","^7F",["^19",["~$or","^7Z","~:unnamed"]],"~:before","^80","~:after","^81"],"^7[",["^19",["^77","~:comment","^7["]]]]]]],"^6?",true,"^6M",[["^ ","^6@",0,"^6?",true,"^6N",["^J",["^7?","^6O","~$cljs.core/IMap"]]]],"^7",20,"^6P","^6O","^9",20,"^6A",0,"^6Q",true,"^69",["^19",[["~$&",["^ ","^1<","~$m","^7Y",["^7Z","^7[","^80","^81"]]]]]],"~$merge-ex-data",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",164,"^8",8,"^9",164,"^:",21,"^6S",true,"^69",["^19",["^6:",["^19",[["~$e","~$&","~$ms"]]]]],"^6>",["^ ","^6?",true,"^6@",1,"^6A",1,"^6B",[["^19",["~$e","^8C"]]],"^69",["^19",[["~$e","~$&","^8C"]]],"^6C",["^19",[null]]]],"^6S",true,"^K","^2N","^6","re_frame/interceptor.cljc","^:",21,"^6>",["^ ","^6?",true,"^6@",1,"^6A",1,"^6B",[["^19",["~$e","^8C"]]],"^69",["^19",[["~$e","~$&","^8C"]]],"^6C",["^19",[null]]],"^6B",[["^19",["~$e","^8C"]]],"^6D",null,"^6@",1,"^6C",["^19",[null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6V","^8B",["~$e","~$&","^8C"],["^19",["^7A",["^19",["^7C","~$e"]],["^19",["^6J","~$merge",["^19",["~$ex-data","~$e"]],"^8C"]],["^19",["~$ex-cause","~$e"]]]]]]],"^6?",true,"^6M",[["^ ","^6@",1,"^6?",true,"^6N","^7G"]],"^7",164,"^6P","^6O","^9",164,"^6A",1,"^6Q",true,"^69",["^19",[["~$e","~$&","^8C"]]]],"~$execute*",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",157,"^8",7,"^9",157,"^:",15,"^69",["^19",["^6:",["^19",[["~$ctx"]]]]]],"^K","^2U","^6","re_frame/interceptor.cljc","^:",15,"^6B",["^19",[["^8H"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^8G",["^8H"],["^19",["^76","^8H",["^19",["^6R","^8>"]],"~$change-direction",["^19",["^6R","^8?"]]]]]]],"^6?",false,"^7",157,"^6P","^6O","^9",157,"^6A",1,"^6Q",true,"^69",["^19",["^6:",["^19",[["^8H"]]]]]],"~$get-coeffect",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",53,"^8",7,"^9",53,"^:",19,"^69",["^19",["^6:",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]]]],"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]],"^6C",["^19",[null,null,null]]]],"^K","^2P","^6","re_frame/interceptor.cljc","^:",19,"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]],"^6C",["^19",[null,null,null]]],"^6B",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]],"^6D",null,"^6@",3,"^6C",["^19",[null,null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^8J",["^19",[["^6;"],["^19",["^7>","^6;"]]]],["^19",[["^6;","^6<"],["^19",["^7W","^6;",["^7>","^6<"]]]]],["^19",[["^6;","^6<","^7V"],["^19",["^7W","^6;",["^7>","^6<"],"^7V"]]]]]]],"^6?",false,"^6M",[["^ ","^6@",1,"^6?",false,"^6N","^6O"],["^ ","^6@",2,"^6?",false,"^6N","^6O"],["^ ","^6@",3,"^6?",false,"^6N",["^J",[null,"^6O"]]]],"^7",53,"^9",53,"^6A",3,"^6Q",true,"^69",["^19",[["^6;"],["^6;","^6<"],["^6;","^6<","^7V"]]]],"~$execute",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",182,"^8",7,"^9",182,"^:",14,"^69",["^19",["^6:",["^19",[["~$event-v","~$interceptors"]]]]],"^6U","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"^K","^1X","^6","re_frame/interceptor.cljc","^:",14,"^6B",["^19",[["^8L","^8M"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^8K","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded.",["^8L","^8M"],["^19",["^6X",["^8H",["^19",["^6;","^8L","^8M"]],"~$error-handler",["^19",["~$registrar/get-handler","^8:","~:event-handler"]]],["^19",["~$trace/merge-trace!",["^ ","~:tags",["^ ","~:interceptors","^8M"]]]],["^19",["~$if-not","^8N",["^19",["^8G",["^19",["^77","^8H","~:re-frame.interceptor/original-exception?",true]]]],["^19",["^7P",["^19",["^8G","^8H"]],["^19",["^7Q","^7R","~$e",["^19",["^8N",["^19",["^8F","~$e"]],["^19",["^8B","~$e",["^ ","~:event-v","^8L"]]]]]]]]]]]]]]]],"^6?",false,"^7",182,"^6P",["^J",[null,"^6O"]],"^9",182,"^6A",2,"^6Q",true,"^69",["^19",["^6:",["^19",[["^8L","^8M"]]]]],"^6U","Executes the given chain (coll) of interceptors.\n\n   Each interceptor has this form:\n       {:before  (fn [context] ...)     ;; returns possibly modified context\n        :after   (fn [context] ...)}    ;; `identity` would be a noop\n\n   Walks the queue of interceptors from beginning to end, calling the\n   `:before` fn on each, then reverse direction and walk backwards,\n   calling the `:after` fn on each.\n\n   The last interceptor in the chain presumably wraps an event\n   handler fn. So the overall goal of the process is to \"handle\n   the given event\".\n\n   Thread a `context` through all calls. `context` has this form:\n\n     {:coeffects {:event [:a-query-id :some-param]\n                  :db    <original contents of app-db>}\n      :effects   {:db    <new value for app-db>\n                  :fx  [:dispatch [:an-event-id :param1]]}\n      :queue     <a collection of further interceptors>\n      :stack     <a collection of interceptors already walked>}\n\n   `context` has `:coeffects` and `:effects` which, if this was a web\n   server, would be somewhat analogous to `request` and `response`\n   respectively.\n\n   `coeffects` will contain data like `event` and the initial\n   state of `db` -  the inputs required by the event handler\n   (sitting presumably on the end of the chain), while handler-returned\n   side effects are put into `:effects` including, but not limited to,\n   new values for `db`.\n\n   The first few interceptors in a chain will likely have `:before`\n   functions which \"prime\" the `context` by adding the event, and\n   the current state of app-db into `:coeffects`. But interceptors can\n   add whatever they want to `:coeffects` - perhaps the event handler needs\n   some information from localstore, or a random number, or access to\n   a DataScript connection.\n\n   Equally, some interceptors in the chain will have `:after` fn\n   which can process the side effects accumulated into `:effects`\n   including but, not limited to, updates to app-db.\n\n   Through both stages (before and after), `context` contains a `:queue`\n   of interceptors yet to be processed, and a `:stack` of interceptors\n   already done.  In advanced cases, these values can be modified by the\n   functions through which the context is threaded."],"~$assoc-effect",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",43,"^8",7,"^9",43,"^:",19,"^69",["^19",["^6:",["^19",[["^6;","^6<","^7<"]]]]]],"^K","^2S","^6","re_frame/interceptor.cljc","^:",19,"^6B",["^19",[["^6;","^6<","^7<"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^8W",["^6;","^6<","^7<"],["^19",["^7=","^6;",["^6L","^6<"],"^7<"]]]]],"^6?",false,"^7",43,"^6P",["^J",["^7?","^6O"]],"^9",43,"^6A",3,"^6Q",true,"^69",["^19",["^6:",["^19",[["^6;","^6<","^7<"]]]]]],"~$enqueue",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",125,"^8",7,"^9",125,"^:",14,"^69",["^19",["^6:",["^19",[["^6;","^8M"]]]]]],"^K","^2:","^6","re_frame/interceptor.cljc","^:",14,"^6B",["^19",[["^6;","^8M"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^8X",["^6;","^8M"],["^19",["~$update","^6;","^6Z",["^19",["~$fnil","~$into","^15"]],"^8M"]]]]],"^6?",false,"^7",125,"^6P",["^J",["^7?","^6O"]],"^9",125,"^6A",2,"^6Q",true,"^69",["^19",["^6:",["^19",[["^6;","^8M"]]]]]],"^88",["^ ","^5",["^ ","^6","re_frame/interceptor.cljc","^7",10,"^8",6,"^9",10,"^:",32],"^K","^33","^6","re_frame/interceptor.cljc","^:",32,"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["~$def","^88",["^J",["^8?","^7F","^8>"]]]]],"^7",10,"^9",10,"^6N","~$cljs.core/ISet"],"~$interceptor?",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",14,"^8",7,"^9",14,"^:",19,"^69",["^19",["^6:",["^19",[["~$m"]]]]]],"^K","^2T","^6","re_frame/interceptor.cljc","^:",19,"^6B",["^19",[["~$m"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^92",["~$m"],["^19",["~$and",["^19",["~$map?","~$m"]],["^19",["~$=","^88",["^19",["^76","~$m","^87","^S",["^19",["^86","^89"]]]]]]]]]]],"^6?",false,"^7",14,"^6P","~$boolean","^9",14,"^6A",1,"^6Q",true,"^69",["^19",["^6:",["^19",[["~$m"]]]]]],"~$default-error-handler",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",169,"^8",7,"^9",169,"^:",28,"^69",["^19",["^6:",["^19",[["~$original-error","~$re-frame-error"]]]]]],"^K","^2B","^6","re_frame/interceptor.cljc","^:",28,"^6B",["^19",[["^97","^98"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6I","^96",["^97","^98"],["^19",["^6X",[["^ ","^7Y",["^8L","^6T","^71"]],["^19",["^8E","^98"]],"~$event-handler?",["^19",[["^J",["~:fx-handler","~:db-handler","~:ctx-handler"]],"^71"]]],["^19",["^6J","^14","^8:","An error occured while handling the re-frame event:",["^19",["^7B","^8L"]],"\n",["^19",["~$map","^7B",["^19",["^6[","^99",["Within the",["^19",["~$first","^8L"]],"event handler function."],["Within the","^6T","phase of the",["^19",["~$pr-str","^71"]],"interceptor."]]]]]]],["^19",["^7S","^97"]]]]]]],"^6?",false,"^7",169,"^6P","~$ignore","^9",169,"^6A",2,"^6Q",true,"^69",["^19",["^6:",["^19",[["^97","^98"]]]]]],"^8I",["^ ","^68",null,"^5",["^ ","^6","re_frame/interceptor.cljc","^7",144,"^8",8,"^9",144,"^:",24,"^6S",true,"^69",["^19",["^6:",["^19",[["^6;"]]]]],"^6U","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6S",true,"^K","^2J","^6","re_frame/interceptor.cljc","^:",24,"^6B",["^19",[["^6;"]]],"^6D",null,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6V","^8I","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`",["^6;"],["^19",["^76","^6;",["^19",["~$dissoc","^6Z"]],["^19",["^8X",["^19",["^74","^6;"]]]]]]]]],"^6?",false,"^7",144,"^6P",["^J",["^7?","^6O"]],"^9",144,"^6A",1,"^6Q",true,"^69",["^19",["^6:",["^19",[["^6;"]]]]],"^6U","Called on completion of `:before` processing, this function prepares/modifies\n   `context` for the backwards sweep of processing in which an interceptor\n   chain's `:after` fns are called.\n\n  At this point in processing, the `:queue` is empty and `:stack` holds all\n  the previously run interceptors. So this function enables the backwards walk\n  by priming `:queue` with what's currently in `:stack`"],"^6;",["^ ","^68",null,"^5",["^ ","^6S",true,"^6","re_frame/interceptor.cljc","^:",15,"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["~$event","^8M"],["^9B","^8M","~$db"]],"^69",["^19",[["^9B","^8M"],["^9B","^8M","^9C"]]],"^6C",["^19",[null,null]]],"^8",8,"^7",131,"^9",131,"^69",["^19",["^6:",["^19",[["^9B","^8M"],["^9B","^8M","^9C"]]]]],"^6U","Create a fresh context"],"^6S",true,"^K","^1Q","^6","re_frame/interceptor.cljc","^:",15,"^6>",["^ ","^6?",false,"^6@",3,"^6A",3,"^6B",[["^9B","^8M"],["^9B","^8M","^9C"]],"^69",["^19",[["^9B","^8M"],["^9B","^8M","^9C"]]],"^6C",["^19",[null,null]]],"^6B",[["^9B","^8M"],["^9B","^8M","^9C"]],"^6D",null,"^6@",3,"^6C",["^19",[null,null]],"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^6V","^6;","Create a fresh context",["^19",[["^9B","^8M"],["^19",["^76",["^ "],["^19",["^7;","~:event","^9B"]],["^19",["^7;","~:original-event","^9B"]],["^19",["^8X","^8M"]]]]]],["^19",[["^9B","^8M","^9C"],["^19",["^76",["^19",["^6;","^9B","^8M"]],["^19",["^7;","~:db","^9C"]]]]]]]]],"^6?",false,"^6M",[["^ ","^6@",2,"^6?",false,"^6N",["^J",["^7?","^6O"]]],["^ ","^6@",3,"^6?",false,"^6N",["^J",["^7?","^6O"]]]],"^7",131,"^9",131,"^6A",3,"^6Q",true,"^69",["^19",[["^9B","^8M"],["^9B","^8M","^9C"]]],"^6U","Create a fresh context"],"^89",["^ ","^5",["^ ","^6","re_frame/interceptor.cljc","^7",12,"^8",6,"^9",12,"^:",31],"^K","^2I","^6","re_frame/interceptor.cljc","^:",31,"^8",1,"^6E",["^ ","^6F","^6G","^6H",["^19",["^90","^89",["^J",["^8@"]]]]],"^7",12,"^9",12,"^6N","^91"]],"^17",["^ ","^V","^V","^[","^V","^X","^X"],"~:cljs.analyzer/constants",["^ ","^11",["^J",["^8=","^8R","^9E","^7E","^8P","^7O","^9F","^9:","^6Z","^9;","^9D","^8?","^7F","^6L","^8@","^8V","^74","^8U","^8:","^7>","^8S","^9<","^8>","^7D"]],"~:order",["^8?","^7F","^8>","^8@","^8:","^8=","^6L","^7>","^7D","^7E","^8U","^7O","^6Z","^74","^9D","^9E","^9F","^8V","^9:","^9;","^9<","^8P","^8R","^8S"]],"^1>",["^ ","^12",["^J",[]]],"^1?",["^ "],"^1@",["^Y","^X","^10","^R","^V","^W","^U","^T"]],"^O","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^35",[["^9K","~:static-fns"],true,["~:js-options","~:use-babel"],null,["^9K","~:shadow-tweaks"],null,["^9K","~:source-map-inline"],null,["^9K","~:shadow-optimize-constants"],null,["^9K","~:elide-asserts"],false,["^9K","~:optimize-constants"],null,["^9K","^1E"],null,["^9K","~:external-config"],null,["^9K","~:tooling-config"],null,["^9K","~:emit-constants"],null,["^9K","~:load-tests"],null,["^9K","~:form-size-threshold"],null,["^9K","~:global-goog-object&array"],null,["^9K","~:data-readers"],null,["^9K","~:infer-externs"],"~:auto",["^9K","^1G"],null,["^9M","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^9K","~:fn-invoke-direct"],null,["^9K","~:source-map"],"/dev/null"]]]