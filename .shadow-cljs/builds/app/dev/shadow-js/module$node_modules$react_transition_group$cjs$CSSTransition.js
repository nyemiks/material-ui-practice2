["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/react-transition-group/cjs/CSSTransition.js"],"~:js","shadow$provide.module$node_modules$react_transition_group$cjs$CSSTransition = function(global, require, module, exports) {\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {default:obj};\n  }\n  function _extends() {\n    _extends = Object.assign || function(target) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i], key;\n        for (key in source) {\n          Object.prototype.hasOwnProperty.call(source, key) && (target[key] = source[key]);\n        }\n      }\n      return target;\n    };\n    return _extends.apply(this, arguments);\n  }\n  function _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    subClass.__proto__ = superClass;\n  }\n  exports.__esModule = !0;\n  exports.default = void 0;\n  global = _interopRequireDefault(require(\"module$node_modules$prop_types$index\"));\n  var _addClass2 = _interopRequireDefault(require(\"module$node_modules$dom_helpers$cjs$addClass\")), _removeClass = _interopRequireDefault(require(\"module$node_modules$dom_helpers$cjs$removeClass\")), _react = _interopRequireDefault(require(\"module$node_modules$react$index\")), _Transition = _interopRequireDefault(require(\"module$node_modules$react_transition_group$cjs$Transition\")), _PropTypes = require(\"module$node_modules$react_transition_group$cjs$utils$PropTypes\"), _reflow = require(\"module$node_modules$react_transition_group$cjs$utils$reflow\"), \n  _addClass = function(node, classes) {\n    return node && classes && classes.split(\" \").forEach(function(c) {\n      return (0,_addClass2.default)(node, c);\n    });\n  }, removeClass = function(node, classes) {\n    return node && classes && classes.split(\" \").forEach(function(c) {\n      return (0,_removeClass.default)(node, c);\n    });\n  };\n  require = function(_React$Component) {\n    function CSSTransition() {\n      for (var _this, _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n      _this.appliedClasses = {appear:{}, enter:{}, exit:{}};\n      _this.onEnter = function(maybeNode, maybeAppearing) {\n        var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0];\n        _this$resolveArgument = _this$resolveArgument[1];\n        _this.removeClasses(node, \"exit\");\n        _this.addClass(node, _this$resolveArgument ? \"appear\" : \"enter\", \"base\");\n        if (_this.props.onEnter) {\n          _this.props.onEnter(maybeNode, maybeAppearing);\n        }\n      };\n      _this.onEntering = function(maybeNode, maybeAppearing) {\n        var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing);\n        _this.addClass(_this$resolveArgument2[0], _this$resolveArgument2[1] ? \"appear\" : \"enter\", \"active\");\n        if (_this.props.onEntering) {\n          _this.props.onEntering(maybeNode, maybeAppearing);\n        }\n      };\n      _this.onEntered = function(maybeNode, maybeAppearing) {\n        var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0];\n        _this$resolveArgument3 = _this$resolveArgument3[1] ? \"appear\" : \"enter\";\n        _this.removeClasses(node, _this$resolveArgument3);\n        _this.addClass(node, _this$resolveArgument3, \"done\");\n        if (_this.props.onEntered) {\n          _this.props.onEntered(maybeNode, maybeAppearing);\n        }\n      };\n      _this.onExit = function(maybeNode) {\n        var node = _this.resolveArguments(maybeNode)[0];\n        _this.removeClasses(node, \"appear\");\n        _this.removeClasses(node, \"enter\");\n        _this.addClass(node, \"exit\", \"base\");\n        if (_this.props.onExit) {\n          _this.props.onExit(maybeNode);\n        }\n      };\n      _this.onExiting = function(maybeNode) {\n        var node = _this.resolveArguments(maybeNode)[0];\n        _this.addClass(node, \"exit\", \"active\");\n        if (_this.props.onExiting) {\n          _this.props.onExiting(maybeNode);\n        }\n      };\n      _this.onExited = function(maybeNode) {\n        var node = _this.resolveArguments(maybeNode)[0];\n        _this.removeClasses(node, \"exit\");\n        _this.addClass(node, \"exit\", \"done\");\n        if (_this.props.onExited) {\n          _this.props.onExited(maybeNode);\n        }\n      };\n      _this.resolveArguments = function(maybeNode, maybeAppearing) {\n        return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];\n      };\n      _this.getClassNames = function(type) {\n        var classNames = _this.props.classNames, isStringClassNames = \"string\" === typeof classNames, baseClassName = isStringClassNames ? (isStringClassNames && classNames ? classNames + \"-\" : \"\") + type : classNames[type];\n        return {baseClassName, activeClassName:isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"], doneClassName:isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"]};\n      };\n      return _this;\n    }\n    _inheritsLoose(CSSTransition, _React$Component);\n    var _proto = CSSTransition.prototype;\n    _proto.addClass = function(node, type, phase) {\n      var className = this.getClassNames(type)[phase + \"ClassName\"], doneClassName = this.getClassNames(\"enter\").doneClassName;\n      \"appear\" === type && \"done\" === phase && doneClassName && (className += \" \" + doneClassName);\n      \"active\" === phase && node && (0,_reflow.forceReflow)(node);\n      className && (this.appliedClasses[type][phase] = className, _addClass(node, className));\n    };\n    _proto.removeClasses = function(node, type) {\n      var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active;\n      _this$appliedClasses$ = _this$appliedClasses$.done;\n      this.appliedClasses[type] = {};\n      baseClassName && removeClass(node, baseClassName);\n      activeClassName && removeClass(node, activeClassName);\n      _this$appliedClasses$ && removeClass(node, _this$appliedClasses$);\n    };\n    _proto.render = function() {\n      var _this$props = this.props;\n      var excluded = [\"classNames\"];\n      if (null == _this$props) {\n        _this$props = {};\n      } else {\n        var target = {}, sourceKeys = Object.keys(_this$props), i;\n        for (i = 0; i < sourceKeys.length; i++) {\n          var key = sourceKeys[i];\n          0 <= excluded.indexOf(key) || (target[key] = _this$props[key]);\n        }\n        _this$props = target;\n      }\n      return _react.default.createElement(_Transition.default, _extends({}, _this$props, {onEnter:this.onEnter, onEntered:this.onEntered, onEntering:this.onEntering, onExit:this.onExit, onExiting:this.onExiting, onExited:this.onExited}));\n    };\n    return CSSTransition;\n  }(_react.default.Component);\n  require.defaultProps = {classNames:\"\"};\n  require.propTypes = _extends({}, _Transition.default.propTypes, {classNames:_PropTypes.classNamesShape, onEnter:global.default.func, onEntering:global.default.func, onEntered:global.default.func, onExit:global.default.func, onExiting:global.default.func, onExited:global.default.func});\n  exports.default = require;\n  module.exports = exports.default;\n};\n","~:source","shadow$provide[\"module$node_modules$react_transition_group$cjs$CSSTransition\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _addClass2 = _interopRequireDefault(require(\"dom-helpers/addClass\"));\n\nvar _removeClass = _interopRequireDefault(require(\"dom-helpers/removeClass\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _Transition = _interopRequireDefault(require(\"./Transition\"));\n\nvar _PropTypes = require(\"./utils/PropTypes\");\n\nvar _reflow = require(\"./utils/reflow\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return (0, _addClass2.default)(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return (0, _removeClass.default)(node, c);\n  });\n};\n/**\n * A transition component inspired by the excellent\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\n * use it if you're using CSS transitions or animations. It's built upon the\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\n * component, so it inherits all of its props.\n *\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\n * and `exit` states of the transition. The first class is applied and then a\n * second `*-active` class in order to activate the CSS transition. After the\n * transition, matching `*-done` class names are applied to persist the\n * transition state.\n *\n * ```jsx\n * function App() {\n *   const [inProp, setInProp] = useState(false);\n *   return (\n *     <div>\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\n *         <div>\n *           {\"I'll receive my-node-* classes\"}\n *         </div>\n *       </CSSTransition>\n *       <button type=\"button\" onClick={() => setInProp(true)}>\n *         Click to Enter\n *       </button>\n *     </div>\n *   );\n * }\n * ```\n *\n * When the `in` prop is set to `true`, the child component will first receive\n * the class `example-enter`, then the `example-enter-active` will be added in\n * the next tick. `CSSTransition` [forces a\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\n * between before adding the `example-enter-active`. This is an important trick\n * because it allows us to transition between `example-enter` and\n * `example-enter-active` even though they were added immediately one after\n * another. Most notably, this is what makes it possible for us to animate\n * _appearance_.\n *\n * ```css\n * .my-node-enter {\n *   opacity: 0;\n * }\n * .my-node-enter-active {\n *   opacity: 1;\n *   transition: opacity 200ms;\n * }\n * .my-node-exit {\n *   opacity: 1;\n * }\n * .my-node-exit-active {\n *   opacity: 0;\n *   transition: opacity 200ms;\n * }\n * ```\n *\n * `*-active` classes represent which styles you want to animate **to**, so it's\n * important to add `transition` declaration only to them, otherwise transitions\n * might not behave as intended! This might not be obvious when the transitions\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\n * the example above (minus `transition`), but it becomes apparent in more\n * complex transitions.\n *\n * **Note**: If you're using the\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\n * prop, make sure to define styles for `.appear-*` classes as well.\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument[0],\n          appearing = _this$resolveArgument[1];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntering = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument2[0],\n          appearing = _this$resolveArgument2[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onEntered = function (maybeNode, maybeAppearing) {\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\n          node = _this$resolveArgument3[0],\n          appearing = _this$resolveArgument3[1];\n\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(maybeNode, maybeAppearing);\n      }\n    };\n\n    _this.onExit = function (maybeNode) {\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument4[0];\n\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(maybeNode);\n      }\n    };\n\n    _this.onExiting = function (maybeNode) {\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument5[0];\n\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(maybeNode);\n      }\n    };\n\n    _this.onExited = function (maybeNode) {\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\n          node = _this$resolveArgument6[0];\n\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(maybeNode);\n      }\n    };\n\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\n      : [maybeNode, maybeAppearing];\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    var _this$getClassNames = this.getClassNames('enter'),\n        doneClassName = _this$getClassNames.doneClassName;\n\n    if (type === 'appear' && phase === 'done' && doneClassName) {\n      className += \" \" + doneClassName;\n    } // This is to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      if (node) (0, _reflow.forceReflow)(node);\n    }\n\n    if (className) {\n      this.appliedClasses[type][phase] = className;\n\n      _addClass(node, className);\n    }\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return /*#__PURE__*/_react.default.createElement(_Transition.default, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(_react.default.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, _Transition.default.propTypes, {\n  /**\n   * The animation classNames applied to the component as it appears, enters,\n   * exits or has finished the transition. A single name can be provided, which\n   * will be suffixed for each stage, e.g. `classNames=\"fade\"` applies:\n   *\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\n   *\n   * A few details to note about how these classes are applied:\n   *\n   * 1. They are _joined_ with the ones that are already defined on the child\n   *    component, so if you want to add some base styles, you can use\n   *    `className` without worrying that it will be overridden.\n   *\n   * 2. If the transition component mounts with `in={false}`, no classes are\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\n   *\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\n   *    allows you to define different behavior for when appearing is done and\n   *    when regular entering is done, using selectors like\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\n   *    an epic entrance animation when element first appears in the DOM using\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\n   *    simply use `fade-enter-done` for defining both cases.\n   *\n   * Each individual classNames can also be specified independently like:\n   *\n   * ```js\n   * classNames={{\n   *  appear: 'my-appear',\n   *  appearActive: 'my-active-appear',\n   *  appearDone: 'my-done-appear',\n   *  enter: 'my-enter',\n   *  enterActive: 'my-active-enter',\n   *  enterDone: 'my-done-enter',\n   *  exit: 'my-exit',\n   *  exitActive: 'my-active-exit',\n   *  exitDone: 'my-done-exit',\n   * }}\n   * ```\n   *\n   * If you want to set these classes using CSS Modules:\n   *\n   * ```js\n   * import styles from './styles.css';\n   * ```\n   *\n   * you might want to use camelCase in your CSS file, that way could simply\n   * spread them instead of listing them one by one:\n   *\n   * ```js\n   * classNames={{ ...styles }}\n   * ```\n   *\n   * @type {string | {\n   *  appear?: string,\n   *  appearActive?: string,\n   *  appearDone?: string,\n   *  enter?: string,\n   *  enterActive?: string,\n   *  enterDone?: string,\n   *  exit?: string,\n   *  exitActive?: string,\n   *  exitDone?: string,\n   * }}\n   */\n  classNames: _PropTypes.classNamesShape,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEnter: _propTypes.default.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\n   * 'appear-active' class is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntering: _propTypes.default.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'enter' or\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\n   *\n   * @type Function(node: HtmlElement, isAppearing: bool)\n   */\n  onEntered: _propTypes.default.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' class is\n   * applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExit: _propTypes.default.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExiting: _propTypes.default.func,\n\n  /**\n   * A `<Transition>` callback fired immediately after the 'exit' classes\n   * are **removed** and the `exit-done` class is added to the DOM node.\n   *\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\n   *\n   * @type Function(node: HtmlElement)\n   */\n  onExited: _propTypes.default.func\n}) : {};\nvar _default = CSSTransition;\nexports.default = _default;\nmodule.exports = exports.default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$dom_helpers$cjs$removeClass","~$module$node_modules$react$index","~$module$node_modules$prop_types$index","~$shadow.js","~$module$node_modules$dom_helpers$cjs$addClass","~$module$node_modules$react_transition_group$cjs$utils$PropTypes","~$module$node_modules$react_transition_group$cjs$Transition","~$module$node_modules$react_transition_group$cjs$utils$reflow"]],"~:properties",["^5",["appear","classNames","getClassNames","onExited","prototype","appliedClasses","activeClassName","__esModule","propTypes","removeClasses","onEntering","onExit","onEntered","doneClassName","resolveArguments","defaultProps","render","onExiting","__proto__","baseClassName","exit","onEnter","addClass","enter","default","constructor"]],"~:compiled-at",1712152510897,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$react_transition_group$cjs$CSSTransition.js\",\n\"lineCount\":138,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/react-transition-group/cjs/CSSTransition.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$react_transition_group$cjs$CSSTransition\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\nvar _propTypes = _interopRequireDefault(require(\\\"prop-types\\\"));\\n\\nvar _addClass2 = _interopRequireDefault(require(\\\"dom-helpers/addClass\\\"));\\n\\nvar _removeClass = _interopRequireDefault(require(\\\"dom-helpers/removeClass\\\"));\\n\\nvar _react = _interopRequireDefault(require(\\\"react\\\"));\\n\\nvar _Transition = _interopRequireDefault(require(\\\"./Transition\\\"));\\n\\nvar _PropTypes = require(\\\"./utils/PropTypes\\\");\\n\\nvar _reflow = require(\\\"./utils/reflow\\\");\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\\n\\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\\n\\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\\n\\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\\n\\nvar _addClass = function addClass(node, classes) {\\n  return node && classes && classes.split(' ').forEach(function (c) {\\n    return (0, _addClass2.default)(node, c);\\n  });\\n};\\n\\nvar removeClass = function removeClass(node, classes) {\\n  return node && classes && classes.split(' ').forEach(function (c) {\\n    return (0, _removeClass.default)(node, c);\\n  });\\n};\\n/**\\n * A transition component inspired by the excellent\\n * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should\\n * use it if you're using CSS transitions or animations. It's built upon the\\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\\n * component, so it inherits all of its props.\\n *\\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\\n * and `exit` states of the transition. The first class is applied and then a\\n * second `*-active` class in order to activate the CSS transition. After the\\n * transition, matching `*-done` class names are applied to persist the\\n * transition state.\\n *\\n * ```jsx\\n * function App() {\\n *   const [inProp, setInProp] = useState(false);\\n *   return (\\n *     <div>\\n *       <CSSTransition in={inProp} timeout={200} classNames=\\\"my-node\\\">\\n *         <div>\\n *           {\\\"I'll receive my-node-* classes\\\"}\\n *         </div>\\n *       </CSSTransition>\\n *       <button type=\\\"button\\\" onClick={() => setInProp(true)}>\\n *         Click to Enter\\n *       </button>\\n *     </div>\\n *   );\\n * }\\n * ```\\n *\\n * When the `in` prop is set to `true`, the child component will first receive\\n * the class `example-enter`, then the `example-enter-active` will be added in\\n * the next tick. `CSSTransition` [forces a\\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\\n * between before adding the `example-enter-active`. This is an important trick\\n * because it allows us to transition between `example-enter` and\\n * `example-enter-active` even though they were added immediately one after\\n * another. Most notably, this is what makes it possible for us to animate\\n * _appearance_.\\n *\\n * ```css\\n * .my-node-enter {\\n *   opacity: 0;\\n * }\\n * .my-node-enter-active {\\n *   opacity: 1;\\n *   transition: opacity 200ms;\\n * }\\n * .my-node-exit {\\n *   opacity: 1;\\n * }\\n * .my-node-exit-active {\\n *   opacity: 0;\\n *   transition: opacity 200ms;\\n * }\\n * ```\\n *\\n * `*-active` classes represent which styles you want to animate **to**, so it's\\n * important to add `transition` declaration only to them, otherwise transitions\\n * might not behave as intended! This might not be obvious when the transitions\\n * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in\\n * the example above (minus `transition`), but it becomes apparent in more\\n * complex transitions.\\n *\\n * **Note**: If you're using the\\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\\n * prop, make sure to define styles for `.appear-*` classes as well.\\n */\\n\\n\\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\\n  _inheritsLoose(CSSTransition, _React$Component);\\n\\n  function CSSTransition() {\\n    var _this;\\n\\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\\n      args[_key] = arguments[_key];\\n    }\\n\\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\\n    _this.appliedClasses = {\\n      appear: {},\\n      enter: {},\\n      exit: {}\\n    };\\n\\n    _this.onEnter = function (maybeNode, maybeAppearing) {\\n      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),\\n          node = _this$resolveArgument[0],\\n          appearing = _this$resolveArgument[1];\\n\\n      _this.removeClasses(node, 'exit');\\n\\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\\n\\n      if (_this.props.onEnter) {\\n        _this.props.onEnter(maybeNode, maybeAppearing);\\n      }\\n    };\\n\\n    _this.onEntering = function (maybeNode, maybeAppearing) {\\n      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),\\n          node = _this$resolveArgument2[0],\\n          appearing = _this$resolveArgument2[1];\\n\\n      var type = appearing ? 'appear' : 'enter';\\n\\n      _this.addClass(node, type, 'active');\\n\\n      if (_this.props.onEntering) {\\n        _this.props.onEntering(maybeNode, maybeAppearing);\\n      }\\n    };\\n\\n    _this.onEntered = function (maybeNode, maybeAppearing) {\\n      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),\\n          node = _this$resolveArgument3[0],\\n          appearing = _this$resolveArgument3[1];\\n\\n      var type = appearing ? 'appear' : 'enter';\\n\\n      _this.removeClasses(node, type);\\n\\n      _this.addClass(node, type, 'done');\\n\\n      if (_this.props.onEntered) {\\n        _this.props.onEntered(maybeNode, maybeAppearing);\\n      }\\n    };\\n\\n    _this.onExit = function (maybeNode) {\\n      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),\\n          node = _this$resolveArgument4[0];\\n\\n      _this.removeClasses(node, 'appear');\\n\\n      _this.removeClasses(node, 'enter');\\n\\n      _this.addClass(node, 'exit', 'base');\\n\\n      if (_this.props.onExit) {\\n        _this.props.onExit(maybeNode);\\n      }\\n    };\\n\\n    _this.onExiting = function (maybeNode) {\\n      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),\\n          node = _this$resolveArgument5[0];\\n\\n      _this.addClass(node, 'exit', 'active');\\n\\n      if (_this.props.onExiting) {\\n        _this.props.onExiting(maybeNode);\\n      }\\n    };\\n\\n    _this.onExited = function (maybeNode) {\\n      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),\\n          node = _this$resolveArgument6[0];\\n\\n      _this.removeClasses(node, 'exit');\\n\\n      _this.addClass(node, 'exit', 'done');\\n\\n      if (_this.props.onExited) {\\n        _this.props.onExited(maybeNode);\\n      }\\n    };\\n\\n    _this.resolveArguments = function (maybeNode, maybeAppearing) {\\n      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`\\n      : [maybeNode, maybeAppearing];\\n    };\\n\\n    _this.getClassNames = function (type) {\\n      var classNames = _this.props.classNames;\\n      var isStringClassNames = typeof classNames === 'string';\\n      var prefix = isStringClassNames && classNames ? classNames + \\\"-\\\" : '';\\n      var baseClassName = isStringClassNames ? \\\"\\\" + prefix + type : classNames[type];\\n      var activeClassName = isStringClassNames ? baseClassName + \\\"-active\\\" : classNames[type + \\\"Active\\\"];\\n      var doneClassName = isStringClassNames ? baseClassName + \\\"-done\\\" : classNames[type + \\\"Done\\\"];\\n      return {\\n        baseClassName: baseClassName,\\n        activeClassName: activeClassName,\\n        doneClassName: doneClassName\\n      };\\n    };\\n\\n    return _this;\\n  }\\n\\n  var _proto = CSSTransition.prototype;\\n\\n  _proto.addClass = function addClass(node, type, phase) {\\n    var className = this.getClassNames(type)[phase + \\\"ClassName\\\"];\\n\\n    var _this$getClassNames = this.getClassNames('enter'),\\n        doneClassName = _this$getClassNames.doneClassName;\\n\\n    if (type === 'appear' && phase === 'done' && doneClassName) {\\n      className += \\\" \\\" + doneClassName;\\n    } // This is to force a repaint,\\n    // which is necessary in order to transition styles when adding a class name.\\n\\n\\n    if (phase === 'active') {\\n      if (node) (0, _reflow.forceReflow)(node);\\n    }\\n\\n    if (className) {\\n      this.appliedClasses[type][phase] = className;\\n\\n      _addClass(node, className);\\n    }\\n  };\\n\\n  _proto.removeClasses = function removeClasses(node, type) {\\n    var _this$appliedClasses$ = this.appliedClasses[type],\\n        baseClassName = _this$appliedClasses$.base,\\n        activeClassName = _this$appliedClasses$.active,\\n        doneClassName = _this$appliedClasses$.done;\\n    this.appliedClasses[type] = {};\\n\\n    if (baseClassName) {\\n      removeClass(node, baseClassName);\\n    }\\n\\n    if (activeClassName) {\\n      removeClass(node, activeClassName);\\n    }\\n\\n    if (doneClassName) {\\n      removeClass(node, doneClassName);\\n    }\\n  };\\n\\n  _proto.render = function render() {\\n    var _this$props = this.props,\\n        _ = _this$props.classNames,\\n        props = _objectWithoutPropertiesLoose(_this$props, [\\\"classNames\\\"]);\\n\\n    return /*#__PURE__*/_react.default.createElement(_Transition.default, _extends({}, props, {\\n      onEnter: this.onEnter,\\n      onEntered: this.onEntered,\\n      onEntering: this.onEntering,\\n      onExit: this.onExit,\\n      onExiting: this.onExiting,\\n      onExited: this.onExited\\n    }));\\n  };\\n\\n  return CSSTransition;\\n}(_react.default.Component);\\n\\nCSSTransition.defaultProps = {\\n  classNames: ''\\n};\\nCSSTransition.propTypes = process.env.NODE_ENV !== \\\"production\\\" ? _extends({}, _Transition.default.propTypes, {\\n  /**\\n   * The animation classNames applied to the component as it appears, enters,\\n   * exits or has finished the transition. A single name can be provided, which\\n   * will be suffixed for each stage, e.g. `classNames=\\\"fade\\\"` applies:\\n   *\\n   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`\\n   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`\\n   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`\\n   *\\n   * A few details to note about how these classes are applied:\\n   *\\n   * 1. They are _joined_ with the ones that are already defined on the child\\n   *    component, so if you want to add some base styles, you can use\\n   *    `className` without worrying that it will be overridden.\\n   *\\n   * 2. If the transition component mounts with `in={false}`, no classes are\\n   *    applied yet. You might be expecting `*-exit-done`, but if you think\\n   *    about it, a component cannot finish exiting if it hasn't entered yet.\\n   *\\n   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This\\n   *    allows you to define different behavior for when appearing is done and\\n   *    when regular entering is done, using selectors like\\n   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply\\n   *    an epic entrance animation when element first appears in the DOM using\\n   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\\n   *    simply use `fade-enter-done` for defining both cases.\\n   *\\n   * Each individual classNames can also be specified independently like:\\n   *\\n   * ```js\\n   * classNames={{\\n   *  appear: 'my-appear',\\n   *  appearActive: 'my-active-appear',\\n   *  appearDone: 'my-done-appear',\\n   *  enter: 'my-enter',\\n   *  enterActive: 'my-active-enter',\\n   *  enterDone: 'my-done-enter',\\n   *  exit: 'my-exit',\\n   *  exitActive: 'my-active-exit',\\n   *  exitDone: 'my-done-exit',\\n   * }}\\n   * ```\\n   *\\n   * If you want to set these classes using CSS Modules:\\n   *\\n   * ```js\\n   * import styles from './styles.css';\\n   * ```\\n   *\\n   * you might want to use camelCase in your CSS file, that way could simply\\n   * spread them instead of listing them one by one:\\n   *\\n   * ```js\\n   * classNames={{ ...styles }}\\n   * ```\\n   *\\n   * @type {string | {\\n   *  appear?: string,\\n   *  appearActive?: string,\\n   *  appearDone?: string,\\n   *  enter?: string,\\n   *  enterActive?: string,\\n   *  enterDone?: string,\\n   *  exit?: string,\\n   *  exitActive?: string,\\n   *  exitDone?: string,\\n   * }}\\n   */\\n  classNames: _PropTypes.classNamesShape,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\\n   * applied.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\\n   *\\n   * @type Function(node: HtmlElement, isAppearing: bool)\\n   */\\n  onEnter: _propTypes.default.func,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\\n   * 'appear-active' class is applied.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\\n   *\\n   * @type Function(node: HtmlElement, isAppearing: bool)\\n   */\\n  onEntering: _propTypes.default.func,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'enter' or\\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed.\\n   *\\n   * @type Function(node: HtmlElement, isAppearing: bool)\\n   */\\n  onEntered: _propTypes.default.func,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'exit' class is\\n   * applied.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\\n   *\\n   * @type Function(node: HtmlElement)\\n   */\\n  onExit: _propTypes.default.func,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\\n   *\\n   * @type Function(node: HtmlElement)\\n   */\\n  onExiting: _propTypes.default.func,\\n\\n  /**\\n   * A `<Transition>` callback fired immediately after the 'exit' classes\\n   * are **removed** and the `exit-done` class is added to the DOM node.\\n   *\\n   * **Note**: when `nodeRef` prop is passed, `node` is not passed\\n   *\\n   * @type Function(node: HtmlElement)\\n   */\\n  onExited: _propTypes.default.func\\n}) : {};\\nvar _default = CSSTransition;\\nexports.default = _default;\\nmodule.exports = exports.default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"default\",\"_extends\",\"Object\",\"assign\",\"target\",\"i\",\"arguments\",\"length\",\"source\",\"key\",\"prototype\",\"hasOwnProperty\",\"call\",\"apply\",\"_inheritsLoose\",\"subClass\",\"superClass\",\"create\",\"constructor\",\"__proto__\",\"_propTypes\",\"_addClass2\",\"_removeClass\",\"_react\",\"_Transition\",\"_PropTypes\",\"_reflow\",\"_addClass\",\"node\",\"classes\",\"split\",\"forEach\",\"c\",\"removeClass\",\"CSSTransition\",\"_React$Component\",\"_this\",\"_len\",\"args\",\"Array\",\"_key\",\"concat\",\"appliedClasses\",\"appear\",\"enter\",\"exit\",\"onEnter\",\"_this.onEnter\",\"maybeNode\",\"maybeAppearing\",\"_this$resolveArgument\",\"resolveArguments\",\"appearing\",\"removeClasses\",\"addClass\",\"props\",\"onEntering\",\"_this.onEntering\",\"_this$resolveArgument2\",\"type\",\"onEntered\",\"_this.onEntered\",\"_this$resolveArgument3\",\"onExit\",\"_this.onExit\",\"_this$resolveArgument4\",\"onExiting\",\"_this.onExiting\",\"_this$resolveArgument5\",\"onExited\",\"_this.onExited\",\"_this$resolveArgument6\",\"_this.resolveArguments\",\"nodeRef\",\"current\",\"getClassNames\",\"_this.getClassNames\",\"classNames\",\"isStringClassNames\",\"baseClassName\",\"prefix\",\"activeClassName\",\"doneClassName\",\"_proto\",\"_proto.addClass\",\"phase\",\"className\",\"_this$getClassNames\",\"forceReflow\",\"_proto.removeClasses\",\"_this$appliedClasses$\",\"base\",\"active\",\"done\",\"render\",\"_proto.render\",\"_this$props\",\"sourceKeys\",\"keys\",\"excluded\",\"indexOf\",\"createElement\",\"Component\",\"defaultProps\",\"propTypes\",\"classNamesShape\",\"func\"]\n}\n"]