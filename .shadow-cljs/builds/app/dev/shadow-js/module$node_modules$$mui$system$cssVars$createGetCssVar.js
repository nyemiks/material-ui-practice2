["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/system/cssVars/createGetCssVar.js"],"~:js","shadow$provide.module$node_modules$$mui$system$cssVars$createGetCssVar = function(global, require, module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.default = function(prefix = \"\") {\n    function appendVar(...vars) {\n      if (!vars.length) {\n        return \"\";\n      }\n      const value = vars[0];\n      return \"string\" !== typeof value || value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/) ? `, ${value}` : `, var(--${prefix ? `${prefix}-` : \"\"}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return (field, ...fallbacks) => `var(--${prefix ? `${prefix}-` : \"\"}${field}${appendVar(...fallbacks)})`;\n  };\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$system$cssVars$createGetCssVar\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGetCssVar;\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nfunction createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n    const value = vars[0];\n    if (typeof value === 'string' && !value.match(/(#|\\(|\\)|(-?(\\d*\\.)?\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\d*\\.)?\\d+)$|(\\d+ \\d+ \\d+)/)) {\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\n    }\n    return `, ${value}`;\n  }\n\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n  const getCssVar = (field, ...fallbacks) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\n  };\n  return getCssVar;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1712152510738,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$system$cssVars$createGetCssVar.js\",\n\"lineCount\":14,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,GAA4E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGpHC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,SAAQI,CAAAA,OAAR,GAKAC,QAAwB,CAACC,MAAA,GAAS,EAAV,CAAc;AACpCC,YAASA,UAAS,CAAC,GAAGC,IAAJ,CAAU;AAC1B,UAAI,CAACA,IAAKC,CAAAA,MAAV;AACE,eAAO,EAAP;AADF;AAGA,YAAMN,QAAQK,IAAA,CAAK,CAAL,CAAd;AACA,aAAqB,QAArB,KAAI,MAAOL,MAAX,IAAkCA,KAAMO,CAAAA,KAAN,CAAY,6GAAZ,CAAlC,GAGQ,KAAIP,KAAJ,EAHR,GACU,WAAUG,MAAA,GAAU,GAAEA,MAAF,GAAV,GAAwB,EAAlC,GAAuCH,KAAvC,GAA+CI,SAAA,CAAU,GAAGC,IAAKG,CAAAA,KAAL,CAAW,CAAX,CAAb,CAA/C,GADV;AAL0B;AAe5B,WAHkB,CAACC,KAAD,EAAQ,GAAGC,SAAX,CAAAC,IACR,SAAQR,MAAA,GAAU,GAAEA,MAAF,GAAV,GAAwB,EAAhC,GAAqCM,KAArC,GAA6CL,SAAA,CAAU,GAAGM,SAAb,CAA7C,GAEV;AAhBoC,GALtC;AANoH,CAApH;;\",\n\"sources\":[\"node_modules/@mui/system/cssVars/createGetCssVar.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$system$cssVars$createGetCssVar\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = createGetCssVar;\\n/**\\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\\n * and they does not need to remember the prefix (defined once).\\n */\\nfunction createGetCssVar(prefix = '') {\\n  function appendVar(...vars) {\\n    if (!vars.length) {\\n      return '';\\n    }\\n    const value = vars[0];\\n    if (typeof value === 'string' && !value.match(/(#|\\\\(|\\\\)|(-?(\\\\d*\\\\.)?\\\\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\\\\d*\\\\.)?\\\\d+)$|(\\\\d+ \\\\d+ \\\\d+)/)) {\\n      return `, var(--${prefix ? `${prefix}-` : ''}${value}${appendVar(...vars.slice(1))})`;\\n    }\\n    return `, ${value}`;\\n  }\\n\\n  // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\\n  const getCssVar = (field, ...fallbacks) => {\\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...fallbacks)})`;\\n  };\\n  return getCssVar;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"createGetCssVar\",\"prefix\",\"appendVar\",\"vars\",\"length\",\"match\",\"slice\",\"field\",\"fallbacks\",\"getCssVar\"]\n}\n"]