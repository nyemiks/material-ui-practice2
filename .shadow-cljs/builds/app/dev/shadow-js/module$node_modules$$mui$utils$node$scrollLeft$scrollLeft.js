["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/utils/node/scrollLeft/scrollLeft.js"],"~:js","shadow$provide.module$node_modules$$mui$utils$node$scrollLeft$scrollLeft = function(global, require, module, exports) {\n  function detectScrollType() {\n    if (cachedType) {\n      return cachedType;\n    }\n    const dummy = document.createElement(\"div\"), container = document.createElement(\"div\");\n    container.style.width = \"10px\";\n    container.style.height = \"1px\";\n    dummy.appendChild(container);\n    dummy.dir = \"rtl\";\n    dummy.style.fontSize = \"14px\";\n    dummy.style.width = \"4px\";\n    dummy.style.height = \"1px\";\n    dummy.style.position = \"absolute\";\n    dummy.style.top = \"-1000px\";\n    dummy.style.overflow = \"scroll\";\n    document.body.appendChild(dummy);\n    cachedType = \"reverse\";\n    0 < dummy.scrollLeft ? cachedType = \"default\" : (dummy.scrollLeft = 1, 0 === dummy.scrollLeft && (cachedType = \"negative\"));\n    document.body.removeChild(dummy);\n    return cachedType;\n  }\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.detectScrollType = detectScrollType;\n  exports.getNormalizedScrollLeft = function(element, direction) {\n    const scrollLeft = element.scrollLeft;\n    if (\"rtl\" !== direction) {\n      return scrollLeft;\n    }\n    switch(detectScrollType()) {\n      case \"negative\":\n        return element.scrollWidth - element.clientWidth + scrollLeft;\n      case \"reverse\":\n        return element.scrollWidth - element.clientWidth - scrollLeft;\n      default:\n        return scrollLeft;\n    }\n  };\n  let cachedType;\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$utils$node$scrollLeft$scrollLeft\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectScrollType = detectScrollType;\nexports.getNormalizedScrollLeft = getNormalizedScrollLeft;\n// Source from https://github.com/alitaheri/normalize-scroll-left\nlet cachedType;\n\n/**\n * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\n *\n * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.\n *\n * Type             | <- Most Left | Most Right -> | Initial\n * ---------------- | ------------ | ------------- | -------\n * default          | 0            | 100           | 100\n * negative (spec*) | -100         | 0             | 0\n * reverse          | 100          | 0             | 0\n *\n * Edge 85: default\n * Safari 14: negative\n * Chrome 85: negative\n * Firefox 81: negative\n * IE11: reverse\n *\n * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll\n */\nfunction detectScrollType() {\n  if (cachedType) {\n    return cachedType;\n  }\n  const dummy = document.createElement('div');\n  const container = document.createElement('div');\n  container.style.width = '10px';\n  container.style.height = '1px';\n  dummy.appendChild(container);\n  dummy.dir = 'rtl';\n  dummy.style.fontSize = '14px';\n  dummy.style.width = '4px';\n  dummy.style.height = '1px';\n  dummy.style.position = 'absolute';\n  dummy.style.top = '-1000px';\n  dummy.style.overflow = 'scroll';\n  document.body.appendChild(dummy);\n  cachedType = 'reverse';\n  if (dummy.scrollLeft > 0) {\n    cachedType = 'default';\n  } else {\n    dummy.scrollLeft = 1;\n    if (dummy.scrollLeft === 0) {\n      cachedType = 'negative';\n    }\n  }\n  document.body.removeChild(dummy);\n  return cachedType;\n}\n\n// Based on https://stackoverflow.com/a/24394376\nfunction getNormalizedScrollLeft(element, direction) {\n  const scrollLeft = element.scrollLeft;\n\n  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior\n  if (direction !== 'rtl') {\n    return scrollLeft;\n  }\n  const type = detectScrollType();\n  switch (type) {\n    case 'negative':\n      return element.scrollWidth - element.clientWidth + scrollLeft;\n    case 'reverse':\n      return element.scrollWidth - element.clientWidth - scrollLeft;\n    default:\n      return scrollLeft;\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["width","top","height","getNormalizedScrollLeft","scrollLeft","__esModule","position","detectScrollType","value","fontSize","dir","overflow"]],"~:compiled-at",1712152510641,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$utils$node$scrollLeft$scrollLeft.js\",\n\"lineCount\":41,\n\"mappings\":\"AAAAA,cAAA,CAAA,yDAAA,GAA8E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AA8BtHC,UAASA,iBAAgB,EAAG;AAC1B,QAAIC,UAAJ;AACE,aAAOA,UAAP;AADF;AAGA,UAAMC,QAAQC,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CAAd,EACMC,YAAYF,QAASC,CAAAA,aAAT,CAAuB,KAAvB,CADlB;AAEAC,aAAUC,CAAAA,KAAMC,CAAAA,KAAhB,GAAwB,MAAxB;AACAF,aAAUC,CAAAA,KAAME,CAAAA,MAAhB,GAAyB,KAAzB;AACAN,SAAMO,CAAAA,WAAN,CAAkBJ,SAAlB,CAAA;AACAH,SAAMQ,CAAAA,GAAN,GAAY,KAAZ;AACAR,SAAMI,CAAAA,KAAMK,CAAAA,QAAZ,GAAuB,MAAvB;AACAT,SAAMI,CAAAA,KAAMC,CAAAA,KAAZ,GAAoB,KAApB;AACAL,SAAMI,CAAAA,KAAME,CAAAA,MAAZ,GAAqB,KAArB;AACAN,SAAMI,CAAAA,KAAMM,CAAAA,QAAZ,GAAuB,UAAvB;AACAV,SAAMI,CAAAA,KAAMO,CAAAA,GAAZ,GAAkB,SAAlB;AACAX,SAAMI,CAAAA,KAAMQ,CAAAA,QAAZ,GAAuB,QAAvB;AACAX,YAASY,CAAAA,IAAKN,CAAAA,WAAd,CAA0BP,KAA1B,CAAA;AACAD,cAAA,GAAa,SAAb;AACuB,KAAvB,GAAIC,KAAMc,CAAAA,UAAV,GACEf,UADF,GACe,SADf,IAGEC,KAAMc,CAAAA,UACN,GADmB,CACnB,EAAyB,CAAzB,KAAId,KAAMc,CAAAA,UAAV,KACEf,UADF,GACe,UADf,CAJF,CAAA;AAQAE,YAASY,CAAAA,IAAKE,CAAAA,WAAd,CAA0Bf,KAA1B,CAAA;AACA,WAAOD,UAAP;AA3B0B;AA3B5BiB,QAAOC,CAAAA,cAAP,CAAsBpB,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CqB,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGArB,SAAQC,CAAAA,gBAAR,GAA2BA,gBAA3B;AACAD,SAAQsB,CAAAA,uBAAR,GAsDAA,QAAgC,CAACC,OAAD,EAAUC,SAAV,CAAqB;AACnD,UAAMP,aAAaM,OAAQN,CAAAA,UAA3B;AAGA,QAAkB,KAAlB,KAAIO,SAAJ;AACE,aAAOP,UAAP;AADF;AAIA,WADahB,gBAAAwB,EACb;AACE,WAAK,UAAL;AACE,eAAOF,OAAQG,CAAAA,WAAf,GAA6BH,OAAQI,CAAAA,WAArC,GAAmDV,UAAnD;AACF,WAAK,SAAL;AACE,eAAOM,OAAQG,CAAAA,WAAf,GAA6BH,OAAQI,CAAAA,WAArC,GAAmDV,UAAnD;AACF;AACE,eAAOA,UAAP;AANJ;AARmD,GAtDrD;AAEA,MAAIf,UAAJ;AATsH,CAAtH;;\",\n\"sources\":[\"node_modules/@mui/utils/node/scrollLeft/scrollLeft.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$utils$node$scrollLeft$scrollLeft\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.detectScrollType = detectScrollType;\\nexports.getNormalizedScrollLeft = getNormalizedScrollLeft;\\n// Source from https://github.com/alitaheri/normalize-scroll-left\\nlet cachedType;\\n\\n/**\\n * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type\\n *\\n * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.\\n *\\n * Type             | <- Most Left | Most Right -> | Initial\\n * ---------------- | ------------ | ------------- | -------\\n * default          | 0            | 100           | 100\\n * negative (spec*) | -100         | 0             | 0\\n * reverse          | 100          | 0             | 0\\n *\\n * Edge 85: default\\n * Safari 14: negative\\n * Chrome 85: negative\\n * Firefox 81: negative\\n * IE11: reverse\\n *\\n * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll\\n */\\nfunction detectScrollType() {\\n  if (cachedType) {\\n    return cachedType;\\n  }\\n  const dummy = document.createElement('div');\\n  const container = document.createElement('div');\\n  container.style.width = '10px';\\n  container.style.height = '1px';\\n  dummy.appendChild(container);\\n  dummy.dir = 'rtl';\\n  dummy.style.fontSize = '14px';\\n  dummy.style.width = '4px';\\n  dummy.style.height = '1px';\\n  dummy.style.position = 'absolute';\\n  dummy.style.top = '-1000px';\\n  dummy.style.overflow = 'scroll';\\n  document.body.appendChild(dummy);\\n  cachedType = 'reverse';\\n  if (dummy.scrollLeft > 0) {\\n    cachedType = 'default';\\n  } else {\\n    dummy.scrollLeft = 1;\\n    if (dummy.scrollLeft === 0) {\\n      cachedType = 'negative';\\n    }\\n  }\\n  document.body.removeChild(dummy);\\n  return cachedType;\\n}\\n\\n// Based on https://stackoverflow.com/a/24394376\\nfunction getNormalizedScrollLeft(element, direction) {\\n  const scrollLeft = element.scrollLeft;\\n\\n  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior\\n  if (direction !== 'rtl') {\\n    return scrollLeft;\\n  }\\n  const type = detectScrollType();\\n  switch (type) {\\n    case 'negative':\\n      return element.scrollWidth - element.clientWidth + scrollLeft;\\n    case 'reverse':\\n      return element.scrollWidth - element.clientWidth - scrollLeft;\\n    default:\\n      return scrollLeft;\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"detectScrollType\",\"cachedType\",\"dummy\",\"document\",\"createElement\",\"container\",\"style\",\"width\",\"height\",\"appendChild\",\"dir\",\"fontSize\",\"position\",\"top\",\"overflow\",\"body\",\"scrollLeft\",\"removeChild\",\"Object\",\"defineProperty\",\"value\",\"getNormalizedScrollLeft\",\"element\",\"direction\",\"type\",\"scrollWidth\",\"clientWidth\"]\n}\n"]