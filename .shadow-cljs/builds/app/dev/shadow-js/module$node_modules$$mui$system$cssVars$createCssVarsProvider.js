["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/system/cssVars/createCssVarsProvider.js"],"~:js","shadow$provide.module$node_modules$$mui$system$cssVars$createCssVarsProvider = function(global, require, module, exports) {\n  function _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) {\n      return null;\n    }\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n      return e ? t : r;\n    })(e);\n  }\n  function _interopRequireWildcard(e, r) {\n    if (!r && e && e.__esModule) {\n      return e;\n    }\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) {\n      return {default:e};\n    }\n    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {\n      return r.get(e);\n    }\n    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;\n    for (u in e) {\n      if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n      }\n    }\n    return n.default = e, r && r.set(e, n), n;\n  }\n  global = require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.DISABLE_CSS_TRANSITION = void 0;\n  exports.default = function(options) {\n    function CssVarsProvider(props) {\n      const {children, theme:themeProp = defaultTheme, modeStorageKey = defaultModeStorageKey, colorSchemeStorageKey = defaultColorSchemeStorageKey, attribute = defaultAttribute, defaultMode = designSystemMode, defaultColorScheme = designSystemColorScheme, disableTransitionOnChange = designSystemTransitionOnChange, storageWindow = \"undefined\" === typeof window ? void 0 : window, documentNode = \"undefined\" === typeof document ? void 0 : document, colorSchemeNode = \"undefined\" === typeof document ? \n      void 0 : document.documentElement, colorSchemeSelector = \":root\", disableNestedContext = !1, disableStyleSheetGeneration = !1} = props, hasMounted = React.useRef(!1);\n      var upperTheme = (0,_privateTheming.useTheme)(), ctx = React.useContext(ColorSchemeContext);\n      props = !!ctx && !disableNestedContext;\n      const scopedTheme = themeProp[themeId];\n      var _ref = scopedTheme || themeProp;\n      const {colorSchemes = {}, components = {}, generateCssVars = () => ({vars:{}, css:{}}), cssVarPrefix} = _ref;\n      _ref = (0,_objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n      const allColorSchemes = Object.keys(colorSchemes), defaultLightColorScheme = \"string\" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.light, defaultDarkColorScheme = \"string\" === typeof defaultColorScheme ? defaultColorScheme : defaultColorScheme.dark, {mode:stateMode, setMode, systemMode, lightColorScheme, darkColorScheme, colorScheme:stateColorScheme, setColorScheme} = (0,_useCurrentColorScheme.default)({supportedColorSchemes:allColorSchemes, defaultLightColorScheme, \n      defaultDarkColorScheme, modeStorageKey, colorSchemeStorageKey, defaultMode, storageWindow});\n      let mode = stateMode, colorScheme = stateColorScheme;\n      props && (mode = ctx.mode, colorScheme = ctx.colorScheme);\n      ctx = mode ? mode : \"system\" === defaultMode ? designSystemMode : defaultMode;\n      const calculatedColorScheme = colorScheme ? colorScheme : \"dark\" === ctx ? defaultDarkColorScheme : defaultLightColorScheme, {css:rootCss, vars:rootVars} = generateCssVars(), theme = (0,_extends2.default)({}, _ref, {components, colorSchemes, cssVarPrefix, vars:rootVars, getColorSchemeSelector:targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`}), defaultColorSchemeStyleSheet = {}, otherColorSchemesStyleSheet = {};\n      Object.entries(colorSchemes).forEach(([key, scheme]) => {\n        const {css, vars} = generateCssVars(key);\n        theme.vars = (0,_deepmerge.default)(theme.vars, vars);\n        key === calculatedColorScheme && (Object.keys(scheme).forEach(schemeKey => {\n          theme[schemeKey] = scheme[schemeKey] && \"object\" === typeof scheme[schemeKey] ? (0,_extends2.default)({}, theme[schemeKey], scheme[schemeKey]) : scheme[schemeKey];\n        }), theme.palette && (theme.palette.colorScheme = key));\n        if (key === (\"string\" === typeof defaultColorScheme ? defaultColorScheme : \"dark\" === defaultMode ? defaultColorScheme.dark : defaultColorScheme.light)) {\n          if (excludeVariablesFromRoot) {\n            const excludedVariables = {};\n            excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n              excludedVariables[cssVar] = css[cssVar];\n              delete css[cssVar];\n            });\n            defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n          }\n          defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n        } else {\n          otherColorSchemesStyleSheet[`${\":root\" === colorSchemeSelector ? \"\" : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n        }\n      });\n      theme.vars = (0,_deepmerge.default)(theme.vars, rootVars);\n      React.useEffect(() => {\n        colorScheme && colorSchemeNode && colorSchemeNode.setAttribute(attribute, colorScheme);\n      }, [colorScheme, attribute, colorSchemeNode]);\n      React.useEffect(() => {\n        let timer;\n        if (disableTransitionOnChange && hasMounted.current && documentNode) {\n          const css = documentNode.createElement(\"style\");\n          css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n          documentNode.head.appendChild(css);\n          window.getComputedStyle(documentNode.body);\n          timer = setTimeout(() => {\n            documentNode.head.removeChild(css);\n          }, 1);\n        }\n        return () => {\n          clearTimeout(timer);\n        };\n      }, [colorScheme, disableTransitionOnChange, documentNode]);\n      React.useEffect(() => {\n        hasMounted.current = !0;\n        return () => {\n          hasMounted.current = !1;\n        };\n      }, []);\n      ctx = React.useMemo(() => ({allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode}), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n      _ref = !0;\n      if (disableStyleSheetGeneration || props && (null == upperTheme ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n        _ref = !1;\n      }\n      upperTheme = (0,_jsxRuntime.jsxs)(React.Fragment, {children:[_ref && (0,_jsxRuntime.jsxs)(React.Fragment, {children:[(0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:{[colorSchemeSelector]:rootCss}}), (0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:defaultColorSchemeStyleSheet}), (0,_jsxRuntime.jsx)(_styledEngine.GlobalStyles, {styles:otherColorSchemesStyleSheet})]}), (0,_jsxRuntime.jsx)(_ThemeProvider.default, {themeId:scopedTheme ? themeId : void 0, theme:resolveTheme ? resolveTheme(theme) : \n      theme, children})]});\n      return props ? upperTheme : (0,_jsxRuntime.jsx)(ColorSchemeContext.Provider, {value:ctx, children:upperTheme});\n    }\n    const {themeId, theme:defaultTheme = {}, attribute:defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE, modeStorageKey:defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY, colorSchemeStorageKey:defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY, defaultMode:designSystemMode = \"light\", defaultColorScheme:designSystemColorScheme, disableTransitionOnChange:designSystemTransitionOnChange = !1, resolveTheme, excludeVariablesFromRoot} = \n    options;\n    (!defaultTheme.colorSchemes || \"string\" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[designSystemColorScheme] || \"object\" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[null == designSystemColorScheme ? void 0 : designSystemColorScheme.light] || \"object\" === typeof designSystemColorScheme && !defaultTheme.colorSchemes[null == designSystemColorScheme ? void 0 : designSystemColorScheme.dark]) && console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n    const ColorSchemeContext = React.createContext(void 0);\n    ColorSchemeContext.displayName = \"ColorSchemeContext\";\n    CssVarsProvider.propTypes = {attribute:_propTypes.default.string, children:_propTypes.default.node, colorSchemeNode:_propTypes.default.any, colorSchemeSelector:_propTypes.default.string, colorSchemeStorageKey:_propTypes.default.string, defaultColorScheme:_propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]), defaultMode:_propTypes.default.string, disableNestedContext:_propTypes.default.bool, disableStyleSheetGeneration:_propTypes.default.bool, disableTransitionOnChange:_propTypes.default.bool, \n    documentNode:_propTypes.default.any, modeStorageKey:_propTypes.default.string, storageWindow:_propTypes.default.any, theme:_propTypes.default.object};\n    const defaultLightColorScheme = \"string\" === typeof designSystemColorScheme ? designSystemColorScheme : designSystemColorScheme.light, defaultDarkColorScheme = \"string\" === typeof designSystemColorScheme ? designSystemColorScheme : designSystemColorScheme.dark;\n    return {CssVarsProvider, useColorScheme:() => {\n      const value = React.useContext(ColorSchemeContext);\n      if (!value) {\n        throw Error(\"MUI: `useColorScheme` must be called under \\x3cCssVarsProvider /\\x3e\");\n      }\n      return value;\n    }, getInitColorSchemeScript:params => (0,_getInitColorSchemeScript.default)((0,_extends2.default)({attribute:defaultAttribute, colorSchemeStorageKey:defaultColorSchemeStorageKey, defaultMode:designSystemMode, defaultLightColorScheme, defaultDarkColorScheme, modeStorageKey:defaultModeStorageKey}, params))};\n  };\n  var _extends2 = global(require(\"module$node_modules$$babel$runtime$helpers$extends\")), _objectWithoutPropertiesLoose2 = global(require(\"module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose\"));\n  global(require(\"module$node_modules$$mui$utils$node$formatMuiErrorMessage$index\"));\n  var React = _interopRequireWildcard(require(\"module$node_modules$react$index\")), _propTypes = global(require(\"module$node_modules$prop_types$index\")), _deepmerge = global(require(\"module$node_modules$$mui$utils$node$deepmerge$index\")), _styledEngine = require(\"module$node_modules$$mui$styled_engine$node$index\"), _privateTheming = require(\"module$node_modules$$mui$private_theming$node$index\"), _ThemeProvider = global(require(\"module$node_modules$$mui$system$ThemeProvider$index\")), _getInitColorSchemeScript = \n  _interopRequireWildcard(require(\"module$node_modules$$mui$system$cssVars$getInitColorSchemeScript\")), _useCurrentColorScheme = global(require(\"module$node_modules$$mui$system$cssVars$useCurrentColorScheme\")), _jsxRuntime = require(\"module$node_modules$react$jsx_runtime\");\n  const _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"], DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = \"*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}\";\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$system$cssVars$createCssVarsProvider\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DISABLE_CSS_TRANSITION = void 0;\nexports.default = createCssVarsProvider;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _deepmerge = _interopRequireDefault(require(\"@mui/utils/deepmerge\"));\nvar _styledEngine = require(\"@mui/styled-engine\");\nvar _privateTheming = require(\"@mui/private-theming\");\nvar _ThemeProvider = _interopRequireDefault(require(\"../ThemeProvider\"));\nvar _getInitColorSchemeScript = _interopRequireWildcard(require(\"./getInitColorSchemeScript\"));\nvar _useCurrentColorScheme = _interopRequireDefault(require(\"./useCurrentColorScheme\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nconst _excluded = [\"colorSchemes\", \"components\", \"generateCssVars\", \"cssVarPrefix\"];\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nconst DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\nfunction createCssVarsProvider(options) {\n  const {\n    themeId,\n    /**\n     * This `theme` object needs to follow a certain structure to\n     * be used correctly by the finel `CssVarsProvider`. It should have a\n     * `colorSchemes` key with the light and dark (and any other) palette.\n     * It should also ideally have a vars object created using `prepareCssVars`.\n     */\n    theme: defaultTheme = {},\n    attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,\n    modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    defaultMode: designSystemMode = 'light',\n    defaultColorScheme: designSystemColorScheme,\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\n    resolveTheme,\n    excludeVariablesFromRoot\n  } = options;\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\n    console.error(`MUI: \\`${designSystemColorScheme}\\` does not exist in \\`theme.colorSchemes\\`.`);\n  }\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\n  if (process.env.NODE_ENV !== 'production') {\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\n  }\n  const useColorScheme = () => {\n    const value = React.useContext(ColorSchemeContext);\n    if (!value) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: \\`useColorScheme\\` must be called under <CssVarsProvider />` : (0, _formatMuiErrorMessage2.default)(19));\n    }\n    return value;\n  };\n  function CssVarsProvider(props) {\n    const {\n      children,\n      theme: themeProp = defaultTheme,\n      modeStorageKey = defaultModeStorageKey,\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\n      attribute = defaultAttribute,\n      defaultMode = designSystemMode,\n      defaultColorScheme = designSystemColorScheme,\n      disableTransitionOnChange = designSystemTransitionOnChange,\n      storageWindow = typeof window === 'undefined' ? undefined : window,\n      documentNode = typeof document === 'undefined' ? undefined : document,\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\n      colorSchemeSelector = ':root',\n      disableNestedContext = false,\n      disableStyleSheetGeneration = false\n    } = props;\n    const hasMounted = React.useRef(false);\n    const upperTheme = (0, _privateTheming.useTheme)();\n    const ctx = React.useContext(ColorSchemeContext);\n    const nested = !!ctx && !disableNestedContext;\n    const scopedTheme = themeProp[themeId];\n    const _ref = scopedTheme || themeProp,\n      {\n        colorSchemes = {},\n        components = {},\n        generateCssVars = () => ({\n          vars: {},\n          css: {}\n        }),\n        cssVarPrefix\n      } = _ref,\n      restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\n    const allColorSchemes = Object.keys(colorSchemes);\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\n\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\n    const {\n      mode: stateMode,\n      setMode,\n      systemMode,\n      lightColorScheme,\n      darkColorScheme,\n      colorScheme: stateColorScheme,\n      setColorScheme\n    } = (0, _useCurrentColorScheme.default)({\n      supportedColorSchemes: allColorSchemes,\n      defaultLightColorScheme,\n      defaultDarkColorScheme,\n      modeStorageKey,\n      colorSchemeStorageKey,\n      defaultMode,\n      storageWindow\n    });\n    let mode = stateMode;\n    let colorScheme = stateColorScheme;\n    if (nested) {\n      mode = ctx.mode;\n      colorScheme = ctx.colorScheme;\n    }\n    const calculatedMode = (() => {\n      if (mode) {\n        return mode;\n      }\n      // This scope occurs on the server\n      if (defaultMode === 'system') {\n        return designSystemMode;\n      }\n      return defaultMode;\n    })();\n    const calculatedColorScheme = (() => {\n      if (!colorScheme) {\n        // This scope occurs on the server\n        if (calculatedMode === 'dark') {\n          return defaultDarkColorScheme;\n        }\n        // use light color scheme, if default mode is 'light' | 'system'\n        return defaultLightColorScheme;\n      }\n      return colorScheme;\n    })();\n\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    const {\n      css: rootCss,\n      vars: rootVars\n    } = generateCssVars();\n\n    // 3. Start composing the theme object\n    const theme = (0, _extends2.default)({}, restThemeProp, {\n      components,\n      colorSchemes,\n      cssVarPrefix,\n      vars: rootVars,\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\"${targetColorScheme}\"] &`\n    });\n\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\n    const defaultColorSchemeStyleSheet = {};\n    const otherColorSchemesStyleSheet = {};\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\n      const {\n        css,\n        vars\n      } = generateCssVars(key);\n      theme.vars = (0, _deepmerge.default)(theme.vars, vars);\n      if (key === calculatedColorScheme) {\n        // 4.1 Merge the selected color scheme to the theme\n        Object.keys(scheme).forEach(schemeKey => {\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\n            // shallow merge the 1st level structure of the theme.\n            theme[schemeKey] = (0, _extends2.default)({}, theme[schemeKey], scheme[schemeKey]);\n          } else {\n            theme[schemeKey] = scheme[schemeKey];\n          }\n        });\n        if (theme.palette) {\n          theme.palette.colorScheme = key;\n        }\n      }\n      const resolvedDefaultColorScheme = (() => {\n        if (typeof defaultColorScheme === 'string') {\n          return defaultColorScheme;\n        }\n        if (defaultMode === 'dark') {\n          return defaultColorScheme.dark;\n        }\n        return defaultColorScheme.light;\n      })();\n      if (key === resolvedDefaultColorScheme) {\n        if (excludeVariablesFromRoot) {\n          const excludedVariables = {};\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\n            excludedVariables[cssVar] = css[cssVar];\n            delete css[cssVar];\n          });\n          defaultColorSchemeStyleSheet[`[${attribute}=\"${key}\"]`] = excludedVariables;\n        }\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\"${key}\"]`] = css;\n      } else {\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\"${key}\"]`] = css;\n      }\n    });\n    theme.vars = (0, _deepmerge.default)(theme.vars, rootVars);\n\n    // 5. Declaring effects\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\n    React.useEffect(() => {\n      if (colorScheme && colorSchemeNode) {\n        // attaches attribute to <html> because the css variables are attached to :root (html)\n        colorSchemeNode.setAttribute(attribute, colorScheme);\n      }\n    }, [colorScheme, attribute, colorSchemeNode]);\n\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\n    React.useEffect(() => {\n      let timer;\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\n        const css = documentNode.createElement('style');\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\n        documentNode.head.appendChild(css);\n\n        // Force browser repaint\n        (() => window.getComputedStyle(documentNode.body))();\n        timer = setTimeout(() => {\n          documentNode.head.removeChild(css);\n        }, 1);\n      }\n      return () => {\n        clearTimeout(timer);\n      };\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\n    React.useEffect(() => {\n      hasMounted.current = true;\n      return () => {\n        hasMounted.current = false;\n      };\n    }, []);\n    const contextValue = React.useMemo(() => ({\n      allColorSchemes,\n      colorScheme,\n      darkColorScheme,\n      lightColorScheme,\n      mode,\n      setColorScheme,\n      setMode,\n      systemMode\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\n    let shouldGenerateStyleSheet = true;\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\n      shouldGenerateStyleSheet = false;\n    }\n    const element = /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: {\n            [colorSchemeSelector]: rootCss\n          }\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: defaultColorSchemeStyleSheet\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\n          styles: otherColorSchemesStyleSheet\n        })]\n      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeProvider.default, {\n        themeId: scopedTheme ? themeId : undefined,\n        theme: resolveTheme ? resolveTheme(theme) : theme,\n        children: children\n      })]\n    });\n    if (nested) {\n      return element;\n    }\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {\n      value: contextValue,\n      children: element\n    });\n  }\n  process.env.NODE_ENV !== \"production\" ? CssVarsProvider.propTypes = {\n    /**\n     * The body attribute name to attach colorScheme.\n     */\n    attribute: _propTypes.default.string,\n    /**\n     * The component tree.\n     */\n    children: _propTypes.default.node,\n    /**\n     * The node used to attach the color-scheme attribute\n     */\n    colorSchemeNode: _propTypes.default.any,\n    /**\n     * The CSS selector for attaching the generated custom properties\n     */\n    colorSchemeSelector: _propTypes.default.string,\n    /**\n     * localStorage key used to store `colorScheme`\n     */\n    colorSchemeStorageKey: _propTypes.default.string,\n    /**\n     * The initial color scheme used.\n     */\n    defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\n    /**\n     * The initial mode used.\n     */\n    defaultMode: _propTypes.default.string,\n    /**\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\n     */\n    disableNestedContext: _propTypes.default.bool,\n    /**\n     * If `true`, the style sheet won't be generated.\n     *\n     * This is useful for controlling nested CssVarsProvider behavior.\n     */\n    disableStyleSheetGeneration: _propTypes.default.bool,\n    /**\n     * Disable CSS transitions when switching between modes or color schemes.\n     */\n    disableTransitionOnChange: _propTypes.default.bool,\n    /**\n     * The document to attach the attribute to.\n     */\n    documentNode: _propTypes.default.any,\n    /**\n     * The key in the local storage used to store current color scheme.\n     */\n    modeStorageKey: _propTypes.default.string,\n    /**\n     * The window that attaches the 'storage' event listener.\n     * @default window\n     */\n    storageWindow: _propTypes.default.any,\n    /**\n     * The calculated theme object that will be passed through context.\n     */\n    theme: _propTypes.default.object\n  } : void 0;\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\n  const getInitColorSchemeScript = params => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({\n    attribute: defaultAttribute,\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\n    defaultMode: designSystemMode,\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    modeStorageKey: defaultModeStorageKey\n  }, params));\n  return {\n    CssVarsProvider,\n    useColorScheme,\n    getInitColorSchemeScript\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$mui$system$ThemeProvider$index","~$module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose","~$module$node_modules$react$jsx_runtime","~$module$node_modules$$mui$utils$node$deepmerge$index","~$module$node_modules$$mui$utils$node$formatMuiErrorMessage$index","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$$mui$system$cssVars$getInitColorSchemeScript","~$module$node_modules$react$index","~$module$node_modules$prop_types$index","~$shadow.js","~$module$node_modules$$mui$styled_engine$node$index","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$$mui$system$cssVars$useCurrentColorScheme","~$module$node_modules$$mui$private_theming$node$index"]],"~:properties",["^5",["defaultColorScheme","allColorSchemes","supportedColorSchemes","colorSchemeNode","modeStorageKey","DISABLE_CSS_TRANSITION","documentNode","setMode","displayName","children","css","__esModule","systemMode","getInitColorSchemeScript","getColorSchemeSelector","attribute","propTypes","mode","defaultDarkColorScheme","value","defaultMode","lightColorScheme","disableTransitionOnChange","styles","current","colorScheme","disableNestedContext","setColorScheme","CssVarsProvider","colorSchemeStorageKey","darkColorScheme","colorSchemeSelector","__proto__","storageWindow","disableStyleSheetGeneration","components","colorSchemes","useColorScheme","theme","cssVarPrefix","themeId","defaultLightColorScheme","default","vars"]],"~:compiled-at",1712152510738,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$system$cssVars$createCssVarsProvider.js\",\n\"lineCount\":125,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@mui/system/cssVars/createCssVarsProvider.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$system$cssVars$createCssVarsProvider\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.DISABLE_CSS_TRANSITION = void 0;\\nexports.default = createCssVarsProvider;\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/objectWithoutPropertiesLoose\\\"));\\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\\\"@mui/utils/formatMuiErrorMessage\\\"));\\nvar React = _interopRequireWildcard(require(\\\"react\\\"));\\nvar _propTypes = _interopRequireDefault(require(\\\"prop-types\\\"));\\nvar _deepmerge = _interopRequireDefault(require(\\\"@mui/utils/deepmerge\\\"));\\nvar _styledEngine = require(\\\"@mui/styled-engine\\\");\\nvar _privateTheming = require(\\\"@mui/private-theming\\\");\\nvar _ThemeProvider = _interopRequireDefault(require(\\\"../ThemeProvider\\\"));\\nvar _getInitColorSchemeScript = _interopRequireWildcard(require(\\\"./getInitColorSchemeScript\\\"));\\nvar _useCurrentColorScheme = _interopRequireDefault(require(\\\"./useCurrentColorScheme\\\"));\\nvar _jsxRuntime = require(\\\"react/jsx-runtime\\\");\\nconst _excluded = [\\\"colorSchemes\\\", \\\"components\\\", \\\"generateCssVars\\\", \\\"cssVarPrefix\\\"];\\nfunction _getRequireWildcardCache(e) { if (\\\"function\\\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \\\"object\\\" != typeof e && \\\"function\\\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\\\"default\\\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\\nconst DISABLE_CSS_TRANSITION = exports.DISABLE_CSS_TRANSITION = '*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}';\\nfunction createCssVarsProvider(options) {\\n  const {\\n    themeId,\\n    /**\\n     * This `theme` object needs to follow a certain structure to\\n     * be used correctly by the finel `CssVarsProvider`. It should have a\\n     * `colorSchemes` key with the light and dark (and any other) palette.\\n     * It should also ideally have a vars object created using `prepareCssVars`.\\n     */\\n    theme: defaultTheme = {},\\n    attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,\\n    modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,\\n    colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,\\n    defaultMode: designSystemMode = 'light',\\n    defaultColorScheme: designSystemColorScheme,\\n    disableTransitionOnChange: designSystemTransitionOnChange = false,\\n    resolveTheme,\\n    excludeVariablesFromRoot\\n  } = options;\\n  if (!defaultTheme.colorSchemes || typeof designSystemColorScheme === 'string' && !defaultTheme.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === 'object' && !defaultTheme.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {\\n    console.error(`MUI: \\\\`${designSystemColorScheme}\\\\` does not exist in \\\\`theme.colorSchemes\\\\`.`);\\n  }\\n  const ColorSchemeContext = /*#__PURE__*/React.createContext(undefined);\\n  if (process.env.NODE_ENV !== 'production') {\\n    ColorSchemeContext.displayName = 'ColorSchemeContext';\\n  }\\n  const useColorScheme = () => {\\n    const value = React.useContext(ColorSchemeContext);\\n    if (!value) {\\n      throw new Error(process.env.NODE_ENV !== \\\"production\\\" ? `MUI: \\\\`useColorScheme\\\\` must be called under <CssVarsProvider />` : (0, _formatMuiErrorMessage2.default)(19));\\n    }\\n    return value;\\n  };\\n  function CssVarsProvider(props) {\\n    const {\\n      children,\\n      theme: themeProp = defaultTheme,\\n      modeStorageKey = defaultModeStorageKey,\\n      colorSchemeStorageKey = defaultColorSchemeStorageKey,\\n      attribute = defaultAttribute,\\n      defaultMode = designSystemMode,\\n      defaultColorScheme = designSystemColorScheme,\\n      disableTransitionOnChange = designSystemTransitionOnChange,\\n      storageWindow = typeof window === 'undefined' ? undefined : window,\\n      documentNode = typeof document === 'undefined' ? undefined : document,\\n      colorSchemeNode = typeof document === 'undefined' ? undefined : document.documentElement,\\n      colorSchemeSelector = ':root',\\n      disableNestedContext = false,\\n      disableStyleSheetGeneration = false\\n    } = props;\\n    const hasMounted = React.useRef(false);\\n    const upperTheme = (0, _privateTheming.useTheme)();\\n    const ctx = React.useContext(ColorSchemeContext);\\n    const nested = !!ctx && !disableNestedContext;\\n    const scopedTheme = themeProp[themeId];\\n    const _ref = scopedTheme || themeProp,\\n      {\\n        colorSchemes = {},\\n        components = {},\\n        generateCssVars = () => ({\\n          vars: {},\\n          css: {}\\n        }),\\n        cssVarPrefix\\n      } = _ref,\\n      restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);\\n    const allColorSchemes = Object.keys(colorSchemes);\\n    const defaultLightColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.light;\\n    const defaultDarkColorScheme = typeof defaultColorScheme === 'string' ? defaultColorScheme : defaultColorScheme.dark;\\n\\n    // 1. Get the data about the `mode`, `colorScheme`, and setter functions.\\n    const {\\n      mode: stateMode,\\n      setMode,\\n      systemMode,\\n      lightColorScheme,\\n      darkColorScheme,\\n      colorScheme: stateColorScheme,\\n      setColorScheme\\n    } = (0, _useCurrentColorScheme.default)({\\n      supportedColorSchemes: allColorSchemes,\\n      defaultLightColorScheme,\\n      defaultDarkColorScheme,\\n      modeStorageKey,\\n      colorSchemeStorageKey,\\n      defaultMode,\\n      storageWindow\\n    });\\n    let mode = stateMode;\\n    let colorScheme = stateColorScheme;\\n    if (nested) {\\n      mode = ctx.mode;\\n      colorScheme = ctx.colorScheme;\\n    }\\n    const calculatedMode = (() => {\\n      if (mode) {\\n        return mode;\\n      }\\n      // This scope occurs on the server\\n      if (defaultMode === 'system') {\\n        return designSystemMode;\\n      }\\n      return defaultMode;\\n    })();\\n    const calculatedColorScheme = (() => {\\n      if (!colorScheme) {\\n        // This scope occurs on the server\\n        if (calculatedMode === 'dark') {\\n          return defaultDarkColorScheme;\\n        }\\n        // use light color scheme, if default mode is 'light' | 'system'\\n        return defaultLightColorScheme;\\n      }\\n      return colorScheme;\\n    })();\\n\\n    // 2. Create CSS variables and store them in objects (to be generated in stylesheets in the final step)\\n    const {\\n      css: rootCss,\\n      vars: rootVars\\n    } = generateCssVars();\\n\\n    // 3. Start composing the theme object\\n    const theme = (0, _extends2.default)({}, restThemeProp, {\\n      components,\\n      colorSchemes,\\n      cssVarPrefix,\\n      vars: rootVars,\\n      getColorSchemeSelector: targetColorScheme => `[${attribute}=\\\"${targetColorScheme}\\\"] &`\\n    });\\n\\n    // 4. Create color CSS variables and store them in objects (to be generated in stylesheets in the final step)\\n    //    The default color scheme stylesheet is constructed to have the least CSS specificity.\\n    //    The other color schemes uses selector, default as data attribute, to increase the CSS specificity so that they can override the default color scheme stylesheet.\\n    const defaultColorSchemeStyleSheet = {};\\n    const otherColorSchemesStyleSheet = {};\\n    Object.entries(colorSchemes).forEach(([key, scheme]) => {\\n      const {\\n        css,\\n        vars\\n      } = generateCssVars(key);\\n      theme.vars = (0, _deepmerge.default)(theme.vars, vars);\\n      if (key === calculatedColorScheme) {\\n        // 4.1 Merge the selected color scheme to the theme\\n        Object.keys(scheme).forEach(schemeKey => {\\n          if (scheme[schemeKey] && typeof scheme[schemeKey] === 'object') {\\n            // shallow merge the 1st level structure of the theme.\\n            theme[schemeKey] = (0, _extends2.default)({}, theme[schemeKey], scheme[schemeKey]);\\n          } else {\\n            theme[schemeKey] = scheme[schemeKey];\\n          }\\n        });\\n        if (theme.palette) {\\n          theme.palette.colorScheme = key;\\n        }\\n      }\\n      const resolvedDefaultColorScheme = (() => {\\n        if (typeof defaultColorScheme === 'string') {\\n          return defaultColorScheme;\\n        }\\n        if (defaultMode === 'dark') {\\n          return defaultColorScheme.dark;\\n        }\\n        return defaultColorScheme.light;\\n      })();\\n      if (key === resolvedDefaultColorScheme) {\\n        if (excludeVariablesFromRoot) {\\n          const excludedVariables = {};\\n          excludeVariablesFromRoot(cssVarPrefix).forEach(cssVar => {\\n            excludedVariables[cssVar] = css[cssVar];\\n            delete css[cssVar];\\n          });\\n          defaultColorSchemeStyleSheet[`[${attribute}=\\\"${key}\\\"]`] = excludedVariables;\\n        }\\n        defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}=\\\"${key}\\\"]`] = css;\\n      } else {\\n        otherColorSchemesStyleSheet[`${colorSchemeSelector === ':root' ? '' : colorSchemeSelector}[${attribute}=\\\"${key}\\\"]`] = css;\\n      }\\n    });\\n    theme.vars = (0, _deepmerge.default)(theme.vars, rootVars);\\n\\n    // 5. Declaring effects\\n    // 5.1 Updates the selector value to use the current color scheme which tells CSS to use the proper stylesheet.\\n    React.useEffect(() => {\\n      if (colorScheme && colorSchemeNode) {\\n        // attaches attribute to <html> because the css variables are attached to :root (html)\\n        colorSchemeNode.setAttribute(attribute, colorScheme);\\n      }\\n    }, [colorScheme, attribute, colorSchemeNode]);\\n\\n    // 5.2 Remove the CSS transition when color scheme changes to create instant experience.\\n    // credit: https://github.com/pacocoursey/next-themes/blob/b5c2bad50de2d61ad7b52a9c5cdc801a78507d7a/index.tsx#L313\\n    React.useEffect(() => {\\n      let timer;\\n      if (disableTransitionOnChange && hasMounted.current && documentNode) {\\n        const css = documentNode.createElement('style');\\n        css.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));\\n        documentNode.head.appendChild(css);\\n\\n        // Force browser repaint\\n        (() => window.getComputedStyle(documentNode.body))();\\n        timer = setTimeout(() => {\\n          documentNode.head.removeChild(css);\\n        }, 1);\\n      }\\n      return () => {\\n        clearTimeout(timer);\\n      };\\n    }, [colorScheme, disableTransitionOnChange, documentNode]);\\n    React.useEffect(() => {\\n      hasMounted.current = true;\\n      return () => {\\n        hasMounted.current = false;\\n      };\\n    }, []);\\n    const contextValue = React.useMemo(() => ({\\n      allColorSchemes,\\n      colorScheme,\\n      darkColorScheme,\\n      lightColorScheme,\\n      mode,\\n      setColorScheme,\\n      setMode,\\n      systemMode\\n    }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);\\n    let shouldGenerateStyleSheet = true;\\n    if (disableStyleSheetGeneration || nested && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {\\n      shouldGenerateStyleSheet = false;\\n    }\\n    const element = /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\\n      children: [shouldGenerateStyleSheet && /*#__PURE__*/(0, _jsxRuntime.jsxs)(React.Fragment, {\\n        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\\n          styles: {\\n            [colorSchemeSelector]: rootCss\\n          }\\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\\n          styles: defaultColorSchemeStyleSheet\\n        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {\\n          styles: otherColorSchemesStyleSheet\\n        })]\\n      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_ThemeProvider.default, {\\n        themeId: scopedTheme ? themeId : undefined,\\n        theme: resolveTheme ? resolveTheme(theme) : theme,\\n        children: children\\n      })]\\n    });\\n    if (nested) {\\n      return element;\\n    }\\n    return /*#__PURE__*/(0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {\\n      value: contextValue,\\n      children: element\\n    });\\n  }\\n  process.env.NODE_ENV !== \\\"production\\\" ? CssVarsProvider.propTypes = {\\n    /**\\n     * The body attribute name to attach colorScheme.\\n     */\\n    attribute: _propTypes.default.string,\\n    /**\\n     * The component tree.\\n     */\\n    children: _propTypes.default.node,\\n    /**\\n     * The node used to attach the color-scheme attribute\\n     */\\n    colorSchemeNode: _propTypes.default.any,\\n    /**\\n     * The CSS selector for attaching the generated custom properties\\n     */\\n    colorSchemeSelector: _propTypes.default.string,\\n    /**\\n     * localStorage key used to store `colorScheme`\\n     */\\n    colorSchemeStorageKey: _propTypes.default.string,\\n    /**\\n     * The initial color scheme used.\\n     */\\n    defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),\\n    /**\\n     * The initial mode used.\\n     */\\n    defaultMode: _propTypes.default.string,\\n    /**\\n     * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.\\n     */\\n    disableNestedContext: _propTypes.default.bool,\\n    /**\\n     * If `true`, the style sheet won't be generated.\\n     *\\n     * This is useful for controlling nested CssVarsProvider behavior.\\n     */\\n    disableStyleSheetGeneration: _propTypes.default.bool,\\n    /**\\n     * Disable CSS transitions when switching between modes or color schemes.\\n     */\\n    disableTransitionOnChange: _propTypes.default.bool,\\n    /**\\n     * The document to attach the attribute to.\\n     */\\n    documentNode: _propTypes.default.any,\\n    /**\\n     * The key in the local storage used to store current color scheme.\\n     */\\n    modeStorageKey: _propTypes.default.string,\\n    /**\\n     * The window that attaches the 'storage' event listener.\\n     * @default window\\n     */\\n    storageWindow: _propTypes.default.any,\\n    /**\\n     * The calculated theme object that will be passed through context.\\n     */\\n    theme: _propTypes.default.object\\n  } : void 0;\\n  const defaultLightColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.light;\\n  const defaultDarkColorScheme = typeof designSystemColorScheme === 'string' ? designSystemColorScheme : designSystemColorScheme.dark;\\n  const getInitColorSchemeScript = params => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({\\n    attribute: defaultAttribute,\\n    colorSchemeStorageKey: defaultColorSchemeStorageKey,\\n    defaultMode: designSystemMode,\\n    defaultLightColorScheme,\\n    defaultDarkColorScheme,\\n    modeStorageKey: defaultModeStorageKey\\n  }, params));\\n  return {\\n    CssVarsProvider,\\n    useColorScheme,\\n    getInitColorSchemeScript\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_getRequireWildcardCache\",\"e\",\"WeakMap\",\"r\",\"t\",\"_interopRequireWildcard\",\"__esModule\",\"default\",\"has\",\"get\",\"n\",\"__proto__\",\"a\",\"Object\",\"defineProperty\",\"getOwnPropertyDescriptor\",\"u\",\"prototype\",\"hasOwnProperty\",\"call\",\"i\",\"set\",\"_interopRequireDefault\",\"value\",\"DISABLE_CSS_TRANSITION\",\"createCssVarsProvider\",\"options\",\"CssVarsProvider\",\"props\",\"children\",\"themeProp\",\"defaultTheme\",\"modeStorageKey\",\"defaultModeStorageKey\",\"colorSchemeStorageKey\",\"defaultColorSchemeStorageKey\",\"attribute\",\"defaultAttribute\",\"defaultMode\",\"designSystemMode\",\"defaultColorScheme\",\"designSystemColorScheme\",\"disableTransitionOnChange\",\"designSystemTransitionOnChange\",\"storageWindow\",\"window\",\"undefined\",\"documentNode\",\"document\",\"colorSchemeNode\",\"documentElement\",\"colorSchemeSelector\",\"disableNestedContext\",\"disableStyleSheetGeneration\",\"hasMounted\",\"React\",\"useRef\",\"upperTheme\",\"_privateTheming\",\"useTheme\",\"ctx\",\"useContext\",\"ColorSchemeContext\",\"nested\",\"scopedTheme\",\"themeId\",\"_ref\",\"colorSchemes\",\"components\",\"generateCssVars\",\"vars\",\"css\",\"cssVarPrefix\",\"restThemeProp\",\"_objectWithoutPropertiesLoose2\",\"_excluded\",\"allColorSchemes\",\"keys\",\"defaultLightColorScheme\",\"light\",\"defaultDarkColorScheme\",\"dark\",\"stateMode\",\"setMode\",\"systemMode\",\"lightColorScheme\",\"darkColorScheme\",\"stateColorScheme\",\"setColorScheme\",\"_useCurrentColorScheme\",\"supportedColorSchemes\",\"mode\",\"colorScheme\",\"calculatedMode\",\"calculatedColorScheme\",\"rootCss\",\"rootVars\",\"theme\",\"_extends2\",\"getColorSchemeSelector\",\"targetColorScheme\",\"defaultColorSchemeStyleSheet\",\"otherColorSchemesStyleSheet\",\"entries\",\"forEach\",\"key\",\"scheme\",\"_deepmerge\",\"schemeKey\",\"palette\",\"resolvedDefaultColorScheme\",\"excludeVariablesFromRoot\",\"excludedVariables\",\"cssVar\",\"useEffect\",\"setAttribute\",\"timer\",\"current\",\"createElement\",\"appendChild\",\"createTextNode\",\"head\",\"getComputedStyle\",\"body\",\"setTimeout\",\"removeChild\",\"clearTimeout\",\"contextValue\",\"useMemo\",\"shouldGenerateStyleSheet\",\"element\",\"_jsxRuntime\",\"jsxs\",\"Fragment\",\"jsx\",\"_styledEngine\",\"GlobalStyles\",\"styles\",\"_ThemeProvider\",\"resolveTheme\",\"Provider\",\"_getInitColorSchemeScript\",\"DEFAULT_ATTRIBUTE\",\"DEFAULT_MODE_STORAGE_KEY\",\"DEFAULT_COLOR_SCHEME_STORAGE_KEY\",\"console\",\"error\",\"createContext\",\"displayName\",\"propTypes\",\"_propTypes\",\"string\",\"node\",\"any\",\"oneOfType\",\"object\",\"bool\",\"useColorScheme\",\"Error\",\"getInitColorSchemeScript\",\"params\"]\n}\n"]