["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/material/node/styles/createPalette.js"],"~:js","shadow$provide.module$node_modules$$mui$material$node$styles$createPalette = function(global, require, module, exports) {\n  function addLightOrDark(intent, direction, shade, tonalOffset) {\n    const tonalOffsetLight = tonalOffset.light || tonalOffset;\n    tonalOffset = tonalOffset.dark || 1.5 * tonalOffset;\n    intent[direction] || (intent.hasOwnProperty(shade) ? intent[direction] = intent[shade] : \"light\" === direction ? intent.light = (0,_colorManipulator.lighten)(intent.main, tonalOffsetLight) : \"dark\" === direction && (intent.dark = (0,_colorManipulator.darken)(intent.main, tonalOffset)));\n  }\n  function getDefaultPrimary(mode = \"light\") {\n    return \"dark\" === mode ? {main:_blue.default[200], light:_blue.default[50], dark:_blue.default[400]} : {main:_blue.default[700], light:_blue.default[400], dark:_blue.default[800]};\n  }\n  function getDefaultSecondary(mode = \"light\") {\n    return \"dark\" === mode ? {main:_purple.default[200], light:_purple.default[50], dark:_purple.default[400]} : {main:_purple.default[500], light:_purple.default[300], dark:_purple.default[700]};\n  }\n  function getDefaultError(mode = \"light\") {\n    return \"dark\" === mode ? {main:_red.default[500], light:_red.default[300], dark:_red.default[700]} : {main:_red.default[700], light:_red.default[400], dark:_red.default[800]};\n  }\n  function getDefaultInfo(mode = \"light\") {\n    return \"dark\" === mode ? {main:_lightBlue.default[400], light:_lightBlue.default[300], dark:_lightBlue.default[700]} : {main:_lightBlue.default[700], light:_lightBlue.default[500], dark:_lightBlue.default[900]};\n  }\n  function getDefaultSuccess(mode = \"light\") {\n    return \"dark\" === mode ? {main:_green.default[400], light:_green.default[300], dark:_green.default[700]} : {main:_green.default[800], light:_green.default[500], dark:_green.default[900]};\n  }\n  function getDefaultWarning(mode = \"light\") {\n    return \"dark\" === mode ? {main:_orange.default[400], light:_orange.default[300], dark:_orange.default[700]} : {main:\"#ed6c02\", light:_orange.default[500], dark:_orange.default[900]};\n  }\n  global = require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.dark = void 0;\n  exports.default = function(palette) {\n    function getContrastText(background) {\n      const contrastText = (0,_colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary, contrast = (0,_colorManipulator.getContrastRatio)(background, contrastText);\n      3 > contrast && console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, \"falls below the WCAG recommended absolute minimum contrast ratio of 3:1.\\nhttps://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast\"].join(\"\\n\"));\n      return contrastText;\n    }\n    const {mode = \"light\", contrastThreshold = 3, tonalOffset = 0.2} = palette, other = (0,_objectWithoutPropertiesLoose2.default)(palette, _excluded), primary = palette.primary || getDefaultPrimary(mode), secondary = palette.secondary || getDefaultSecondary(mode), error = palette.error || getDefaultError(mode), info = palette.info || getDefaultInfo(mode), success = palette.success || getDefaultSuccess(mode);\n    palette = palette.warning || getDefaultWarning(mode);\n    const augmentColor = ({color, name, mainShade = 500, lightShade = 300, darkShade = 700}) => {\n      color = (0,_extends2.default)({}, color);\n      !color.main && color[mainShade] && (color.main = color[mainShade]);\n      if (!color.hasOwnProperty(\"main\")) {\n        throw Error(`MUI: The color${name ? ` (${name})` : \"\"} provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.`);\n      }\n      if (\"string\" !== typeof color.main) {\n        throw Error(`MUI: The color${name ? ` (${name})` : \"\"} provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from \"@mui/material/colors\";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });`);\n      }\n      addLightOrDark(color, \"light\", lightShade, tonalOffset);\n      addLightOrDark(color, \"dark\", darkShade, tonalOffset);\n      color.contrastText || (color.contrastText = getContrastText(color.main));\n      return color;\n    }, modes = {dark, light};\n    modes[mode] || console.error(`MUI: The palette mode \\`${mode}\\` is not supported.`);\n    return (0,_deepmerge.default)((0,_extends2.default)({common:(0,_extends2.default)({}, _common.default), mode, primary:augmentColor({color:primary, name:\"primary\"}), secondary:augmentColor({color:secondary, name:\"secondary\", mainShade:\"A400\", lightShade:\"A200\", darkShade:\"A700\"}), error:augmentColor({color:error, name:\"error\"}), warning:augmentColor({color:palette, name:\"warning\"}), info:augmentColor({color:info, name:\"info\"}), success:augmentColor({color:success, name:\"success\"}), grey:_grey.default, \n    contrastThreshold, getContrastText, augmentColor, tonalOffset}, modes[mode]), other);\n  };\n  exports.light = void 0;\n  var _extends2 = global(require(\"module$node_modules$$babel$runtime$helpers$extends\")), _objectWithoutPropertiesLoose2 = global(require(\"module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose\"));\n  global(require(\"module$node_modules$$mui$utils$node$formatMuiErrorMessage$index\"));\n  var _deepmerge = global(require(\"module$node_modules$$mui$utils$node$deepmerge$index\")), _colorManipulator = require(\"module$node_modules$$mui$system$colorManipulator\"), _common = global(require(\"module$node_modules$$mui$material$node$colors$common\")), _grey = global(require(\"module$node_modules$$mui$material$node$colors$grey\")), _purple = global(require(\"module$node_modules$$mui$material$node$colors$purple\")), _red = global(require(\"module$node_modules$$mui$material$node$colors$red\")), _orange = \n  global(require(\"module$node_modules$$mui$material$node$colors$orange\")), _blue = global(require(\"module$node_modules$$mui$material$node$colors$blue\")), _lightBlue = global(require(\"module$node_modules$$mui$material$node$colors$lightBlue\")), _green = global(require(\"module$node_modules$$mui$material$node$colors$green\"));\n  const _excluded = [\"mode\", \"contrastThreshold\", \"tonalOffset\"], light = exports.light = {text:{primary:\"rgba(0, 0, 0, 0.87)\", secondary:\"rgba(0, 0, 0, 0.6)\", disabled:\"rgba(0, 0, 0, 0.38)\"}, divider:\"rgba(0, 0, 0, 0.12)\", background:{paper:_common.default.white, default:_common.default.white}, action:{active:\"rgba(0, 0, 0, 0.54)\", hover:\"rgba(0, 0, 0, 0.04)\", hoverOpacity:0.04, selected:\"rgba(0, 0, 0, 0.08)\", selectedOpacity:0.08, disabled:\"rgba(0, 0, 0, 0.26)\", disabledBackground:\"rgba(0, 0, 0, 0.12)\", \n  disabledOpacity:0.38, focus:\"rgba(0, 0, 0, 0.12)\", focusOpacity:0.12, activatedOpacity:0.12}}, dark = exports.dark = {text:{primary:_common.default.white, secondary:\"rgba(255, 255, 255, 0.7)\", disabled:\"rgba(255, 255, 255, 0.5)\", icon:\"rgba(255, 255, 255, 0.5)\"}, divider:\"rgba(255, 255, 255, 0.12)\", background:{paper:\"#121212\", default:\"#121212\"}, action:{active:_common.default.white, hover:\"rgba(255, 255, 255, 0.08)\", hoverOpacity:0.08, selected:\"rgba(255, 255, 255, 0.16)\", selectedOpacity:0.16, \n  disabled:\"rgba(255, 255, 255, 0.3)\", disabledBackground:\"rgba(255, 255, 255, 0.12)\", disabledOpacity:0.38, focus:\"rgba(255, 255, 255, 0.12)\", focusOpacity:0.12, activatedOpacity:0.24}};\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$material$node$styles$createPalette\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.dark = void 0;\nexports.default = createPalette;\nexports.light = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\"));\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\"@mui/utils/formatMuiErrorMessage\"));\nvar _deepmerge = _interopRequireDefault(require(\"@mui/utils/deepmerge\"));\nvar _colorManipulator = require(\"@mui/system/colorManipulator\");\nvar _common = _interopRequireDefault(require(\"../colors/common\"));\nvar _grey = _interopRequireDefault(require(\"../colors/grey\"));\nvar _purple = _interopRequireDefault(require(\"../colors/purple\"));\nvar _red = _interopRequireDefault(require(\"../colors/red\"));\nvar _orange = _interopRequireDefault(require(\"../colors/orange\"));\nvar _blue = _interopRequireDefault(require(\"../colors/blue\"));\nvar _lightBlue = _interopRequireDefault(require(\"../colors/lightBlue\"));\nvar _green = _interopRequireDefault(require(\"../colors/green\"));\nconst _excluded = [\"mode\", \"contrastThreshold\", \"tonalOffset\"];\nconst light = exports.light = {\n  // The colors used to style the text.\n  text: {\n    // The most important text.\n    primary: 'rgba(0, 0, 0, 0.87)',\n    // Secondary text.\n    secondary: 'rgba(0, 0, 0, 0.6)',\n    // Disabled text have even lower visual prominence.\n    disabled: 'rgba(0, 0, 0, 0.38)'\n  },\n  // The color used to divide different elements.\n  divider: 'rgba(0, 0, 0, 0.12)',\n  // The background colors used to style the surfaces.\n  // Consistency between these values is important.\n  background: {\n    paper: _common.default.white,\n    default: _common.default.white\n  },\n  // The colors used to style the action elements.\n  action: {\n    // The color of an active action like an icon button.\n    active: 'rgba(0, 0, 0, 0.54)',\n    // The color of an hovered action.\n    hover: 'rgba(0, 0, 0, 0.04)',\n    hoverOpacity: 0.04,\n    // The color of a selected action.\n    selected: 'rgba(0, 0, 0, 0.08)',\n    selectedOpacity: 0.08,\n    // The color of a disabled action.\n    disabled: 'rgba(0, 0, 0, 0.26)',\n    // The background color of a disabled action.\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(0, 0, 0, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.12\n  }\n};\nconst dark = exports.dark = {\n  text: {\n    primary: _common.default.white,\n    secondary: 'rgba(255, 255, 255, 0.7)',\n    disabled: 'rgba(255, 255, 255, 0.5)',\n    icon: 'rgba(255, 255, 255, 0.5)'\n  },\n  divider: 'rgba(255, 255, 255, 0.12)',\n  background: {\n    paper: '#121212',\n    default: '#121212'\n  },\n  action: {\n    active: _common.default.white,\n    hover: 'rgba(255, 255, 255, 0.08)',\n    hoverOpacity: 0.08,\n    selected: 'rgba(255, 255, 255, 0.16)',\n    selectedOpacity: 0.16,\n    disabled: 'rgba(255, 255, 255, 0.3)',\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\n    disabledOpacity: 0.38,\n    focus: 'rgba(255, 255, 255, 0.12)',\n    focusOpacity: 0.12,\n    activatedOpacity: 0.24\n  }\n};\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\n  if (!intent[direction]) {\n    if (intent.hasOwnProperty(shade)) {\n      intent[direction] = intent[shade];\n    } else if (direction === 'light') {\n      intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);\n    } else if (direction === 'dark') {\n      intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);\n    }\n  }\n}\nfunction getDefaultPrimary(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _blue.default[200],\n      light: _blue.default[50],\n      dark: _blue.default[400]\n    };\n  }\n  return {\n    main: _blue.default[700],\n    light: _blue.default[400],\n    dark: _blue.default[800]\n  };\n}\nfunction getDefaultSecondary(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _purple.default[200],\n      light: _purple.default[50],\n      dark: _purple.default[400]\n    };\n  }\n  return {\n    main: _purple.default[500],\n    light: _purple.default[300],\n    dark: _purple.default[700]\n  };\n}\nfunction getDefaultError(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _red.default[500],\n      light: _red.default[300],\n      dark: _red.default[700]\n    };\n  }\n  return {\n    main: _red.default[700],\n    light: _red.default[400],\n    dark: _red.default[800]\n  };\n}\nfunction getDefaultInfo(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _lightBlue.default[400],\n      light: _lightBlue.default[300],\n      dark: _lightBlue.default[700]\n    };\n  }\n  return {\n    main: _lightBlue.default[700],\n    light: _lightBlue.default[500],\n    dark: _lightBlue.default[900]\n  };\n}\nfunction getDefaultSuccess(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _green.default[400],\n      light: _green.default[300],\n      dark: _green.default[700]\n    };\n  }\n  return {\n    main: _green.default[800],\n    light: _green.default[500],\n    dark: _green.default[900]\n  };\n}\nfunction getDefaultWarning(mode = 'light') {\n  if (mode === 'dark') {\n    return {\n      main: _orange.default[400],\n      light: _orange.default[300],\n      dark: _orange.default[700]\n    };\n  }\n  return {\n    main: '#ed6c02',\n    // closest to orange[800] that pass 3:1.\n    light: _orange.default[500],\n    dark: _orange.default[900]\n  };\n}\nfunction createPalette(palette) {\n  const {\n      mode = 'light',\n      contrastThreshold = 3,\n      tonalOffset = 0.2\n    } = palette,\n    other = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded);\n  const primary = palette.primary || getDefaultPrimary(mode);\n  const secondary = palette.secondary || getDefaultSecondary(mode);\n  const error = palette.error || getDefaultError(mode);\n  const info = palette.info || getDefaultInfo(mode);\n  const success = palette.success || getDefaultSuccess(mode);\n  const warning = palette.warning || getDefaultWarning(mode);\n\n  // Use the same logic as\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\n  function getContrastText(background) {\n    const contrastText = (0, _colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\n    if (process.env.NODE_ENV !== 'production') {\n      const contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);\n      if (contrast < 3) {\n        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n      }\n    }\n    return contrastText;\n  }\n  const augmentColor = ({\n    color,\n    name,\n    mainShade = 500,\n    lightShade = 300,\n    darkShade = 700\n  }) => {\n    color = (0, _extends2.default)({}, color);\n    if (!color.main && color[mainShade]) {\n      color.main = color[mainShade];\n    }\n    if (!color.hasOwnProperty('main')) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\nThe color object needs to have a \\`main\\` property or a \\`${mainShade}\\` property.` : (0, _formatMuiErrorMessage2.default)(11, name ? ` (${name})` : '', mainShade));\n    }\n    if (typeof color.main !== 'string') {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\n\\`color.main\\` should be a string, but \\`${JSON.stringify(color.main)}\\` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport { green } from \"@mui/material/colors\";\n\nconst theme1 = createTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createTheme({ palette: {\n  primary: { main: green[500] },\n} });` : (0, _formatMuiErrorMessage2.default)(12, name ? ` (${name})` : '', JSON.stringify(color.main)));\n    }\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\n    if (!color.contrastText) {\n      color.contrastText = getContrastText(color.main);\n    }\n    return color;\n  };\n  const modes = {\n    dark,\n    light\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    if (!modes[mode]) {\n      console.error(`MUI: The palette mode \\`${mode}\\` is not supported.`);\n    }\n  }\n  const paletteOutput = (0, _deepmerge.default)((0, _extends2.default)({\n    // A collection of common colors.\n    common: (0, _extends2.default)({}, _common.default),\n    // prevent mutable object.\n    // The palette mode, can be light or dark.\n    mode,\n    // The colors used to represent primary interface elements for a user.\n    primary: augmentColor({\n      color: primary,\n      name: 'primary'\n    }),\n    // The colors used to represent secondary interface elements for a user.\n    secondary: augmentColor({\n      color: secondary,\n      name: 'secondary',\n      mainShade: 'A400',\n      lightShade: 'A200',\n      darkShade: 'A700'\n    }),\n    // The colors used to represent interface elements that the user should be made aware of.\n    error: augmentColor({\n      color: error,\n      name: 'error'\n    }),\n    // The colors used to represent potentially dangerous actions or important messages.\n    warning: augmentColor({\n      color: warning,\n      name: 'warning'\n    }),\n    // The colors used to present information to the user that is neutral and not necessarily important.\n    info: augmentColor({\n      color: info,\n      name: 'info'\n    }),\n    // The colors used to indicate the successful completion of an action that user triggered.\n    success: augmentColor({\n      color: success,\n      name: 'success'\n    }),\n    // The grey colors.\n    grey: _grey.default,\n    // Used by `getContrastText()` to maximize the contrast between\n    // the background and the text.\n    contrastThreshold,\n    // Takes a background color and returns the text color that maximizes the contrast.\n    getContrastText,\n    // Generate a rich color object.\n    augmentColor,\n    // Used by the functions below to shift a color's luminance by approximately\n    // two indexes within its tonal palette.\n    // E.g., shift from Red 500 to Red 300 or Red 700.\n    tonalOffset\n  }, modes[mode]), other);\n  return paletteOutput;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$objectWithoutPropertiesLoose","~$module$node_modules$$mui$utils$node$deepmerge$index","~$module$node_modules$$mui$material$node$colors$common","~$module$node_modules$$mui$utils$node$formatMuiErrorMessage$index","~$module$node_modules$$mui$material$node$colors$grey","~$module$node_modules$$mui$material$node$colors$orange","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$$mui$material$node$colors$blue","~$shadow.js","~$module$node_modules$$mui$system$colorManipulator","~$module$node_modules$$mui$material$node$colors$purple","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$$mui$material$node$colors$red","~$module$node_modules$$mui$material$node$colors$lightBlue","~$module$node_modules$$mui$material$node$colors$green"]],"~:properties",["^5",["success","mainShade","light","selected","augmentColor","disabledOpacity","paper","warning","activatedOpacity","grey","divider","focus","__esModule","secondary","info","error","contrastThreshold","mode","name","getContrastText","main","value","tonalOffset","darkShade","primary","text","action","contrastText","dark","selectedOpacity","focusOpacity","lightShade","active","hover","disabled","background","hoverOpacity","disabledBackground","color","default","common","icon"]],"~:compiled-at",1712152510803,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$material$node$styles$createPalette.js\",\n\"lineCount\":77,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@mui/material/node/styles/createPalette.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$material$node$styles$createPalette\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.dark = void 0;\\nexports.default = createPalette;\\nexports.light = void 0;\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\nvar _objectWithoutPropertiesLoose2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/objectWithoutPropertiesLoose\\\"));\\nvar _formatMuiErrorMessage2 = _interopRequireDefault(require(\\\"@mui/utils/formatMuiErrorMessage\\\"));\\nvar _deepmerge = _interopRequireDefault(require(\\\"@mui/utils/deepmerge\\\"));\\nvar _colorManipulator = require(\\\"@mui/system/colorManipulator\\\");\\nvar _common = _interopRequireDefault(require(\\\"../colors/common\\\"));\\nvar _grey = _interopRequireDefault(require(\\\"../colors/grey\\\"));\\nvar _purple = _interopRequireDefault(require(\\\"../colors/purple\\\"));\\nvar _red = _interopRequireDefault(require(\\\"../colors/red\\\"));\\nvar _orange = _interopRequireDefault(require(\\\"../colors/orange\\\"));\\nvar _blue = _interopRequireDefault(require(\\\"../colors/blue\\\"));\\nvar _lightBlue = _interopRequireDefault(require(\\\"../colors/lightBlue\\\"));\\nvar _green = _interopRequireDefault(require(\\\"../colors/green\\\"));\\nconst _excluded = [\\\"mode\\\", \\\"contrastThreshold\\\", \\\"tonalOffset\\\"];\\nconst light = exports.light = {\\n  // The colors used to style the text.\\n  text: {\\n    // The most important text.\\n    primary: 'rgba(0, 0, 0, 0.87)',\\n    // Secondary text.\\n    secondary: 'rgba(0, 0, 0, 0.6)',\\n    // Disabled text have even lower visual prominence.\\n    disabled: 'rgba(0, 0, 0, 0.38)'\\n  },\\n  // The color used to divide different elements.\\n  divider: 'rgba(0, 0, 0, 0.12)',\\n  // The background colors used to style the surfaces.\\n  // Consistency between these values is important.\\n  background: {\\n    paper: _common.default.white,\\n    default: _common.default.white\\n  },\\n  // The colors used to style the action elements.\\n  action: {\\n    // The color of an active action like an icon button.\\n    active: 'rgba(0, 0, 0, 0.54)',\\n    // The color of an hovered action.\\n    hover: 'rgba(0, 0, 0, 0.04)',\\n    hoverOpacity: 0.04,\\n    // The color of a selected action.\\n    selected: 'rgba(0, 0, 0, 0.08)',\\n    selectedOpacity: 0.08,\\n    // The color of a disabled action.\\n    disabled: 'rgba(0, 0, 0, 0.26)',\\n    // The background color of a disabled action.\\n    disabledBackground: 'rgba(0, 0, 0, 0.12)',\\n    disabledOpacity: 0.38,\\n    focus: 'rgba(0, 0, 0, 0.12)',\\n    focusOpacity: 0.12,\\n    activatedOpacity: 0.12\\n  }\\n};\\nconst dark = exports.dark = {\\n  text: {\\n    primary: _common.default.white,\\n    secondary: 'rgba(255, 255, 255, 0.7)',\\n    disabled: 'rgba(255, 255, 255, 0.5)',\\n    icon: 'rgba(255, 255, 255, 0.5)'\\n  },\\n  divider: 'rgba(255, 255, 255, 0.12)',\\n  background: {\\n    paper: '#121212',\\n    default: '#121212'\\n  },\\n  action: {\\n    active: _common.default.white,\\n    hover: 'rgba(255, 255, 255, 0.08)',\\n    hoverOpacity: 0.08,\\n    selected: 'rgba(255, 255, 255, 0.16)',\\n    selectedOpacity: 0.16,\\n    disabled: 'rgba(255, 255, 255, 0.3)',\\n    disabledBackground: 'rgba(255, 255, 255, 0.12)',\\n    disabledOpacity: 0.38,\\n    focus: 'rgba(255, 255, 255, 0.12)',\\n    focusOpacity: 0.12,\\n    activatedOpacity: 0.24\\n  }\\n};\\nfunction addLightOrDark(intent, direction, shade, tonalOffset) {\\n  const tonalOffsetLight = tonalOffset.light || tonalOffset;\\n  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;\\n  if (!intent[direction]) {\\n    if (intent.hasOwnProperty(shade)) {\\n      intent[direction] = intent[shade];\\n    } else if (direction === 'light') {\\n      intent.light = (0, _colorManipulator.lighten)(intent.main, tonalOffsetLight);\\n    } else if (direction === 'dark') {\\n      intent.dark = (0, _colorManipulator.darken)(intent.main, tonalOffsetDark);\\n    }\\n  }\\n}\\nfunction getDefaultPrimary(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _blue.default[200],\\n      light: _blue.default[50],\\n      dark: _blue.default[400]\\n    };\\n  }\\n  return {\\n    main: _blue.default[700],\\n    light: _blue.default[400],\\n    dark: _blue.default[800]\\n  };\\n}\\nfunction getDefaultSecondary(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _purple.default[200],\\n      light: _purple.default[50],\\n      dark: _purple.default[400]\\n    };\\n  }\\n  return {\\n    main: _purple.default[500],\\n    light: _purple.default[300],\\n    dark: _purple.default[700]\\n  };\\n}\\nfunction getDefaultError(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _red.default[500],\\n      light: _red.default[300],\\n      dark: _red.default[700]\\n    };\\n  }\\n  return {\\n    main: _red.default[700],\\n    light: _red.default[400],\\n    dark: _red.default[800]\\n  };\\n}\\nfunction getDefaultInfo(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _lightBlue.default[400],\\n      light: _lightBlue.default[300],\\n      dark: _lightBlue.default[700]\\n    };\\n  }\\n  return {\\n    main: _lightBlue.default[700],\\n    light: _lightBlue.default[500],\\n    dark: _lightBlue.default[900]\\n  };\\n}\\nfunction getDefaultSuccess(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _green.default[400],\\n      light: _green.default[300],\\n      dark: _green.default[700]\\n    };\\n  }\\n  return {\\n    main: _green.default[800],\\n    light: _green.default[500],\\n    dark: _green.default[900]\\n  };\\n}\\nfunction getDefaultWarning(mode = 'light') {\\n  if (mode === 'dark') {\\n    return {\\n      main: _orange.default[400],\\n      light: _orange.default[300],\\n      dark: _orange.default[700]\\n    };\\n  }\\n  return {\\n    main: '#ed6c02',\\n    // closest to orange[800] that pass 3:1.\\n    light: _orange.default[500],\\n    dark: _orange.default[900]\\n  };\\n}\\nfunction createPalette(palette) {\\n  const {\\n      mode = 'light',\\n      contrastThreshold = 3,\\n      tonalOffset = 0.2\\n    } = palette,\\n    other = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded);\\n  const primary = palette.primary || getDefaultPrimary(mode);\\n  const secondary = palette.secondary || getDefaultSecondary(mode);\\n  const error = palette.error || getDefaultError(mode);\\n  const info = palette.info || getDefaultInfo(mode);\\n  const success = palette.success || getDefaultSuccess(mode);\\n  const warning = palette.warning || getDefaultWarning(mode);\\n\\n  // Use the same logic as\\n  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59\\n  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54\\n  function getContrastText(background) {\\n    const contrastText = (0, _colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;\\n    if (process.env.NODE_ENV !== 'production') {\\n      const contrast = (0, _colorManipulator.getContrastRatio)(background, contrastText);\\n      if (contrast < 3) {\\n        console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\\\n'));\\n      }\\n    }\\n    return contrastText;\\n  }\\n  const augmentColor = ({\\n    color,\\n    name,\\n    mainShade = 500,\\n    lightShade = 300,\\n    darkShade = 700\\n  }) => {\\n    color = (0, _extends2.default)({}, color);\\n    if (!color.main && color[mainShade]) {\\n      color.main = color[mainShade];\\n    }\\n    if (!color.hasOwnProperty('main')) {\\n      throw new Error(process.env.NODE_ENV !== \\\"production\\\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\\nThe color object needs to have a \\\\`main\\\\` property or a \\\\`${mainShade}\\\\` property.` : (0, _formatMuiErrorMessage2.default)(11, name ? ` (${name})` : '', mainShade));\\n    }\\n    if (typeof color.main !== 'string') {\\n      throw new Error(process.env.NODE_ENV !== \\\"production\\\" ? `MUI: The color${name ? ` (${name})` : ''} provided to augmentColor(color) is invalid.\\n\\\\`color.main\\\\` should be a string, but \\\\`${JSON.stringify(color.main)}\\\\` was provided instead.\\n\\nDid you intend to use one of the following approaches?\\n\\nimport { green } from \\\"@mui/material/colors\\\";\\n\\nconst theme1 = createTheme({ palette: {\\n  primary: green,\\n} });\\n\\nconst theme2 = createTheme({ palette: {\\n  primary: { main: green[500] },\\n} });` : (0, _formatMuiErrorMessage2.default)(12, name ? ` (${name})` : '', JSON.stringify(color.main)));\\n    }\\n    addLightOrDark(color, 'light', lightShade, tonalOffset);\\n    addLightOrDark(color, 'dark', darkShade, tonalOffset);\\n    if (!color.contrastText) {\\n      color.contrastText = getContrastText(color.main);\\n    }\\n    return color;\\n  };\\n  const modes = {\\n    dark,\\n    light\\n  };\\n  if (process.env.NODE_ENV !== 'production') {\\n    if (!modes[mode]) {\\n      console.error(`MUI: The palette mode \\\\`${mode}\\\\` is not supported.`);\\n    }\\n  }\\n  const paletteOutput = (0, _deepmerge.default)((0, _extends2.default)({\\n    // A collection of common colors.\\n    common: (0, _extends2.default)({}, _common.default),\\n    // prevent mutable object.\\n    // The palette mode, can be light or dark.\\n    mode,\\n    // The colors used to represent primary interface elements for a user.\\n    primary: augmentColor({\\n      color: primary,\\n      name: 'primary'\\n    }),\\n    // The colors used to represent secondary interface elements for a user.\\n    secondary: augmentColor({\\n      color: secondary,\\n      name: 'secondary',\\n      mainShade: 'A400',\\n      lightShade: 'A200',\\n      darkShade: 'A700'\\n    }),\\n    // The colors used to represent interface elements that the user should be made aware of.\\n    error: augmentColor({\\n      color: error,\\n      name: 'error'\\n    }),\\n    // The colors used to represent potentially dangerous actions or important messages.\\n    warning: augmentColor({\\n      color: warning,\\n      name: 'warning'\\n    }),\\n    // The colors used to present information to the user that is neutral and not necessarily important.\\n    info: augmentColor({\\n      color: info,\\n      name: 'info'\\n    }),\\n    // The colors used to indicate the successful completion of an action that user triggered.\\n    success: augmentColor({\\n      color: success,\\n      name: 'success'\\n    }),\\n    // The grey colors.\\n    grey: _grey.default,\\n    // Used by `getContrastText()` to maximize the contrast between\\n    // the background and the text.\\n    contrastThreshold,\\n    // Takes a background color and returns the text color that maximizes the contrast.\\n    getContrastText,\\n    // Generate a rich color object.\\n    augmentColor,\\n    // Used by the functions below to shift a color's luminance by approximately\\n    // two indexes within its tonal palette.\\n    // E.g., shift from Red 500 to Red 300 or Red 700.\\n    tonalOffset\\n  }, modes[mode]), other);\\n  return paletteOutput;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"addLightOrDark\",\"intent\",\"direction\",\"shade\",\"tonalOffset\",\"tonalOffsetLight\",\"light\",\"tonalOffsetDark\",\"dark\",\"hasOwnProperty\",\"_colorManipulator\",\"lighten\",\"main\",\"darken\",\"getDefaultPrimary\",\"mode\",\"_blue\",\"default\",\"getDefaultSecondary\",\"_purple\",\"getDefaultError\",\"_red\",\"getDefaultInfo\",\"_lightBlue\",\"getDefaultSuccess\",\"_green\",\"getDefaultWarning\",\"_orange\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"createPalette\",\"palette\",\"getContrastText\",\"background\",\"contrastText\",\"getContrastRatio\",\"text\",\"primary\",\"contrastThreshold\",\"contrast\",\"console\",\"error\",\"join\",\"other\",\"_objectWithoutPropertiesLoose2\",\"_excluded\",\"secondary\",\"info\",\"success\",\"warning\",\"augmentColor\",\"color\",\"name\",\"mainShade\",\"lightShade\",\"darkShade\",\"_extends2\",\"Error\",\"JSON\",\"stringify\",\"modes\",\"paletteOutput\",\"_deepmerge\",\"common\",\"_common\",\"grey\",\"_grey\",\"disabled\",\"divider\",\"paper\",\"white\",\"action\",\"active\",\"hover\",\"hoverOpacity\",\"selected\",\"selectedOpacity\",\"disabledBackground\",\"disabledOpacity\",\"focus\",\"focusOpacity\",\"activatedOpacity\",\"icon\"]\n}\n"]