["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/system/createTheme/applyStyles.js"],"~:js","shadow$provide.module$node_modules$$mui$system$createTheme$applyStyles = function(global, require, module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.default = function(key, styles) {\n    return this.vars && \"function\" === typeof this.getColorSchemeSelector ? {[this.getColorSchemeSelector(key).replace(/(\\[[^\\]]+\\])/, \"*:where($1)\")]:styles} : this.palette.mode === key ? styles : {};\n  };\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$system$createTheme$applyStyles\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = applyStyles;\n/**\n * A universal utility to style components with multiple color modes. Always use it from the theme object.\n * It works with:\n *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)\n *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)\n *  - Zero-runtime engine\n *\n * Tips: Use an array over object spread and place `theme.applyStyles()` last.\n *\n * âœ… [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]\n *\n * \uD83D\uDEAB { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}\n *\n * @example\n * 1. using with `styled`:\n * ```jsx\n *   const Component = styled('div')(({ theme }) => [\n *     { background: '#e5e5e5' },\n *     theme.applyStyles('dark', {\n *       background: '#1c1c1c',\n *       color: '#fff',\n *     }),\n *   ]);\n * ```\n *\n * @example\n * 2. using with `sx` prop:\n * ```jsx\n *   <Box sx={theme => [\n *     { background: '#e5e5e5' },\n *     theme.applyStyles('dark', {\n *        background: '#1c1c1c',\n *        color: '#fff',\n *      }),\n *     ]}\n *   />\n * ```\n *\n * @example\n * 3. theming a component:\n * ```jsx\n *   extendTheme({\n *     components: {\n *       MuiButton: {\n *         styleOverrides: {\n *           root: ({ theme }) => [\n *             { background: '#e5e5e5' },\n *             theme.applyStyles('dark', {\n *               background: '#1c1c1c',\n *               color: '#fff',\n *             }),\n *           ],\n *         },\n *       }\n *     }\n *   })\n *```\n */\nfunction applyStyles(key, styles) {\n  // @ts-expect-error this is 'any' type\n  const theme = this;\n  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {\n    // If CssVarsProvider is used as a provider,\n    // returns '* :where([data-mui-color-scheme=\"light|dark\"]) &'\n    const selector = theme.getColorSchemeSelector(key).replace(/(\\[[^\\]]+\\])/, '*:where($1)');\n    return {\n      [selector]: styles\n    };\n  }\n  if (theme.palette.mode === key) {\n    return styles;\n  }\n  return {};\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1712152510493,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$system$createTheme$applyStyles.js\",\n\"lineCount\":7,\n\"mappings\":\"AAAAA,cAAA,CAAA,uDAAA,GAA4E,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAGpHC,QAAOC,CAAAA,cAAP,CAAsBF,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CG,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAH,SAAQI,CAAAA,OAAR,GA2DAC,QAAoB,CAACC,GAAD,EAAMC,MAAN,CAAc;AAGhC,WADcC,IACJC,CAAAA,IAAV,IAA0D,UAA1D,KAAkB,MADJD,KACiBE,CAAAA,sBAA/B,GAIS,CACL,CANUF,IAIWE,CAAAA,sBAAN,CAA6BJ,GAA7B,CAAkCK,CAAAA,OAAlCC,CAA0C,cAA1CA,EAA0D,aAA1DA,CAEf,EAAYL,MADP,CAJT,GADcC,IASJK,CAAAA,OAAQC,CAAAA,IAAlB,KAA2BR,GAA3B,GACSC,MADT,GAGO,EAXP;AAHgC,GA3DlC;AANoH,CAApH;;\",\n\"sources\":[\"node_modules/@mui/system/createTheme/applyStyles.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$system$createTheme$applyStyles\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = applyStyles;\\n/**\\n * A universal utility to style components with multiple color modes. Always use it from the theme object.\\n * It works with:\\n *  - [Basic theme](https://mui.com/material-ui/customization/dark-mode/)\\n *  - [CSS theme variables](https://mui.com/material-ui/experimental-api/css-theme-variables/overview/)\\n *  - Zero-runtime engine\\n *\\n * Tips: Use an array over object spread and place `theme.applyStyles()` last.\\n *\\n * \\u2705 [{ background: '#e5e5e5' }, theme.applyStyles('dark', { background: '#1c1c1c' })]\\n *\\n * \\ud83d\\udeab { background: '#e5e5e5', ...theme.applyStyles('dark', { background: '#1c1c1c' })}\\n *\\n * @example\\n * 1. using with `styled`:\\n * ```jsx\\n *   const Component = styled('div')(({ theme }) => [\\n *     { background: '#e5e5e5' },\\n *     theme.applyStyles('dark', {\\n *       background: '#1c1c1c',\\n *       color: '#fff',\\n *     }),\\n *   ]);\\n * ```\\n *\\n * @example\\n * 2. using with `sx` prop:\\n * ```jsx\\n *   <Box sx={theme => [\\n *     { background: '#e5e5e5' },\\n *     theme.applyStyles('dark', {\\n *        background: '#1c1c1c',\\n *        color: '#fff',\\n *      }),\\n *     ]}\\n *   />\\n * ```\\n *\\n * @example\\n * 3. theming a component:\\n * ```jsx\\n *   extendTheme({\\n *     components: {\\n *       MuiButton: {\\n *         styleOverrides: {\\n *           root: ({ theme }) => [\\n *             { background: '#e5e5e5' },\\n *             theme.applyStyles('dark', {\\n *               background: '#1c1c1c',\\n *               color: '#fff',\\n *             }),\\n *           ],\\n *         },\\n *       }\\n *     }\\n *   })\\n *```\\n */\\nfunction applyStyles(key, styles) {\\n  // @ts-expect-error this is 'any' type\\n  const theme = this;\\n  if (theme.vars && typeof theme.getColorSchemeSelector === 'function') {\\n    // If CssVarsProvider is used as a provider,\\n    // returns '* :where([data-mui-color-scheme=\\\"light|dark\\\"]) &'\\n    const selector = theme.getColorSchemeSelector(key).replace(/(\\\\[[^\\\\]]+\\\\])/, '*:where($1)');\\n    return {\\n      [selector]: styles\\n    };\\n  }\\n  if (theme.palette.mode === key) {\\n    return styles;\\n  }\\n  return {};\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"Object\",\"defineProperty\",\"value\",\"default\",\"applyStyles\",\"key\",\"styles\",\"theme\",\"vars\",\"getColorSchemeSelector\",\"replace\",\"selector\",\"palette\",\"mode\"]\n}\n"]