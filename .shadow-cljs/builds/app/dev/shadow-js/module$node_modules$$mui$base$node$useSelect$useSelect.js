["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/base/node/useSelect/useSelect.js"],"~:js","shadow$provide.module$node_modules$$mui$base$node$useSelect$useSelect = function(global, require, module, exports) {\n  function _getRequireWildcardCache(e) {\n    if (\"function\" != typeof WeakMap) {\n      return null;\n    }\n    var r = new WeakMap(), t = new WeakMap();\n    return (_getRequireWildcardCache = function(e) {\n      return e ? t : r;\n    })(e);\n  }\n  function defaultFormValueProvider(selectedOption) {\n    return Array.isArray(selectedOption) ? 0 === selectedOption.length ? \"\" : JSON.stringify(selectedOption.map(o => o.value)) : null == (null == selectedOption ? void 0 : selectedOption.value) ? \"\" : \"string\" === typeof selectedOption.value || \"number\" === typeof selectedOption.value ? selectedOption.value : JSON.stringify(selectedOption.value);\n  }\n  \"use client\";\n  global = require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.useSelect = function(props) {\n    const {areOptionsEqual, buttonRef:buttonRefProp, defaultOpen = !1, defaultValue:defaultValueProp, disabled = !1, listboxId:listboxIdProp, listboxRef:listboxRefProp, multiple = !1, name, required, onChange, onHighlightChange, onOpenChange, open:openProp, options:optionsParam, getOptionAsString = _defaultOptionStringifier.defaultOptionStringifier, getSerializedValue = defaultFormValueProvider, value:valueProp, componentName = \"useSelect\"} = props, buttonRef = React.useRef(null);\n    var handleButtonRef = (0,_utils.unstable_useForkRef)(buttonRefProp, buttonRef);\n    const listboxRef = React.useRef(null), listboxId = (0,_utils.unstable_useId)(listboxIdProp);\n    let defaultValue;\n    void 0 === valueProp && void 0 === defaultValueProp ? defaultValue = [] : void 0 !== defaultValueProp && (defaultValue = multiple ? defaultValueProp : null == defaultValueProp ? [] : [defaultValueProp]);\n    const value = React.useMemo(() => {\n      if (void 0 !== valueProp) {\n        return multiple ? valueProp : null == valueProp ? [] : [valueProp];\n      }\n    }, [valueProp, multiple]), {subitems, contextValue:compoundComponentContextValue} = (0,_useCompound.useCompoundParent)(), options = React.useMemo(() => null != optionsParam ? new Map(optionsParam.map((option, index) => [option.value, {value:option.value, label:option.label, disabled:option.disabled, ref:React.createRef(), id:`${listboxId}_${index}`}])) : subitems, [optionsParam, subitems, listboxId]);\n    var handleListboxRef = (0,_utils.unstable_useForkRef)(listboxRefProp, listboxRef);\n    const {getRootProps:getButtonRootProps, active:buttonActive, focusVisible:buttonFocusVisible, rootRef:mergedButtonRef} = (0,_useButton.useButton)({disabled, rootRef:handleButtonRef}), optionValues = React.useMemo(() => Array.from(options.keys()), [options]), getOptionByValue = React.useCallback(valueToGet => {\n      if (void 0 !== areOptionsEqual) {\n        const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n        return options.get(similarValue);\n      }\n      return options.get(valueToGet);\n    }, [options, areOptionsEqual, optionValues]);\n    handleButtonRef = React.useCallback(valueToCheck => {\n      var _option$disabled;\n      valueToCheck = getOptionByValue(valueToCheck);\n      return null != (_option$disabled = null == valueToCheck ? void 0 : valueToCheck.disabled) ? _option$disabled : !1;\n    }, [getOptionByValue]);\n    const stringifyOption = React.useCallback(valueToCheck => (valueToCheck = getOptionByValue(valueToCheck)) ? getOptionAsString(valueToCheck) : \"\", [getOptionByValue, getOptionAsString]), controlledState = React.useMemo(() => ({selectedValues:value, open:openProp}), [value, openProp]), getItemId = React.useCallback(itemValue => {\n      var _options$get;\n      return null == (_options$get = options.get(itemValue)) ? void 0 : _options$get.id;\n    }, [options]), handleSelectionChange = React.useCallback((event, newValues) => {\n      if (multiple) {\n        null == onChange || onChange(event, newValues);\n      } else {\n        var _newValues$;\n        null == onChange || onChange(event, null != (_newValues$ = newValues[0]) ? _newValues$ : null);\n      }\n    }, [multiple, onChange]), handleHighlightChange = React.useCallback((event, newValue) => {\n      null == onHighlightChange || onHighlightChange(event, null != newValue ? newValue : null);\n    }, [onHighlightChange]), handleStateChange = React.useCallback((event, field, fieldValue) => {\n      if (\"open\" === field && (null == onOpenChange || onOpenChange(fieldValue), !1 === fieldValue && \"blur\" !== (null == event ? void 0 : event.type))) {\n        var _buttonRef$current;\n        null == (_buttonRef$current = buttonRef.current) || _buttonRef$current.focus();\n      }\n    }, [onOpenChange]), getItemDomElement = React.useCallback(itemId => {\n      var _subitems$get$ref$cur, _subitems$get;\n      return null == itemId ? null : null != (_subitems$get$ref$cur = null == (_subitems$get = subitems.get(itemId)) ? void 0 : _subitems$get.ref.current) ? _subitems$get$ref$cur : null;\n    }, [subitems]);\n    handleListboxRef = {getInitialState:() => {\n      var _defaultValue;\n      return {highlightedValue:null, selectedValues:null != (_defaultValue = defaultValue) ? _defaultValue : [], open:defaultOpen};\n    }, getItemId, controlledProps:controlledState, focusManagement:\"DOM\", getItemDomElement, itemComparer:areOptionsEqual, isItemDisabled:handleButtonRef, rootRef:handleListboxRef, onChange:handleSelectionChange, onHighlightChange:handleHighlightChange, onStateChange:handleStateChange, reducerActionContext:React.useMemo(() => ({multiple}), [multiple]), items:optionValues, getItemAsString:stringifyOption, selectionMode:multiple ? \"multiple\" : \"single\", stateReducer:_selectReducer.selectReducer, componentName};\n    const {dispatch, getRootProps:getListboxRootProps, contextValue:listContextValue, state:{open, highlightedValue:highlightedOption, selectedValues:selectedOptions}, rootRef:mergedListRootRef} = (0,_useList.useList)(handleListboxRef), isInitiallyOpen = React.useRef(open);\n    (0,_utils.unstable_useEnhancedEffect)(() => {\n      if (open && null !== highlightedOption) {\n        var _getOptionByValue, optionRef = null == (_getOptionByValue = getOptionByValue(highlightedOption)) ? void 0 : _getOptionByValue.ref;\n        listboxRef.current && null != optionRef && optionRef.current && (isInitiallyOpen.current || optionRef.current.focus({preventScroll:!0}), _getOptionByValue = listboxRef.current.getBoundingClientRect(), optionRef = optionRef.current.getBoundingClientRect(), optionRef.top < _getOptionByValue.top ? listboxRef.current.scrollTop -= _getOptionByValue.top - optionRef.top : optionRef.bottom > _getOptionByValue.bottom && (listboxRef.current.scrollTop += optionRef.bottom - _getOptionByValue.bottom));\n      }\n    }, [open, highlightedOption, getOptionByValue]);\n    const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]), createHandleButtonClick = externalEventHandlers => event => {\n      var _externalEventHandler;\n      null == externalEventHandlers || null == (_externalEventHandler = externalEventHandlers.onClick) || _externalEventHandler.call(externalEventHandlers, event);\n      event.defaultMuiPrevented || dispatch({type:_useSelect.SelectActionTypes.buttonClick, event});\n    }, createHandleButtonKeyDown = otherHandlers => event => {\n      var _otherHandlers$onKeyD;\n      null == (_otherHandlers$onKeyD = otherHandlers.onKeyDown) || _otherHandlers$onKeyD.call(otherHandlers, event);\n      event.defaultMuiPrevented || \"ArrowDown\" !== event.key && \"ArrowUp\" !== event.key || (event.preventDefault(), dispatch({type:_useList.ListActionTypes.keyDown, key:event.key, event}));\n    }, getButtonOwnRootProps = (otherHandlers = {}) => ({onClick:createHandleButtonClick(otherHandlers), onKeyDown:createHandleButtonKeyDown(otherHandlers)}), getSelectTriggerProps = (otherHandlers = {}) => (0,_extends2.default)({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {role:\"combobox\", \"aria-expanded\":open, \"aria-controls\":listboxId}), createListboxHandleBlur = otherHandlers => event => {\n      var _otherHandlers$onBlur, _listboxRef$current;\n      null == (_otherHandlers$onBlur = otherHandlers.onBlur) || _otherHandlers$onBlur.call(otherHandlers, event);\n      !event.defaultMuiPrevented && (null != (_listboxRef$current = listboxRef.current) && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) && (event.defaultMuiPrevented = !0);\n    }, getOwnListboxHandlers = (otherHandlers = {}) => ({onBlur:createListboxHandleBlur(otherHandlers)});\n    React.useDebugValue({selectedOptions, highlightedOption, open});\n    handleListboxRef = React.useMemo(() => (0,_extends2.default)({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n    props = props.multiple ? selectedOptions : 0 < selectedOptions.length ? selectedOptions[0] : null;\n    let selectedOptionsMetadata;\n    if (multiple) {\n      selectedOptionsMetadata = props.map(v => getOptionMetadata(v)).filter(o => void 0 !== o);\n    } else {\n      var _getOptionMetadata;\n      selectedOptionsMetadata = null != (_getOptionMetadata = getOptionMetadata(props)) ? _getOptionMetadata : null;\n    }\n    const createHandleHiddenInputChange = externalEventHandlers => event => {\n      var _externalEventHandler2;\n      null == externalEventHandlers || null == (_externalEventHandler2 = externalEventHandlers.onChange) || _externalEventHandler2.call(externalEventHandlers, event);\n      event.defaultMuiPrevented || (_externalEventHandler2 = options.get(event.target.value), \"\" === event.target.value ? dispatch({type:_useList.ListActionTypes.clearSelection}) : void 0 !== _externalEventHandler2 && dispatch({type:_useSelect.SelectActionTypes.browserAutoFill, item:_externalEventHandler2.value, event}));\n    };\n    return {buttonActive, buttonFocusVisible, buttonRef:mergedButtonRef, contextValue:handleListboxRef, disabled, dispatch, getButtonProps:(externalProps = {}) => {\n      const externalEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(externalProps), combinedProps = (0,_combineHooksSlotProps.combineHooksSlotProps)(getSelectTriggerProps, getButtonRootProps);\n      return (0,_extends2.default)({}, externalProps, combinedProps(externalEventHandlers));\n    }, getHiddenInputProps:(externalProps = {}) => {\n      const externalEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(externalProps);\n      return (0,_extends2.default)({name, tabIndex:-1, \"aria-hidden\":!0, required:required ? !0 : void 0, value:getSerializedValue(selectedOptionsMetadata), style:_utils.visuallyHidden}, externalProps, {onChange:createHandleHiddenInputChange(externalEventHandlers)});\n    }, getListboxProps:(externalProps = {}) => {\n      const externalEventHandlers = (0,_extractEventHandlers.extractEventHandlers)(externalProps), getCombinedRootProps = (0,_combineHooksSlotProps.combineHooksSlotProps)(getOwnListboxHandlers, getListboxRootProps);\n      return (0,_extends2.default)({id:listboxId, role:\"listbox\", \"aria-multiselectable\":multiple ? \"true\" : void 0}, externalProps, getCombinedRootProps(externalEventHandlers));\n    }, getOptionMetadata, listboxRef:mergedListRootRef, open, options:optionValues, value:props, highlightedOption};\n  };\n  var _extends2 = global(require(\"module$node_modules$$babel$runtime$helpers$extends\")), React = function(e, r) {\n    if (!r && e && e.__esModule) {\n      return e;\n    }\n    if (null === e || \"object\" != typeof e && \"function\" != typeof e) {\n      return {default:e};\n    }\n    if ((r = _getRequireWildcardCache(r)) && r.has(e)) {\n      return r.get(e);\n    }\n    var n = {__proto__:null}, a = Object.defineProperty && Object.getOwnPropertyDescriptor, u;\n    for (u in e) {\n      if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) {\n        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n      }\n    }\n    return n.default = e, r && r.set(e, n), n;\n  }(require(\"module$node_modules$react$index\")), _utils = require(\"module$node_modules$$mui$utils$node$index\"), _useButton = require(\"module$node_modules$$mui$base$node$useButton$index\"), _useSelect = require(\"module$node_modules$$mui$base$node$useSelect$useSelect_types\"), _useList = require(\"module$node_modules$$mui$base$node$useList$index\"), _defaultOptionStringifier = require(\"module$node_modules$$mui$base$node$useSelect$defaultOptionStringifier\"), _useCompound = require(\"module$node_modules$$mui$base$node$useCompound$index\"), \n  _extractEventHandlers = require(\"module$node_modules$$mui$base$node$utils$extractEventHandlers\"), _selectReducer = require(\"module$node_modules$$mui$base$node$useSelect$selectReducer\"), _combineHooksSlotProps = require(\"module$node_modules$$mui$base$node$utils$combineHooksSlotProps\");\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$base$node$useSelect$useSelect\"] = function(global,require,module,exports) {\n\"use strict\";\n'use client';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSelect = useSelect;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _utils = require(\"@mui/utils\");\nvar _useButton = require(\"../useButton\");\nvar _useSelect = require(\"./useSelect.types\");\nvar _useList = require(\"../useList\");\nvar _defaultOptionStringifier = require(\"./defaultOptionStringifier\");\nvar _useCompound = require(\"../useCompound\");\nvar _extractEventHandlers = require(\"../utils/extractEventHandlers\");\nvar _selectReducer = require(\"./selectReducer\");\nvar _combineHooksSlotProps = require(\"../utils/combineHooksSlotProps\");\nfunction _getRequireWildcardCache(e) { if (\"function\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \"object\" != typeof e && \"function\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\"default\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\nfunction defaultFormValueProvider(selectedOption) {\n  if (Array.isArray(selectedOption)) {\n    if (selectedOption.length === 0) {\n      return '';\n    }\n    return JSON.stringify(selectedOption.map(o => o.value));\n  }\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\n    return '';\n  }\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\n    return selectedOption.value;\n  }\n  return JSON.stringify(selectedOption.value);\n}\n\n/**\n *\n * Demos:\n *\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\n *\n * API:\n *\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\n */\nfunction useSelect(props) {\n  const {\n    areOptionsEqual,\n    buttonRef: buttonRefProp,\n    defaultOpen = false,\n    defaultValue: defaultValueProp,\n    disabled = false,\n    listboxId: listboxIdProp,\n    listboxRef: listboxRefProp,\n    multiple = false,\n    name,\n    required,\n    onChange,\n    onHighlightChange,\n    onOpenChange,\n    open: openProp,\n    options: optionsParam,\n    getOptionAsString = _defaultOptionStringifier.defaultOptionStringifier,\n    getSerializedValue = defaultFormValueProvider,\n    value: valueProp,\n    componentName = 'useSelect'\n  } = props;\n  const buttonRef = React.useRef(null);\n  const handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);\n  const listboxRef = React.useRef(null);\n  const listboxId = (0, _utils.unstable_useId)(listboxIdProp);\n  let defaultValue;\n  if (valueProp === undefined && defaultValueProp === undefined) {\n    defaultValue = [];\n  } else if (defaultValueProp !== undefined) {\n    if (multiple) {\n      defaultValue = defaultValueProp;\n    } else {\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\n    }\n  }\n  const value = React.useMemo(() => {\n    if (valueProp !== undefined) {\n      if (multiple) {\n        return valueProp;\n      }\n      return valueProp == null ? [] : [valueProp];\n    }\n    return undefined;\n  }, [valueProp, multiple]);\n  const {\n    subitems,\n    contextValue: compoundComponentContextValue\n  } = (0, _useCompound.useCompoundParent)();\n  const options = React.useMemo(() => {\n    if (optionsParam != null) {\n      return new Map(optionsParam.map((option, index) => [option.value, {\n        value: option.value,\n        label: option.label,\n        disabled: option.disabled,\n        ref: /*#__PURE__*/React.createRef(),\n        id: `${listboxId}_${index}`\n      }]));\n    }\n    return subitems;\n  }, [optionsParam, subitems, listboxId]);\n  const handleListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef);\n  const {\n    getRootProps: getButtonRootProps,\n    active: buttonActive,\n    focusVisible: buttonFocusVisible,\n    rootRef: mergedButtonRef\n  } = (0, _useButton.useButton)({\n    disabled,\n    rootRef: handleButtonRef\n  });\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\n  const getOptionByValue = React.useCallback(valueToGet => {\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\n    // If it's provided, we assume that the user wants to compare the options by value.\n    if (areOptionsEqual !== undefined) {\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\n      return options.get(similarValue);\n    }\n    return options.get(valueToGet);\n  }, [options, areOptionsEqual, optionValues]);\n  const isItemDisabled = React.useCallback(valueToCheck => {\n    var _option$disabled;\n    const option = getOptionByValue(valueToCheck);\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\n  }, [getOptionByValue]);\n  const stringifyOption = React.useCallback(valueToCheck => {\n    const option = getOptionByValue(valueToCheck);\n    if (!option) {\n      return '';\n    }\n    return getOptionAsString(option);\n  }, [getOptionByValue, getOptionAsString]);\n  const controlledState = React.useMemo(() => ({\n    selectedValues: value,\n    open: openProp\n  }), [value, openProp]);\n  const getItemId = React.useCallback(itemValue => {\n    var _options$get;\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\n  }, [options]);\n  const handleSelectionChange = React.useCallback((event, newValues) => {\n    if (multiple) {\n      onChange == null || onChange(event, newValues);\n    } else {\n      var _newValues$;\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\n    }\n  }, [multiple, onChange]);\n  const handleHighlightChange = React.useCallback((event, newValue) => {\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\n  }, [onHighlightChange]);\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\n    if (field === 'open') {\n      onOpenChange == null || onOpenChange(fieldValue);\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\n        var _buttonRef$current;\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\n      }\n    }\n  }, [onOpenChange]);\n  const getItemDomElement = React.useCallback(itemId => {\n    var _subitems$get$ref$cur, _subitems$get;\n    if (itemId == null) {\n      return null;\n    }\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\n  }, [subitems]);\n  const useListParameters = {\n    getInitialState: () => {\n      var _defaultValue;\n      return {\n        highlightedValue: null,\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\n        open: defaultOpen\n      };\n    },\n    getItemId,\n    controlledProps: controlledState,\n    focusManagement: 'DOM',\n    getItemDomElement,\n    itemComparer: areOptionsEqual,\n    isItemDisabled,\n    rootRef: handleListboxRef,\n    onChange: handleSelectionChange,\n    onHighlightChange: handleHighlightChange,\n    onStateChange: handleStateChange,\n    reducerActionContext: React.useMemo(() => ({\n      multiple\n    }), [multiple]),\n    items: optionValues,\n    getItemAsString: stringifyOption,\n    selectionMode: multiple ? 'multiple' : 'single',\n    stateReducer: _selectReducer.selectReducer,\n    componentName\n  };\n  const {\n    dispatch,\n    getRootProps: getListboxRootProps,\n    contextValue: listContextValue,\n    state: {\n      open,\n      highlightedValue: highlightedOption,\n      selectedValues: selectedOptions\n    },\n    rootRef: mergedListRootRef\n  } = (0, _useList.useList)(useListParameters);\n\n  // store the initial open state to prevent focus stealing\n  // (the first option gets focused only when the select is opened by the user)\n  const isInitiallyOpen = React.useRef(open);\n  (0, _utils.unstable_useEnhancedEffect)(() => {\n    if (open && highlightedOption !== null) {\n      var _getOptionByValue;\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\n        return;\n      }\n      if (!isInitiallyOpen.current) {\n        optionRef.current.focus({\n          preventScroll: true\n        });\n      }\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\n      const optionClientRect = optionRef.current.getBoundingClientRect();\n      if (optionClientRect.top < listboxClientRect.top) {\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\n      }\n    }\n  }, [open, highlightedOption, getOptionByValue]);\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\n  const createHandleButtonClick = externalEventHandlers => event => {\n    var _externalEventHandler;\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\n    if (!event.defaultMuiPrevented) {\n      const action = {\n        type: _useSelect.SelectActionTypes.buttonClick,\n        event\n      };\n      dispatch(action);\n    }\n  };\n  const createHandleButtonKeyDown = otherHandlers => event => {\n    var _otherHandlers$onKeyD;\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      event.preventDefault();\n      dispatch({\n        type: _useList.ListActionTypes.keyDown,\n        key: event.key,\n        event\n      });\n    }\n  };\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\n    onClick: createHandleButtonClick(otherHandlers),\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\n  });\n  const getSelectTriggerProps = (otherHandlers = {}) => {\n    return (0, _extends2.default)({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\n      role: 'combobox',\n      'aria-expanded': open,\n      'aria-controls': listboxId\n    });\n  };\n  const getButtonProps = (externalProps = {}) => {\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\n    const combinedProps = (0, _combineHooksSlotProps.combineHooksSlotProps)(getSelectTriggerProps, getButtonRootProps);\n    return (0, _extends2.default)({}, externalProps, combinedProps(externalEventHandlers));\n  };\n  const createListboxHandleBlur = otherHandlers => event => {\n    var _otherHandlers$onBlur, _listboxRef$current;\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\n      event.defaultMuiPrevented = true;\n    }\n  };\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\n    onBlur: createListboxHandleBlur(otherHandlers)\n  });\n  const getListboxProps = (externalProps = {}) => {\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\n    const getCombinedRootProps = (0, _combineHooksSlotProps.combineHooksSlotProps)(getOwnListboxHandlers, getListboxRootProps);\n    return (0, _extends2.default)({\n      id: listboxId,\n      role: 'listbox',\n      'aria-multiselectable': multiple ? 'true' : undefined\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\n  };\n  React.useDebugValue({\n    selectedOptions,\n    highlightedOption,\n    open\n  });\n  const contextValue = React.useMemo(() => (0, _extends2.default)({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\n  let selectValue;\n  if (props.multiple) {\n    selectValue = selectedOptions;\n  } else {\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\n  }\n  let selectedOptionsMetadata;\n  if (multiple) {\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\n  } else {\n    var _getOptionMetadata;\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\n  }\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\n    var _externalEventHandler2;\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\n    if (event.defaultMuiPrevented) {\n      return;\n    }\n    const option = options.get(event.target.value);\n\n    // support autofill\n    if (event.target.value === '') {\n      dispatch({\n        type: _useList.ListActionTypes.clearSelection\n      });\n    } else if (option !== undefined) {\n      dispatch({\n        type: _useSelect.SelectActionTypes.browserAutoFill,\n        item: option.value,\n        event\n      });\n    }\n  };\n  const getHiddenInputProps = (externalProps = {}) => {\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\n    return (0, _extends2.default)({\n      name,\n      tabIndex: -1,\n      'aria-hidden': true,\n      required: required ? true : undefined,\n      value: getSerializedValue(selectedOptionsMetadata),\n      style: _utils.visuallyHidden\n    }, externalProps, {\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\n    });\n  };\n  return {\n    buttonActive,\n    buttonFocusVisible,\n    buttonRef: mergedButtonRef,\n    contextValue,\n    disabled,\n    dispatch,\n    getButtonProps,\n    getHiddenInputProps,\n    getListboxProps,\n    getOptionMetadata,\n    listboxRef: mergedListRootRef,\n    open,\n    options: optionValues,\n    value: selectValue,\n    highlightedOption\n  };\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$mui$base$node$utils$combineHooksSlotProps","~$module$node_modules$$mui$base$node$useList$index","~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$react$index","~$shadow.js","~$module$node_modules$$mui$base$node$useButton$index","~$module$node_modules$$babel$runtime$helpers$extends","~$module$node_modules$$mui$utils$node$index","~$module$node_modules$$mui$base$node$useSelect$defaultOptionStringifier","~$module$node_modules$$mui$base$node$useSelect$selectReducer","~$module$node_modules$$mui$base$node$useSelect$useSelect_types","~$module$node_modules$$mui$base$node$utils$extractEventHandlers","~$module$node_modules$$mui$base$node$useCompound$index"]],"~:properties",["^5",["getItemDomElement","isItemDisabled","buttonActive","role","getButtonProps","itemComparer","rootRef","buttonRef","selectedValues","dispatch","onChange","listboxRef","highlightedOption","getHiddenInputProps","tabIndex","selectionMode","label","key","__esModule","selectedOptions","componentName","id","event","reducerActionContext","focusManagement","getItemId","getOptionMetadata","name","style","value","items","preventScroll","getInitialState","contextValue","item","stateReducer","onHighlightChange","defaultMuiPrevented","onBlur","buttonFocusVisible","onClick","required","type","onStateChange","highlightedValue","ref","__proto__","getItemAsString","onKeyDown","useSelect","controlledProps","open","disabled","options","scrollTop","default","getListboxProps","multiple"]],"~:compiled-at",1712152511301,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$base$node$useSelect$useSelect.js\",\n\"lineCount\":133,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/@mui/base/node/useSelect/useSelect.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$base$node$useSelect$useSelect\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n'use client';\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.useSelect = useSelect;\\nvar _extends2 = _interopRequireDefault(require(\\\"@babel/runtime/helpers/extends\\\"));\\nvar React = _interopRequireWildcard(require(\\\"react\\\"));\\nvar _utils = require(\\\"@mui/utils\\\");\\nvar _useButton = require(\\\"../useButton\\\");\\nvar _useSelect = require(\\\"./useSelect.types\\\");\\nvar _useList = require(\\\"../useList\\\");\\nvar _defaultOptionStringifier = require(\\\"./defaultOptionStringifier\\\");\\nvar _useCompound = require(\\\"../useCompound\\\");\\nvar _extractEventHandlers = require(\\\"../utils/extractEventHandlers\\\");\\nvar _selectReducer = require(\\\"./selectReducer\\\");\\nvar _combineHooksSlotProps = require(\\\"../utils/combineHooksSlotProps\\\");\\nfunction _getRequireWildcardCache(e) { if (\\\"function\\\" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }\\nfunction _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || \\\"object\\\" != typeof e && \\\"function\\\" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if (\\\"default\\\" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }\\nfunction defaultFormValueProvider(selectedOption) {\\n  if (Array.isArray(selectedOption)) {\\n    if (selectedOption.length === 0) {\\n      return '';\\n    }\\n    return JSON.stringify(selectedOption.map(o => o.value));\\n  }\\n  if ((selectedOption == null ? void 0 : selectedOption.value) == null) {\\n    return '';\\n  }\\n  if (typeof selectedOption.value === 'string' || typeof selectedOption.value === 'number') {\\n    return selectedOption.value;\\n  }\\n  return JSON.stringify(selectedOption.value);\\n}\\n\\n/**\\n *\\n * Demos:\\n *\\n * - [Select](https://mui.com/base-ui/react-select/#hooks)\\n *\\n * API:\\n *\\n * - [useSelect API](https://mui.com/base-ui/react-select/hooks-api/#use-select)\\n */\\nfunction useSelect(props) {\\n  const {\\n    areOptionsEqual,\\n    buttonRef: buttonRefProp,\\n    defaultOpen = false,\\n    defaultValue: defaultValueProp,\\n    disabled = false,\\n    listboxId: listboxIdProp,\\n    listboxRef: listboxRefProp,\\n    multiple = false,\\n    name,\\n    required,\\n    onChange,\\n    onHighlightChange,\\n    onOpenChange,\\n    open: openProp,\\n    options: optionsParam,\\n    getOptionAsString = _defaultOptionStringifier.defaultOptionStringifier,\\n    getSerializedValue = defaultFormValueProvider,\\n    value: valueProp,\\n    componentName = 'useSelect'\\n  } = props;\\n  const buttonRef = React.useRef(null);\\n  const handleButtonRef = (0, _utils.unstable_useForkRef)(buttonRefProp, buttonRef);\\n  const listboxRef = React.useRef(null);\\n  const listboxId = (0, _utils.unstable_useId)(listboxIdProp);\\n  let defaultValue;\\n  if (valueProp === undefined && defaultValueProp === undefined) {\\n    defaultValue = [];\\n  } else if (defaultValueProp !== undefined) {\\n    if (multiple) {\\n      defaultValue = defaultValueProp;\\n    } else {\\n      defaultValue = defaultValueProp == null ? [] : [defaultValueProp];\\n    }\\n  }\\n  const value = React.useMemo(() => {\\n    if (valueProp !== undefined) {\\n      if (multiple) {\\n        return valueProp;\\n      }\\n      return valueProp == null ? [] : [valueProp];\\n    }\\n    return undefined;\\n  }, [valueProp, multiple]);\\n  const {\\n    subitems,\\n    contextValue: compoundComponentContextValue\\n  } = (0, _useCompound.useCompoundParent)();\\n  const options = React.useMemo(() => {\\n    if (optionsParam != null) {\\n      return new Map(optionsParam.map((option, index) => [option.value, {\\n        value: option.value,\\n        label: option.label,\\n        disabled: option.disabled,\\n        ref: /*#__PURE__*/React.createRef(),\\n        id: `${listboxId}_${index}`\\n      }]));\\n    }\\n    return subitems;\\n  }, [optionsParam, subitems, listboxId]);\\n  const handleListboxRef = (0, _utils.unstable_useForkRef)(listboxRefProp, listboxRef);\\n  const {\\n    getRootProps: getButtonRootProps,\\n    active: buttonActive,\\n    focusVisible: buttonFocusVisible,\\n    rootRef: mergedButtonRef\\n  } = (0, _useButton.useButton)({\\n    disabled,\\n    rootRef: handleButtonRef\\n  });\\n  const optionValues = React.useMemo(() => Array.from(options.keys()), [options]);\\n  const getOptionByValue = React.useCallback(valueToGet => {\\n    // This can't be simply `options.get(valueToGet)` because of the `areOptionsEqual` prop.\\n    // If it's provided, we assume that the user wants to compare the options by value.\\n    if (areOptionsEqual !== undefined) {\\n      const similarValue = optionValues.find(optionValue => areOptionsEqual(optionValue, valueToGet));\\n      return options.get(similarValue);\\n    }\\n    return options.get(valueToGet);\\n  }, [options, areOptionsEqual, optionValues]);\\n  const isItemDisabled = React.useCallback(valueToCheck => {\\n    var _option$disabled;\\n    const option = getOptionByValue(valueToCheck);\\n    return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;\\n  }, [getOptionByValue]);\\n  const stringifyOption = React.useCallback(valueToCheck => {\\n    const option = getOptionByValue(valueToCheck);\\n    if (!option) {\\n      return '';\\n    }\\n    return getOptionAsString(option);\\n  }, [getOptionByValue, getOptionAsString]);\\n  const controlledState = React.useMemo(() => ({\\n    selectedValues: value,\\n    open: openProp\\n  }), [value, openProp]);\\n  const getItemId = React.useCallback(itemValue => {\\n    var _options$get;\\n    return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;\\n  }, [options]);\\n  const handleSelectionChange = React.useCallback((event, newValues) => {\\n    if (multiple) {\\n      onChange == null || onChange(event, newValues);\\n    } else {\\n      var _newValues$;\\n      onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);\\n    }\\n  }, [multiple, onChange]);\\n  const handleHighlightChange = React.useCallback((event, newValue) => {\\n    onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);\\n  }, [onHighlightChange]);\\n  const handleStateChange = React.useCallback((event, field, fieldValue) => {\\n    if (field === 'open') {\\n      onOpenChange == null || onOpenChange(fieldValue);\\n      if (fieldValue === false && (event == null ? void 0 : event.type) !== 'blur') {\\n        var _buttonRef$current;\\n        (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();\\n      }\\n    }\\n  }, [onOpenChange]);\\n  const getItemDomElement = React.useCallback(itemId => {\\n    var _subitems$get$ref$cur, _subitems$get;\\n    if (itemId == null) {\\n      return null;\\n    }\\n    return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;\\n  }, [subitems]);\\n  const useListParameters = {\\n    getInitialState: () => {\\n      var _defaultValue;\\n      return {\\n        highlightedValue: null,\\n        selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],\\n        open: defaultOpen\\n      };\\n    },\\n    getItemId,\\n    controlledProps: controlledState,\\n    focusManagement: 'DOM',\\n    getItemDomElement,\\n    itemComparer: areOptionsEqual,\\n    isItemDisabled,\\n    rootRef: handleListboxRef,\\n    onChange: handleSelectionChange,\\n    onHighlightChange: handleHighlightChange,\\n    onStateChange: handleStateChange,\\n    reducerActionContext: React.useMemo(() => ({\\n      multiple\\n    }), [multiple]),\\n    items: optionValues,\\n    getItemAsString: stringifyOption,\\n    selectionMode: multiple ? 'multiple' : 'single',\\n    stateReducer: _selectReducer.selectReducer,\\n    componentName\\n  };\\n  const {\\n    dispatch,\\n    getRootProps: getListboxRootProps,\\n    contextValue: listContextValue,\\n    state: {\\n      open,\\n      highlightedValue: highlightedOption,\\n      selectedValues: selectedOptions\\n    },\\n    rootRef: mergedListRootRef\\n  } = (0, _useList.useList)(useListParameters);\\n\\n  // store the initial open state to prevent focus stealing\\n  // (the first option gets focused only when the select is opened by the user)\\n  const isInitiallyOpen = React.useRef(open);\\n  (0, _utils.unstable_useEnhancedEffect)(() => {\\n    if (open && highlightedOption !== null) {\\n      var _getOptionByValue;\\n      const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;\\n      if (!listboxRef.current || !(optionRef != null && optionRef.current)) {\\n        return;\\n      }\\n      if (!isInitiallyOpen.current) {\\n        optionRef.current.focus({\\n          preventScroll: true\\n        });\\n      }\\n      const listboxClientRect = listboxRef.current.getBoundingClientRect();\\n      const optionClientRect = optionRef.current.getBoundingClientRect();\\n      if (optionClientRect.top < listboxClientRect.top) {\\n        listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;\\n      } else if (optionClientRect.bottom > listboxClientRect.bottom) {\\n        listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;\\n      }\\n    }\\n  }, [open, highlightedOption, getOptionByValue]);\\n  const getOptionMetadata = React.useCallback(optionValue => getOptionByValue(optionValue), [getOptionByValue]);\\n  const createHandleButtonClick = externalEventHandlers => event => {\\n    var _externalEventHandler;\\n    externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onClick) == null || _externalEventHandler.call(externalEventHandlers, event);\\n    if (!event.defaultMuiPrevented) {\\n      const action = {\\n        type: _useSelect.SelectActionTypes.buttonClick,\\n        event\\n      };\\n      dispatch(action);\\n    }\\n  };\\n  const createHandleButtonKeyDown = otherHandlers => event => {\\n    var _otherHandlers$onKeyD;\\n    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);\\n    if (event.defaultMuiPrevented) {\\n      return;\\n    }\\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\\n      event.preventDefault();\\n      dispatch({\\n        type: _useList.ListActionTypes.keyDown,\\n        key: event.key,\\n        event\\n      });\\n    }\\n  };\\n  const getButtonOwnRootProps = (otherHandlers = {}) => ({\\n    onClick: createHandleButtonClick(otherHandlers),\\n    onKeyDown: createHandleButtonKeyDown(otherHandlers)\\n  });\\n  const getSelectTriggerProps = (otherHandlers = {}) => {\\n    return (0, _extends2.default)({}, otherHandlers, getButtonOwnRootProps(otherHandlers), {\\n      role: 'combobox',\\n      'aria-expanded': open,\\n      'aria-controls': listboxId\\n    });\\n  };\\n  const getButtonProps = (externalProps = {}) => {\\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\\n    const combinedProps = (0, _combineHooksSlotProps.combineHooksSlotProps)(getSelectTriggerProps, getButtonRootProps);\\n    return (0, _extends2.default)({}, externalProps, combinedProps(externalEventHandlers));\\n  };\\n  const createListboxHandleBlur = otherHandlers => event => {\\n    var _otherHandlers$onBlur, _listboxRef$current;\\n    (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);\\n    if (event.defaultMuiPrevented) {\\n      return;\\n    }\\n    if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(event.relatedTarget) || event.relatedTarget === buttonRef.current) {\\n      event.defaultMuiPrevented = true;\\n    }\\n  };\\n  const getOwnListboxHandlers = (otherHandlers = {}) => ({\\n    onBlur: createListboxHandleBlur(otherHandlers)\\n  });\\n  const getListboxProps = (externalProps = {}) => {\\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\\n    const getCombinedRootProps = (0, _combineHooksSlotProps.combineHooksSlotProps)(getOwnListboxHandlers, getListboxRootProps);\\n    return (0, _extends2.default)({\\n      id: listboxId,\\n      role: 'listbox',\\n      'aria-multiselectable': multiple ? 'true' : undefined\\n    }, externalProps, getCombinedRootProps(externalEventHandlers));\\n  };\\n  React.useDebugValue({\\n    selectedOptions,\\n    highlightedOption,\\n    open\\n  });\\n  const contextValue = React.useMemo(() => (0, _extends2.default)({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);\\n  let selectValue;\\n  if (props.multiple) {\\n    selectValue = selectedOptions;\\n  } else {\\n    selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;\\n  }\\n  let selectedOptionsMetadata;\\n  if (multiple) {\\n    selectedOptionsMetadata = selectValue.map(v => getOptionMetadata(v)).filter(o => o !== undefined);\\n  } else {\\n    var _getOptionMetadata;\\n    selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;\\n  }\\n  const createHandleHiddenInputChange = externalEventHandlers => event => {\\n    var _externalEventHandler2;\\n    externalEventHandlers == null || (_externalEventHandler2 = externalEventHandlers.onChange) == null || _externalEventHandler2.call(externalEventHandlers, event);\\n    if (event.defaultMuiPrevented) {\\n      return;\\n    }\\n    const option = options.get(event.target.value);\\n\\n    // support autofill\\n    if (event.target.value === '') {\\n      dispatch({\\n        type: _useList.ListActionTypes.clearSelection\\n      });\\n    } else if (option !== undefined) {\\n      dispatch({\\n        type: _useSelect.SelectActionTypes.browserAutoFill,\\n        item: option.value,\\n        event\\n      });\\n    }\\n  };\\n  const getHiddenInputProps = (externalProps = {}) => {\\n    const externalEventHandlers = (0, _extractEventHandlers.extractEventHandlers)(externalProps);\\n    return (0, _extends2.default)({\\n      name,\\n      tabIndex: -1,\\n      'aria-hidden': true,\\n      required: required ? true : undefined,\\n      value: getSerializedValue(selectedOptionsMetadata),\\n      style: _utils.visuallyHidden\\n    }, externalProps, {\\n      onChange: createHandleHiddenInputChange(externalEventHandlers)\\n    });\\n  };\\n  return {\\n    buttonActive,\\n    buttonFocusVisible,\\n    buttonRef: mergedButtonRef,\\n    contextValue,\\n    disabled,\\n    dispatch,\\n    getButtonProps,\\n    getHiddenInputProps,\\n    getListboxProps,\\n    getOptionMetadata,\\n    listboxRef: mergedListRootRef,\\n    open,\\n    options: optionValues,\\n    value: selectValue,\\n    highlightedOption\\n  };\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_getRequireWildcardCache\",\"e\",\"WeakMap\",\"r\",\"t\",\"defaultFormValueProvider\",\"selectedOption\",\"Array\",\"isArray\",\"length\",\"JSON\",\"stringify\",\"map\",\"o\",\"value\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"useSelect\",\"props\",\"areOptionsEqual\",\"buttonRefProp\",\"defaultOpen\",\"defaultValueProp\",\"disabled\",\"listboxIdProp\",\"listboxRefProp\",\"multiple\",\"name\",\"required\",\"onChange\",\"onHighlightChange\",\"onOpenChange\",\"openProp\",\"optionsParam\",\"getOptionAsString\",\"_defaultOptionStringifier\",\"defaultOptionStringifier\",\"getSerializedValue\",\"valueProp\",\"componentName\",\"buttonRef\",\"React\",\"useRef\",\"handleButtonRef\",\"_utils\",\"unstable_useForkRef\",\"listboxRef\",\"listboxId\",\"unstable_useId\",\"defaultValue\",\"undefined\",\"useMemo\",\"subitems\",\"compoundComponentContextValue\",\"_useCompound\",\"useCompoundParent\",\"options\",\"Map\",\"option\",\"index\",\"label\",\"ref\",\"createRef\",\"id\",\"handleListboxRef\",\"getButtonRootProps\",\"buttonActive\",\"buttonFocusVisible\",\"mergedButtonRef\",\"_useButton\",\"useButton\",\"rootRef\",\"optionValues\",\"from\",\"keys\",\"getOptionByValue\",\"useCallback\",\"valueToGet\",\"similarValue\",\"find\",\"optionValue\",\"get\",\"isItemDisabled\",\"valueToCheck\",\"_option$disabled\",\"stringifyOption\",\"controlledState\",\"selectedValues\",\"open\",\"getItemId\",\"itemValue\",\"_options$get\",\"handleSelectionChange\",\"event\",\"newValues\",\"_newValues$\",\"handleHighlightChange\",\"newValue\",\"handleStateChange\",\"field\",\"fieldValue\",\"type\",\"_buttonRef$current\",\"current\",\"focus\",\"getItemDomElement\",\"itemId\",\"_subitems$get$ref$cur\",\"_subitems$get\",\"useListParameters\",\"getInitialState\",\"_defaultValue\",\"highlightedValue\",\"controlledProps\",\"focusManagement\",\"itemComparer\",\"onStateChange\",\"reducerActionContext\",\"items\",\"getItemAsString\",\"selectionMode\",\"stateReducer\",\"_selectReducer\",\"selectReducer\",\"dispatch\",\"getListboxRootProps\",\"listContextValue\",\"highlightedOption\",\"selectedOptions\",\"mergedListRootRef\",\"_useList\",\"useList\",\"isInitiallyOpen\",\"unstable_useEnhancedEffect\",\"_getOptionByValue\",\"optionRef\",\"preventScroll\",\"listboxClientRect\",\"getBoundingClientRect\",\"optionClientRect\",\"top\",\"scrollTop\",\"bottom\",\"getOptionMetadata\",\"createHandleButtonClick\",\"externalEventHandlers\",\"_externalEventHandler\",\"onClick\",\"call\",\"defaultMuiPrevented\",\"action\",\"_useSelect\",\"SelectActionTypes\",\"buttonClick\",\"createHandleButtonKeyDown\",\"otherHandlers\",\"_otherHandlers$onKeyD\",\"onKeyDown\",\"key\",\"preventDefault\",\"ListActionTypes\",\"keyDown\",\"getButtonOwnRootProps\",\"getSelectTriggerProps\",\"_extends2\",\"default\",\"role\",\"createListboxHandleBlur\",\"_otherHandlers$onBlur\",\"_listboxRef$current\",\"onBlur\",\"contains\",\"relatedTarget\",\"getOwnListboxHandlers\",\"useDebugValue\",\"contextValue\",\"selectValue\",\"selectedOptionsMetadata\",\"v\",\"filter\",\"_getOptionMetadata\",\"createHandleHiddenInputChange\",\"_externalEventHandler2\",\"target\",\"clearSelection\",\"browserAutoFill\",\"item\",\"getButtonProps\",\"externalProps\",\"_extractEventHandlers\",\"extractEventHandlers\",\"combinedProps\",\"_combineHooksSlotProps\",\"combineHooksSlotProps\",\"getHiddenInputProps\",\"tabIndex\",\"style\",\"visuallyHidden\",\"getListboxProps\",\"getCombinedRootProps\",\"_interopRequireWildcard\",\"__esModule\",\"has\",\"n\",\"__proto__\",\"a\",\"getOwnPropertyDescriptor\",\"u\",\"prototype\",\"hasOwnProperty\",\"i\",\"set\"]\n}\n"]