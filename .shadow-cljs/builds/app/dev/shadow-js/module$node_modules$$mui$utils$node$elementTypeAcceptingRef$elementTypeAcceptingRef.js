["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/@mui/utils/node/elementTypeAcceptingRef/elementTypeAcceptingRef.js"],"~:js","shadow$provide.module$node_modules$$mui$utils$node$elementTypeAcceptingRef$elementTypeAcceptingRef = function(global, require, module, exports) {\n  module = require(\"module$node_modules$$babel$runtime$helpers$interopRequireDefault\");\n  Object.defineProperty(exports, \"__esModule\", {value:!0});\n  exports.default = void 0;\n  global = module(require(\"module$node_modules$prop_types$index\"));\n  require = module(require(\"module$node_modules$$mui$utils$node$chainPropTypes$index\"));\n  exports.default = (0,require.default)(global.default.elementType, function(props, propName, componentName, location, propFullName) {\n    props = props[propName];\n    if (null == props || \"undefined\" === typeof window) {\n      return null;\n    }\n    let warningHint;\n    var JSCompiler_temp;\n    if (JSCompiler_temp = \"function\" === typeof props) {\n      ({prototype:props = {}} = props), JSCompiler_temp = !props.isReactComponent;\n    }\n    JSCompiler_temp && (warningHint = \"Did you accidentally provide a plain function component instead?\");\n    return void 0 !== warningHint ? Error(`Invalid ${location} \\`${propFullName || propName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + \"For more information see https://mui.com/r/caveat-with-refs-guide\") : null;\n  });\n};\n","~:source","shadow$provide[\"module$node_modules$$mui$utils$node$elementTypeAcceptingRef$elementTypeAcceptingRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _chainPropTypes = _interopRequireDefault(require(\"../chainPropTypes\"));\nfunction isClassComponent(elementType) {\n  // elementType.prototype?.isReactComponent\n  const {\n    prototype = {}\n  } = elementType;\n  return Boolean(prototype.isReactComponent);\n}\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\n  const propValue = props[propName];\n  const safePropName = propFullName || propName;\n  if (propValue == null ||\n  // When server-side rendering React doesn't warn either.\n  // This is not an accurate check for SSR.\n  // This is only in place for emotion compat.\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\n  typeof window === 'undefined') {\n    return null;\n  }\n  let warningHint;\n\n  /**\n   * Blacklisting instead of whitelisting\n   *\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\n   * trigger a warning in React.\n   * We can't whitelist because there is no safe way to detect React.forwardRef\n   * or class components. \"Safe\" means there's no public API.\n   *\n   */\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\n    warningHint = 'Did you accidentally provide a plain function component instead?';\n  }\n  if (warningHint !== undefined) {\n    return new Error(`Invalid ${location} \\`${safePropName}\\` supplied to \\`${componentName}\\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\n  }\n  return null;\n}\nvar _default = exports.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$$babel$runtime$helpers$interopRequireDefault","~$module$node_modules$prop_types$index","~$shadow.js","~$module$node_modules$$mui$utils$node$chainPropTypes$index"]],"~:properties",["^5",["__esModule","value","default"]],"~:compiled-at",1712152510579,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$$mui$utils$node$elementTypeAcceptingRef$elementTypeAcceptingRef.js\",\n\"lineCount\":21,\n\"mappings\":\"AAAAA,cAAA,CAAA,mFAAA,GAAwG,QAAQ,CAACC,MAAD,EAAQC,OAAR,EAAgBC,MAAhB,EAAuBC,OAAvB,CAAgC;AAG5IC,QAAAA,GAAyBH,OAAA,CAAQ,kEAAR,CAAzBG;AACJC,QAAOC,CAAAA,cAAP,CAAsBH,OAAtB,EAA+B,YAA/B,EAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAAA;AAGAJ,SAAQK,CAAAA,OAAR,GAAkB,IAAK,EAAvB;AACIC,QAAAA,GAAaL,MAAA,CAAuBH,OAAA,CAAQ,sCAAR,CAAvB,CAAbQ;AACAC,SAAAA,GAAkBN,MAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAAlBS;AAsCWP,SAAQK,CAAAA,OAAR,GAAkB,GAAIE,OAAgBF,CAAAA,OAApB,EAA6BC,MAAWD,CAAAA,OAAQG,CAAAA,WAAhD,EA9BjCC,QAAgC,CAACC,KAAD,EAAQC,QAAR,EAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,YAA3C,CAAyD;AACjFC,SAAAA,GAAYL,KAAA,CAAMC,QAAN,CAAZI;AAEN,QAAiB,IAAjB,IAAIA,KAAJ,IAKkB,WALlB,KAKA,MAAOC,OALP;AAME,aAAO,IAAP;AANF;AAQA,QAAIC,WAAJ;AAWI,QAAA,eAAA;AAAA,QAAA,eAAA,GAAA,UAAA,KAAA,MAAA,MAAA;AAAmC,OA3BjC,CACJ,UAAAC,KAAA,GAAY,EADR,CA2BiC,GAAAV,KAAA,GAAA,eAAA,GAAA,CAxBxBU,KAAUC,CAAAA,gBAwBc;AAAnC;AAAA,mBAAJ,KACEF,WADF,GACgB,kEADhB;AAGA,WAAoBG,IAAAA,EAApB,KAAIH,WAAJ,GACaI,KAAJ,CAAW,WAAUR,QAAV,MAxBCC,YAwBD,IAxBiBH,QAwBjB,oBAAwDC,aAAxD,MAAX,GAA0F,iDAAgDK,WAAhD,GAA1F,GAA2J,mEAA3J,CADT,GAGO,IAHP;AAzBuF,GA8BxD,CAAlB;AA/CiI,CAAhJ;;\",\n\"sources\":[\"node_modules/@mui/utils/node/elementTypeAcceptingRef/elementTypeAcceptingRef.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$$mui$utils$node$elementTypeAcceptingRef$elementTypeAcceptingRef\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nvar _interopRequireDefault = require(\\\"@babel/runtime/helpers/interopRequireDefault\\\");\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports.default = void 0;\\nvar _propTypes = _interopRequireDefault(require(\\\"prop-types\\\"));\\nvar _chainPropTypes = _interopRequireDefault(require(\\\"../chainPropTypes\\\"));\\nfunction isClassComponent(elementType) {\\n  // elementType.prototype?.isReactComponent\\n  const {\\n    prototype = {}\\n  } = elementType;\\n  return Boolean(prototype.isReactComponent);\\n}\\nfunction elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {\\n  const propValue = props[propName];\\n  const safePropName = propFullName || propName;\\n  if (propValue == null ||\\n  // When server-side rendering React doesn't warn either.\\n  // This is not an accurate check for SSR.\\n  // This is only in place for emotion compat.\\n  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.\\n  typeof window === 'undefined') {\\n    return null;\\n  }\\n  let warningHint;\\n\\n  /**\\n   * Blacklisting instead of whitelisting\\n   *\\n   * Blacklisting will miss some components, such as React.Fragment. Those will at least\\n   * trigger a warning in React.\\n   * We can't whitelist because there is no safe way to detect React.forwardRef\\n   * or class components. \\\"Safe\\\" means there's no public API.\\n   *\\n   */\\n  if (typeof propValue === 'function' && !isClassComponent(propValue)) {\\n    warningHint = 'Did you accidentally provide a plain function component instead?';\\n  }\\n  if (warningHint !== undefined) {\\n    return new Error(`Invalid ${location} \\\\`${safePropName}\\\\` supplied to \\\\`${componentName}\\\\`. ` + `Expected an element type that can hold a ref. ${warningHint} ` + 'For more information see https://mui.com/r/caveat-with-refs-guide');\\n  }\\n  return null;\\n}\\nvar _default = exports.default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef);\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"Object\",\"defineProperty\",\"value\",\"default\",\"_propTypes\",\"_chainPropTypes\",\"elementType\",\"elementTypeAcceptingRef\",\"props\",\"propName\",\"componentName\",\"location\",\"propFullName\",\"propValue\",\"window\",\"warningHint\",\"prototype\",\"isReactComponent\",\"undefined\",\"Error\"]\n}\n"]